
Prelab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002ce  00000362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800110  00800110  00000372  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007fa  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c0  00000000  00000000  00000c16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d8  00000000  00000000  000012d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  000016b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ea  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000013a  00000000  00000000  00001b22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  9e:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:


void initADC(void)
{
	// Seleccion de Canal ADC0
	ADMUX = 7;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	87 e0       	ldi	r24, 0x07	; 7
  ac:	80 83       	st	Z, r24
	
	// Utilizando AVCC = 5V internos
	ADMUX |= (1<<REFS0);
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  b4:	80 81       	ld	r24, Z
  b6:	8f 77       	andi	r24, 0x7F	; 127
  b8:	80 83       	st	Z, r24
	
	// Justificacion a la Izquierda
	ADMUX |= (1<<ADLAR);
  ba:	80 81       	ld	r24, Z
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
	
	ADCSRA |= (1<<ADEN);
  c6:	80 81       	ld	r24, Z
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
	//Habilitamos las interrupciones
	ADCSRA |= (1<<ADIE);
  cc:	80 81       	ld	r24, Z
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	80 83       	st	Z, r24
	
	// Habilitamos el Prescaler de 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  d2:	80 81       	ld	r24, Z
  d4:	87 60       	ori	r24, 0x07	; 7
  d6:	80 83       	st	Z, r24
	
	// Habilitando el ADC
	ADCSRA |= (1<<ADEN);
  d8:	80 81       	ld	r24, Z
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	80 83       	st	Z, r24
  de:	08 95       	ret

000000e0 <main>:
int Seg7seg;
int cont8;

int main(void)
{
	cli();
  e0:	f8 94       	cli
	initADC();
  e2:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	sei();
  e6:	78 94       	sei
	 //Configuración de interrupciones
	 PCICR |= (1 << PCIE0);
  e8:	e8 e6       	ldi	r30, 0x68	; 104
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	80 83       	st	Z, r24
	 PCMSK0 |= (1 << PCINT0)| (1 << PCINT1);
  f2:	eb e6       	ldi	r30, 0x6B	; 107
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	83 60       	ori	r24, 0x03	; 3
  fa:	80 83       	st	Z, r24
	DDRD |= 0xFF;
  fc:	8a b1       	in	r24, 0x0a	; 10
  fe:	9f ef       	ldi	r25, 0xFF	; 255
 100:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0;
 102:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0;
 104:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	DDRB |= 0b00111100;
 108:	84 b1       	in	r24, 0x04	; 4
 10a:	8c 63       	ori	r24, 0x3C	; 60
 10c:	84 b9       	out	0x04, r24	; 4
	
  
	DDRC |= 0xFF;
 10e:	87 b1       	in	r24, 0x07	; 7
 110:	97 b9       	out	0x07, r25	; 7
    cont8 = 0;
 112:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <cont8+0x1>
 116:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <cont8>
    while (1) 
	{
		ADCSRA |= (1<<ADSC);
 11a:	ea e7       	ldi	r30, 0x7A	; 122
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 64       	ori	r24, 0x40	; 64
 122:	80 83       	st	Z, r24
		if(cont8 > 255)
 124:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cont8>
 128:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <cont8+0x1>
 12c:	8f 3f       	cpi	r24, 0xFF	; 255
 12e:	91 05       	cpc	r25, r1
 130:	39 f0       	breq	.+14     	; 0x140 <main+0x60>
 132:	34 f0       	brlt	.+12     	; 0x140 <main+0x60>
		cont8 = 255;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <cont8+0x1>
 13c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <cont8>
		if (cont8 < 0)
 140:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cont8>
 144:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <cont8+0x1>
 148:	99 23       	and	r25, r25
 14a:	24 f4       	brge	.+8      	; 0x154 <main+0x74>
		cont8 = 0;
 14c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <cont8+0x1>
 150:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <cont8>
		PORTD = cont8;
 154:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cont8>
 158:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	8f e1       	ldi	r24, 0x1F	; 31
 15c:	9e e4       	ldi	r25, 0x4E	; 78
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0x7e>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0x84>
 164:	00 00       	nop
		
		_delay_ms(5);
		PORTB = (1<<PORTB3);
 166:	88 e0       	ldi	r24, 0x08	; 8
 168:	85 b9       	out	0x05, r24	; 5
		Prim7seg = Lectura & 0x0F;
 16a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Lectura>
 16e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <Lectura+0x1>
 172:	8f 70       	andi	r24, 0x0F	; 15
 174:	99 27       	eor	r25, r25
 176:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <Prim7seg+0x1>
 17a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <Prim7seg>
		PORTC = mylist[Prim7seg];
 17e:	fc 01       	movw	r30, r24
 180:	e0 50       	subi	r30, 0x00	; 0
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	80 81       	ld	r24, Z
 186:	88 b9       	out	0x08, r24	; 8
		if (Prim7seg == 0 || Prim7seg == 1 || Prim7seg == 7 || Prim7seg == 12) 
 188:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Prim7seg>
 18c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <Prim7seg+0x1>
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	91 05       	cpc	r25, r1
 194:	28 f0       	brcs	.+10     	; 0x1a0 <main+0xc0>
 196:	87 30       	cpi	r24, 0x07	; 7
 198:	91 05       	cpc	r25, r1
 19a:	11 f0       	breq	.+4      	; 0x1a0 <main+0xc0>
 19c:	0c 97       	sbiw	r24, 0x0c	; 12
 19e:	19 f4       	brne	.+6      	; 0x1a6 <main+0xc6>
		{
		 PORTB |= (0<<PORTB5);
 1a0:	85 b1       	in	r24, 0x05	; 5
 1a2:	85 b9       	out	0x05, r24	; 5
 1a4:	03 c0       	rjmp	.+6      	; 0x1ac <main+0xcc>
		} else {
		 PORTB |= (1<<PORTB5);
 1a6:	85 b1       	in	r24, 0x05	; 5
 1a8:	80 62       	ori	r24, 0x20	; 32
 1aa:	85 b9       	out	0x05, r24	; 5
 1ac:	8f e7       	ldi	r24, 0x7F	; 127
 1ae:	9e e3       	ldi	r25, 0x3E	; 62
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0xd0>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0xd6>
 1b6:	00 00       	nop
	}

	_delay_ms(4);
		PORTB = (1<<PORTB2);
 1b8:	84 e0       	ldi	r24, 0x04	; 4
 1ba:	85 b9       	out	0x05, r24	; 5
		Seg7seg = (Lectura>>4) & 0x0F;
 1bc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Lectura>
 1c0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <Lectura+0x1>
 1c4:	95 95       	asr	r25
 1c6:	87 95       	ror	r24
 1c8:	95 95       	asr	r25
 1ca:	87 95       	ror	r24
 1cc:	95 95       	asr	r25
 1ce:	87 95       	ror	r24
 1d0:	95 95       	asr	r25
 1d2:	87 95       	ror	r24
 1d4:	8f 70       	andi	r24, 0x0F	; 15
 1d6:	99 27       	eor	r25, r25
 1d8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 1dc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		if (Seg7seg == 0 || Seg7seg == 1 || Seg7seg == 7 || Seg7seg == 12) {
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	91 05       	cpc	r25, r1
 1e4:	28 f0       	brcs	.+10     	; 0x1f0 <main+0x110>
 1e6:	87 30       	cpi	r24, 0x07	; 7
 1e8:	91 05       	cpc	r25, r1
 1ea:	11 f0       	breq	.+4      	; 0x1f0 <main+0x110>
 1ec:	0c 97       	sbiw	r24, 0x0c	; 12
 1ee:	19 f4       	brne	.+6      	; 0x1f6 <main+0x116>
			PORTB |= (0<<PORTB5);
 1f0:	85 b1       	in	r24, 0x05	; 5
 1f2:	85 b9       	out	0x05, r24	; 5
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <main+0x11c>
			} else {
			PORTB |= (1<<PORTB5);
 1f6:	85 b1       	in	r24, 0x05	; 5
 1f8:	80 62       	ori	r24, 0x20	; 32
 1fa:	85 b9       	out	0x05, r24	; 5
		}

		PORTC = mylist[Seg7seg];
 1fc:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 200:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__data_end+0x1>
 204:	e0 50       	subi	r30, 0x00	; 0
 206:	ff 4f       	sbci	r31, 0xFF	; 255
 208:	80 81       	ld	r24, Z
 20a:	88 b9       	out	0x08, r24	; 8
		
		if (cont8 < Lectura){
 20c:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <cont8>
 210:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <cont8+0x1>
 214:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Lectura>
 218:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <Lectura+0x1>
 21c:	28 17       	cp	r18, r24
 21e:	39 07       	cpc	r19, r25
 220:	1c f4       	brge	.+6      	; 0x228 <main+0x148>
			PORTB |= (1<<PORTB4);
 222:	85 b1       	in	r24, 0x05	; 5
 224:	80 61       	ori	r24, 0x10	; 16
 226:	85 b9       	out	0x05, r24	; 5
		}
		if (cont8 > Lectura){
 228:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <cont8>
 22c:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <cont8+0x1>
 230:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Lectura>
 234:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <Lectura+0x1>
 238:	82 17       	cp	r24, r18
 23a:	93 07       	cpc	r25, r19
 23c:	0c f0       	brlt	.+2      	; 0x240 <main+0x160>
 23e:	6d cf       	rjmp	.-294    	; 0x11a <main+0x3a>
			PORTB |= (0<<PORTB4);
 240:	85 b1       	in	r24, 0x05	; 5
 242:	85 b9       	out	0x05, r24	; 5
 244:	6a cf       	rjmp	.-300    	; 0x11a <main+0x3a>

00000246 <__vector_21>:
	
	// Habilitando el ADC
	ADCSRA |= (1<<ADEN);
}

ISR(ADC_vect){
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	ef 93       	push	r30
 256:	ff 93       	push	r31
	Lectura = ADCH;
 258:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <Lectura+0x1>
 262:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <Lectura>
	ADCSRA |= (1<<ADIF);
 266:	ea e7       	ldi	r30, 0x7A	; 122
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	80 61       	ori	r24, 0x10	; 16
 26e:	80 83       	st	Z, r24

}
 270:	ff 91       	pop	r31
 272:	ef 91       	pop	r30
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <__vector_3>:
ISR(PCINT0_vect){
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
	if ((PINB&(1<<PINB1))==0) //Reviso el botón de incremento
 290:	19 99       	sbic	0x03, 1	; 3
 292:	09 c0       	rjmp	.+18     	; 0x2a6 <__vector_3+0x24>
	cont8++;
 294:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cont8>
 298:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <cont8+0x1>
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <cont8+0x1>
 2a2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <cont8>
	if ((PINB&(1<<PINB0))==0) //Reviso el botón de decremento
 2a6:	18 99       	sbic	0x03, 0	; 3
 2a8:	09 c0       	rjmp	.+18     	; 0x2bc <__vector_3+0x3a>
	cont8--;
 2aa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cont8>
 2ae:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <cont8+0x1>
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <cont8+0x1>
 2b8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <cont8>
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <_exit>:
 2ca:	f8 94       	cli

000002cc <__stop_program>:
 2cc:	ff cf       	rjmp	.-2      	; 0x2cc <__stop_program>
