
Lab6_Atmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000af3  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000790  00000000  00000000  00000f07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000534  00000000  00000000  00001697  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00001bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045f  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ad  00000000  00000000  00002113  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  78:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
#define BUTTON3_PIN PD4
#define BUTTON4_PIN PD5
#define BUTTON5_PIN PD6
#define BUTTON6_PIN PD7

void setup() {
  80:	af 92       	push	r10
  82:	bf 92       	push	r11
  84:	cf 92       	push	r12
  86:	df 92       	push	r13
  88:	ef 92       	push	r14
  8a:	ff 92       	push	r15
  8c:	0f 93       	push	r16
  8e:	1f 93       	push	r17
	// Configurar los pines de los botones como entradas
	DDRD &= ~(1 << BUTTON1_PIN); // Botón 1
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	8b 7f       	andi	r24, 0xFB	; 251
  94:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << BUTTON2_PIN); // Botón 2
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	87 7f       	andi	r24, 0xF7	; 247
  9a:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << BUTTON3_PIN); // Botón 3
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	8f 7e       	andi	r24, 0xEF	; 239
  a0:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << BUTTON4_PIN); // Botón 4
  a2:	8a b1       	in	r24, 0x0a	; 10
  a4:	8f 7d       	andi	r24, 0xDF	; 223
  a6:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << BUTTON5_PIN); // Botón 5
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	8f 7b       	andi	r24, 0xBF	; 191
  ac:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << BUTTON6_PIN); // Botón 6
  ae:	8a b1       	in	r24, 0x0a	; 10
  b0:	8f 77       	andi	r24, 0x7F	; 127
  b2:	8a b9       	out	0x0a, r24	; 10

	// Habilitar pull-up interno para los botones
	PORTD |= (1 << BUTTON1_PIN);
  b4:	8b b1       	in	r24, 0x0b	; 11
  b6:	84 60       	ori	r24, 0x04	; 4
  b8:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << BUTTON2_PIN);
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << BUTTON3_PIN);
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	80 61       	ori	r24, 0x10	; 16
  c4:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << BUTTON4_PIN);
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	80 62       	ori	r24, 0x20	; 32
  ca:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << BUTTON5_PIN);
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << BUTTON6_PIN);
  d2:	8b b1       	in	r24, 0x0b	; 11
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	8b b9       	out	0x0b, r24	; 11

	// Inicializar UART
	initUART(9600, 0, 0, 0, 0, 1, 8, 103); // Velocidad de 9600 baudios
  d8:	0f 2e       	mov	r0, r31
  da:	f7 e6       	ldi	r31, 0x67	; 103
  dc:	af 2e       	mov	r10, r31
  de:	b1 2c       	mov	r11, r1
  e0:	f0 2d       	mov	r31, r0
  e2:	68 94       	set
  e4:	cc 24       	eor	r12, r12
  e6:	c3 f8       	bld	r12, 3
  e8:	d1 2c       	mov	r13, r1
  ea:	ee 24       	eor	r14, r14
  ec:	e3 94       	inc	r14
  ee:	f1 2c       	mov	r15, r1
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	10 e0       	ldi	r17, 0x00	; 0
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	80 e8       	ldi	r24, 0x80	; 128
 102:	95 e2       	ldi	r25, 0x25	; 37
 104:	0e 94 e7 00 	call	0x1ce	; 0x1ce <initUART>
}
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
 10c:	ff 90       	pop	r15
 10e:	ef 90       	pop	r14
 110:	df 90       	pop	r13
 112:	cf 90       	pop	r12
 114:	bf 90       	pop	r11
 116:	af 90       	pop	r10
 118:	08 95       	ret

0000011a <loop>:

void loop() {
	// Leer cada botón y enviar una letra por UART
	if (!(PIND & (1 << BUTTON1_PIN))) {
 11a:	4a 99       	sbic	0x09, 2	; 9
 11c:	0c c0       	rjmp	.+24     	; 0x136 <loop+0x1c>
		writeUART_car('A'); // Botón 1 presionado, enviar 'A'
 11e:	81 e4       	ldi	r24, 0x41	; 65
 120:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <writeUART_car>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	2f e5       	ldi	r18, 0x5F	; 95
 126:	8a ee       	ldi	r24, 0xEA	; 234
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <loop+0x10>
 132:	00 c0       	rjmp	.+0      	; 0x134 <loop+0x1a>
 134:	00 00       	nop
		_delay_ms(300); // Evitar rebote
	}
	if (!(PIND & (1 << BUTTON2_PIN))) {
 136:	4b 99       	sbic	0x09, 3	; 9
 138:	0c c0       	rjmp	.+24     	; 0x152 <loop+0x38>
		writeUART_car('B'); // Botón 2 presionado, enviar 'B'
 13a:	82 e4       	ldi	r24, 0x42	; 66
 13c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <writeUART_car>
 140:	2f e5       	ldi	r18, 0x5F	; 95
 142:	8a ee       	ldi	r24, 0xEA	; 234
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <loop+0x2c>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <loop+0x36>
 150:	00 00       	nop
		_delay_ms(300);
	}
	if (!(PIND & (1 << BUTTON3_PIN))) {
 152:	4c 99       	sbic	0x09, 4	; 9
 154:	0c c0       	rjmp	.+24     	; 0x16e <loop+0x54>
		writeUART_car('C'); // Botón 3 presionado, enviar 'C'
 156:	83 e4       	ldi	r24, 0x43	; 67
 158:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <writeUART_car>
 15c:	2f e5       	ldi	r18, 0x5F	; 95
 15e:	8a ee       	ldi	r24, 0xEA	; 234
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	21 50       	subi	r18, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <loop+0x48>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <loop+0x52>
 16c:	00 00       	nop
		_delay_ms(300);
	}
	if (!(PIND & (1 << BUTTON4_PIN))) {
 16e:	4d 99       	sbic	0x09, 5	; 9
 170:	0c c0       	rjmp	.+24     	; 0x18a <loop+0x70>
		writeUART_car('D'); // Botón 4 presionado, enviar 'D'
 172:	84 e4       	ldi	r24, 0x44	; 68
 174:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <writeUART_car>
 178:	2f e5       	ldi	r18, 0x5F	; 95
 17a:	8a ee       	ldi	r24, 0xEA	; 234
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <loop+0x64>
 186:	00 c0       	rjmp	.+0      	; 0x188 <loop+0x6e>
 188:	00 00       	nop
		_delay_ms(300);
	}
	if (!(PIND & (1 << BUTTON5_PIN))) {
 18a:	4e 99       	sbic	0x09, 6	; 9
 18c:	0c c0       	rjmp	.+24     	; 0x1a6 <loop+0x8c>
		writeUART_car('E'); // Botón 5 presionado, enviar 'E'
 18e:	85 e4       	ldi	r24, 0x45	; 69
 190:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <writeUART_car>
 194:	2f e5       	ldi	r18, 0x5F	; 95
 196:	8a ee       	ldi	r24, 0xEA	; 234
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <loop+0x80>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <loop+0x8a>
 1a4:	00 00       	nop
		_delay_ms(300);
	}
	if (!(PIND & (1 << BUTTON6_PIN))) {
 1a6:	4f 99       	sbic	0x09, 7	; 9
 1a8:	0c c0       	rjmp	.+24     	; 0x1c2 <loop+0xa8>
		writeUART_car('F'); // Botón 6 presionado, enviar 'F'
 1aa:	86 e4       	ldi	r24, 0x46	; 70
 1ac:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <writeUART_car>
 1b0:	2f e5       	ldi	r18, 0x5F	; 95
 1b2:	8a ee       	ldi	r24, 0xEA	; 234
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <loop+0x9c>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <loop+0xa6>
 1c0:	00 00       	nop
 1c2:	08 95       	ret

000001c4 <main>:
		_delay_ms(300);
	}
}

int main(void) {
	setup();
 1c4:	0e 94 40 00 	call	0x80	; 0x80 <setup>
	while (1) {
		loop(); // Llamar al loop principal continuamente
 1c8:	0e 94 8d 00 	call	0x11a	; 0x11a <loop>
 1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <main+0x4>

000001ce <initUART>:


#include "UART.h"

void initUART(int baud_rate, int turbo, int multiprocesador, int sincrono, int paridad, int bit_stop, int cantidad_caracteres,int UBRR0_valor){
 1ce:	af 92       	push	r10
 1d0:	bf 92       	push	r11
 1d2:	cf 92       	push	r12
 1d4:	df 92       	push	r13
 1d6:	ef 92       	push	r14
 1d8:	ff 92       	push	r15
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
	//RX ENTRADA
	DDRD &= ~(1<<DDD0);
 1de:	8a b1       	in	r24, 0x0a	; 10
 1e0:	8e 7f       	andi	r24, 0xFE	; 254
 1e2:	8a b9       	out	0x0a, r24	; 10
	//TX SALIDA
	DDRD |= (1<<DDD1);
 1e4:	8a b1       	in	r24, 0x0a	; 10
 1e6:	82 60       	ori	r24, 0x02	; 2
 1e8:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0A=0;
 1ea:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	//Modo turbo
	if (turbo==1){
 1ee:	61 30       	cpi	r22, 0x01	; 1
 1f0:	71 05       	cpc	r23, r1
 1f2:	29 f4       	brne	.+10     	; 0x1fe <initUART+0x30>
		UCSR0A |= (1<<U2X0);
 1f4:	e0 ec       	ldi	r30, 0xC0	; 192
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	80 83       	st	Z, r24
	}
	//Habilitar multiprocesador
	if (multiprocesador==1){
 1fe:	41 30       	cpi	r20, 0x01	; 1
 200:	51 05       	cpc	r21, r1
 202:	29 f4       	brne	.+10     	; 0x20e <initUART+0x40>
		UCSR0A |= (1<<MPCM0);
 204:	e0 ec       	ldi	r30, 0xC0	; 192
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	81 60       	ori	r24, 0x01	; 1
 20c:	80 83       	st	Z, r24
	}

	//Interrupciones
	UCSR0B=0;
 20e:	e1 ec       	ldi	r30, 0xC1	; 193
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	10 82       	st	Z, r1
	//RX interrupcion recepcion (1<<RXCIE0)
	//TX interrupcion transmision (1<<TXCIE0)
	// Interrupcion de datas (1<<UDRIE0)
	UCSR0B |= (1<<RXCIE0)|(1<<UDRIE0)|(1<<UDRIE0);
 214:	80 81       	ld	r24, Z
 216:	80 6a       	ori	r24, 0xA0	; 160
 218:	80 83       	st	Z, r24
	
	//Habilitar recepcion y envio
	//RX RECEPCION TX ENVIO
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 21a:	80 81       	ld	r24, Z
 21c:	88 61       	ori	r24, 0x18	; 24
 21e:	80 83       	st	Z, r24
	

	UCSR0C=0;
 220:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	if (sincrono==1){
 224:	21 30       	cpi	r18, 0x01	; 1
 226:	31 05       	cpc	r19, r1
 228:	29 f4       	brne	.+10     	; 0x234 <initUART+0x66>
		UCSR0C |= (1<<UMSEL00);
 22a:	e2 ec       	ldi	r30, 0xC2	; 194
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	80 64       	ori	r24, 0x40	; 64
 232:	80 83       	st	Z, r24
	}
	if (paridad==1){
 234:	01 30       	cpi	r16, 0x01	; 1
 236:	11 05       	cpc	r17, r1
 238:	31 f4       	brne	.+12     	; 0x246 <initUART+0x78>
		//Par
		UCSR0C |= (1<<UPM01);
 23a:	e2 ec       	ldi	r30, 0xC2	; 194
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	80 62       	ori	r24, 0x20	; 32
 242:	80 83       	st	Z, r24
 244:	08 c0       	rjmp	.+16     	; 0x256 <initUART+0x88>
		} else if (paridad==2){
 246:	02 30       	cpi	r16, 0x02	; 2
 248:	11 05       	cpc	r17, r1
 24a:	29 f4       	brne	.+10     	; 0x256 <initUART+0x88>
		//Impar
		UCSR0C |= (1<<UPM01)|(1<<UPM00);
 24c:	e2 ec       	ldi	r30, 0xC2	; 194
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	80 63       	ori	r24, 0x30	; 48
 254:	80 83       	st	Z, r24
	}
	if (bit_stop==2){
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	e8 16       	cp	r14, r24
 25a:	f1 04       	cpc	r15, r1
 25c:	29 f4       	brne	.+10     	; 0x268 <initUART+0x9a>
		UCSR0C |= (1<<USBS0);
 25e:	e2 ec       	ldi	r30, 0xC2	; 194
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	88 60       	ori	r24, 0x08	; 8
 266:	80 83       	st	Z, r24
	}
	
	switch (cantidad_caracteres){
 268:	87 e0       	ldi	r24, 0x07	; 7
 26a:	c8 16       	cp	r12, r24
 26c:	d1 04       	cpc	r13, r1
 26e:	a9 f0       	breq	.+42     	; 0x29a <initUART+0xcc>
 270:	2c f4       	brge	.+10     	; 0x27c <initUART+0xae>
 272:	86 e0       	ldi	r24, 0x06	; 6
 274:	c8 16       	cp	r12, r24
 276:	d1 04       	cpc	r13, r1
 278:	51 f0       	breq	.+20     	; 0x28e <initUART+0xc0>
 27a:	20 c0       	rjmp	.+64     	; 0x2bc <initUART+0xee>
 27c:	88 e0       	ldi	r24, 0x08	; 8
 27e:	c8 16       	cp	r12, r24
 280:	d1 04       	cpc	r13, r1
 282:	89 f0       	breq	.+34     	; 0x2a6 <initUART+0xd8>
 284:	89 e0       	ldi	r24, 0x09	; 9
 286:	c8 16       	cp	r12, r24
 288:	d1 04       	cpc	r13, r1
 28a:	99 f0       	breq	.+38     	; 0x2b2 <initUART+0xe4>
 28c:	17 c0       	rjmp	.+46     	; 0x2bc <initUART+0xee>
		case 5:
		
		break;
		case 6:
		UCSR0C |= (1<<UCSZ00);
 28e:	e2 ec       	ldi	r30, 0xC2	; 194
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	82 60       	ori	r24, 0x02	; 2
 296:	80 83       	st	Z, r24
		break;
 298:	11 c0       	rjmp	.+34     	; 0x2bc <initUART+0xee>
		case 7:
		UCSR0C |= (1<<UCSZ01);
 29a:	e2 ec       	ldi	r30, 0xC2	; 194
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	84 60       	ori	r24, 0x04	; 4
 2a2:	80 83       	st	Z, r24
		break;
 2a4:	0b c0       	rjmp	.+22     	; 0x2bc <initUART+0xee>
		case 8:
		UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 2a6:	e2 ec       	ldi	r30, 0xC2	; 194
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	86 60       	ori	r24, 0x06	; 6
 2ae:	80 83       	st	Z, r24
		break;
 2b0:	05 c0       	rjmp	.+10     	; 0x2bc <initUART+0xee>
		case 9:
		UCSR0C |= (1<<UCSZ02)|(1<<UCSZ01)|(1<<UCSZ00);
 2b2:	e2 ec       	ldi	r30, 0xC2	; 194
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	86 60       	ori	r24, 0x06	; 6
 2ba:	80 83       	st	Z, r24
		break;
	}
	
	//UBRR0 = ((Foscilo)/(16 x BAUD))-1
	UBRR0=UBRR0_valor;
 2bc:	b0 92 c5 00 	sts	0x00C5, r11	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2c0:	a0 92 c4 00 	sts	0x00C4, r10	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
}
 2c4:	1f 91       	pop	r17
 2c6:	0f 91       	pop	r16
 2c8:	ff 90       	pop	r15
 2ca:	ef 90       	pop	r14
 2cc:	df 90       	pop	r13
 2ce:	cf 90       	pop	r12
 2d0:	bf 90       	pop	r11
 2d2:	af 90       	pop	r10
 2d4:	08 95       	ret

000002d6 <writeUART_car>:

void writeUART_car(char caracter){
	while (!(UCSR0A & (1<<UDRE0)));
 2d6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2da:	95 ff       	sbrs	r25, 5
 2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <writeUART_car>
	UDR0=caracter;
 2de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2e2:	08 95       	ret

000002e4 <_exit>:
 2e4:	f8 94       	cli

000002e6 <__stop_program>:
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <__stop_program>
