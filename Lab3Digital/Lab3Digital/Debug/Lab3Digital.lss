
Lab3Digital.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092c  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074d  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000414  00000000  00000000  00001415  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  0000182c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000430  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000206  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001f12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 3d 01 	jmp	0x27a	; 0x27a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>
//#include "LCD8b/LCD8b.h"
//#include "ADC/ADC.h"
#include "UART/UART.h"

int main(void) {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <main+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x8>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
	uint8_t received_value =0;
	char buffer[4];
	uint8_t i = 0;

	// Inicializar UART con baud rate 9600 (UBRR0_valor depende del reloj del microcontrolador)
	initUART(9600, 0, 0, 0, 0, 1, 8, 103);
  8c:	0f 2e       	mov	r0, r31
  8e:	f7 e6       	ldi	r31, 0x67	; 103
  90:	af 2e       	mov	r10, r31
  92:	b1 2c       	mov	r11, r1
  94:	f0 2d       	mov	r31, r0
  96:	68 94       	set
  98:	cc 24       	eor	r12, r12
  9a:	c3 f8       	bld	r12, 3
  9c:	d1 2c       	mov	r13, r1
  9e:	ee 24       	eor	r14, r14
  a0:	e3 94       	inc	r14
  a2:	f1 2c       	mov	r15, r1
  a4:	00 e0       	ldi	r16, 0x00	; 0
  a6:	10 e0       	ldi	r17, 0x00	; 0
  a8:	20 e0       	ldi	r18, 0x00	; 0
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	80 e8       	ldi	r24, 0x80	; 128
  b6:	95 e2       	ldi	r25, 0x25	; 37
  b8:	0e 94 8c 00 	call	0x118	; 0x118 <initUART>

	// Configurar PD2 a PD7 como salidas
    DDRD = 0b11111100;
  bc:	8c ef       	ldi	r24, 0xFC	; 252
  be:	8a b9       	out	0x0a, r24	; 10
	 // Configurar PB0 y PB1 (que corresponden a PD8 y PD9) como salidas
    DDRB |= (1 << DDB0) | (1 << DDB1);
  c0:	84 b1       	in	r24, 0x04	; 4
  c2:	83 60       	ori	r24, 0x03	; 3
  c4:	84 b9       	out	0x04, r24	; 4
    while (1) {
        // Leer 3 caracteres desde UART
        for (i = 0; i < 3; i++) {
  c6:	10 e0       	ldi	r17, 0x00	; 0
  c8:	0c c0       	rjmp	.+24     	; 0xe2 <main+0x62>
            buffer[i] = receivedChar();
  ca:	e1 2e       	mov	r14, r17
  cc:	f1 2c       	mov	r15, r1
  ce:	0e 94 10 01 	call	0x220	; 0x220 <receivedChar>
  d2:	e1 e0       	ldi	r30, 0x01	; 1
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	ec 0f       	add	r30, r28
  d8:	fd 1f       	adc	r31, r29
  da:	ee 0d       	add	r30, r14
  dc:	ff 1d       	adc	r31, r15
  de:	80 83       	st	Z, r24
    DDRD = 0b11111100;
	 // Configurar PB0 y PB1 (que corresponden a PD8 y PD9) como salidas
    DDRB |= (1 << DDB0) | (1 << DDB1);
    while (1) {
        // Leer 3 caracteres desde UART
        for (i = 0; i < 3; i++) {
  e0:	1f 5f       	subi	r17, 0xFF	; 255
  e2:	13 30       	cpi	r17, 0x03	; 3
  e4:	90 f3       	brcs	.-28     	; 0xca <main+0x4a>
            buffer[i] = receivedChar();
        }
        buffer[3] = '\0'; // Finalizar la cadena de texto
  e6:	1c 82       	std	Y+4, r1	; 0x04

          received_value = (uint8_t)atoi(buffer);
  e8:	ce 01       	movw	r24, r28
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	0e 94 17 01 	call	0x22e	; 0x22e <atoi>

        // Asignar los primeros 6 bits a PORTD (PD2-PD7)
        PORTD = (PORTD & 0b00000011) | (received_value << 2);
  f0:	4b b1       	in	r20, 0x0b	; 11
  f2:	9c 01       	movw	r18, r24
  f4:	33 27       	eor	r19, r19
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	94 2f       	mov	r25, r20
 100:	93 70       	andi	r25, 0x03	; 3
 102:	29 2b       	or	r18, r25
 104:	2b b9       	out	0x0b, r18	; 11

        // Asignar los bits 7 y 8 a PORTB (PB0 y PB1)
        PORTB = (PORTB & 0b11111100) | ((received_value >> 6) & 0b00000011);
 106:	95 b1       	in	r25, 0x05	; 5
 108:	9c 7f       	andi	r25, 0xFC	; 252
 10a:	82 95       	swap	r24
 10c:	86 95       	lsr	r24
 10e:	86 95       	lsr	r24
 110:	83 70       	andi	r24, 0x03	; 3
 112:	89 2b       	or	r24, r25
 114:	85 b9       	out	0x05, r24	; 5

        // _delay_ms(500); // Pausa opcional si es necesario
    }
 116:	d7 cf       	rjmp	.-82     	; 0xc6 <main+0x46>

00000118 <initUART>:
	uint8_t i;
	for (i=0; texto[i]!='\0'; i++){
		while (!(UCSR0A & (1<<UDRE0)));
		UDR0=texto[i];
	}
}
 118:	af 92       	push	r10
 11a:	bf 92       	push	r11
 11c:	cf 92       	push	r12
 11e:	df 92       	push	r13
 120:	ef 92       	push	r14
 122:	ff 92       	push	r15
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	8a b1       	in	r24, 0x0a	; 10
 12a:	8e 7f       	andi	r24, 0xFE	; 254
 12c:	8a b9       	out	0x0a, r24	; 10
 12e:	8a b1       	in	r24, 0x0a	; 10
 130:	82 60       	ori	r24, 0x02	; 2
 132:	8a b9       	out	0x0a, r24	; 10
 134:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 138:	61 30       	cpi	r22, 0x01	; 1
 13a:	71 05       	cpc	r23, r1
 13c:	29 f4       	brne	.+10     	; 0x148 <initUART+0x30>
 13e:	e0 ec       	ldi	r30, 0xC0	; 192
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	82 60       	ori	r24, 0x02	; 2
 146:	80 83       	st	Z, r24
 148:	41 30       	cpi	r20, 0x01	; 1
 14a:	51 05       	cpc	r21, r1
 14c:	29 f4       	brne	.+10     	; 0x158 <initUART+0x40>
 14e:	e0 ec       	ldi	r30, 0xC0	; 192
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	81 60       	ori	r24, 0x01	; 1
 156:	80 83       	st	Z, r24
 158:	e1 ec       	ldi	r30, 0xC1	; 193
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	10 82       	st	Z, r1
 15e:	80 81       	ld	r24, Z
 160:	80 6a       	ori	r24, 0xA0	; 160
 162:	80 83       	st	Z, r24
 164:	80 81       	ld	r24, Z
 166:	88 61       	ori	r24, 0x18	; 24
 168:	80 83       	st	Z, r24
 16a:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 16e:	21 30       	cpi	r18, 0x01	; 1
 170:	31 05       	cpc	r19, r1
 172:	29 f4       	brne	.+10     	; 0x17e <initUART+0x66>
 174:	e2 ec       	ldi	r30, 0xC2	; 194
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	80 64       	ori	r24, 0x40	; 64
 17c:	80 83       	st	Z, r24
 17e:	01 30       	cpi	r16, 0x01	; 1
 180:	11 05       	cpc	r17, r1
 182:	31 f4       	brne	.+12     	; 0x190 <initUART+0x78>
 184:	e2 ec       	ldi	r30, 0xC2	; 194
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	80 62       	ori	r24, 0x20	; 32
 18c:	80 83       	st	Z, r24
 18e:	08 c0       	rjmp	.+16     	; 0x1a0 <initUART+0x88>
 190:	02 30       	cpi	r16, 0x02	; 2
 192:	11 05       	cpc	r17, r1
 194:	29 f4       	brne	.+10     	; 0x1a0 <initUART+0x88>
 196:	e2 ec       	ldi	r30, 0xC2	; 194
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	80 63       	ori	r24, 0x30	; 48
 19e:	80 83       	st	Z, r24
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	e8 16       	cp	r14, r24
 1a4:	f1 04       	cpc	r15, r1
 1a6:	29 f4       	brne	.+10     	; 0x1b2 <initUART+0x9a>
 1a8:	e2 ec       	ldi	r30, 0xC2	; 194
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	88 60       	ori	r24, 0x08	; 8
 1b0:	80 83       	st	Z, r24
 1b2:	87 e0       	ldi	r24, 0x07	; 7
 1b4:	c8 16       	cp	r12, r24
 1b6:	d1 04       	cpc	r13, r1
 1b8:	a9 f0       	breq	.+42     	; 0x1e4 <initUART+0xcc>
 1ba:	2c f4       	brge	.+10     	; 0x1c6 <initUART+0xae>
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	c8 16       	cp	r12, r24
 1c0:	d1 04       	cpc	r13, r1
 1c2:	51 f0       	breq	.+20     	; 0x1d8 <initUART+0xc0>
 1c4:	20 c0       	rjmp	.+64     	; 0x206 <initUART+0xee>
 1c6:	88 e0       	ldi	r24, 0x08	; 8
 1c8:	c8 16       	cp	r12, r24
 1ca:	d1 04       	cpc	r13, r1
 1cc:	89 f0       	breq	.+34     	; 0x1f0 <initUART+0xd8>
 1ce:	89 e0       	ldi	r24, 0x09	; 9
 1d0:	c8 16       	cp	r12, r24
 1d2:	d1 04       	cpc	r13, r1
 1d4:	99 f0       	breq	.+38     	; 0x1fc <initUART+0xe4>
 1d6:	17 c0       	rjmp	.+46     	; 0x206 <initUART+0xee>
 1d8:	e2 ec       	ldi	r30, 0xC2	; 194
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	82 60       	ori	r24, 0x02	; 2
 1e0:	80 83       	st	Z, r24
 1e2:	11 c0       	rjmp	.+34     	; 0x206 <initUART+0xee>
 1e4:	e2 ec       	ldi	r30, 0xC2	; 194
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	84 60       	ori	r24, 0x04	; 4
 1ec:	80 83       	st	Z, r24
 1ee:	0b c0       	rjmp	.+22     	; 0x206 <initUART+0xee>
 1f0:	e2 ec       	ldi	r30, 0xC2	; 194
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	86 60       	ori	r24, 0x06	; 6
 1f8:	80 83       	st	Z, r24
 1fa:	05 c0       	rjmp	.+10     	; 0x206 <initUART+0xee>
 1fc:	e2 ec       	ldi	r30, 0xC2	; 194
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	86 60       	ori	r24, 0x06	; 6
 204:	80 83       	st	Z, r24
 206:	b0 92 c5 00 	sts	0x00C5, r11	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 20a:	a0 92 c4 00 	sts	0x00C4, r10	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	ff 90       	pop	r15
 214:	ef 90       	pop	r14
 216:	df 90       	pop	r13
 218:	cf 90       	pop	r12
 21a:	bf 90       	pop	r11
 21c:	af 90       	pop	r10
 21e:	08 95       	ret

00000220 <receivedChar>:

uint8_t receivedChar(void){
	while (!(UCSR0A & (1 << RXC0)));
 220:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 224:	88 23       	and	r24, r24
 226:	e4 f7       	brge	.-8      	; 0x220 <receivedChar>
	return UDR0;
 228:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 22c:	08 95       	ret

0000022e <atoi>:
 22e:	fc 01       	movw	r30, r24
 230:	88 27       	eor	r24, r24
 232:	99 27       	eor	r25, r25
 234:	e8 94       	clt
 236:	21 91       	ld	r18, Z+
 238:	20 32       	cpi	r18, 0x20	; 32
 23a:	e9 f3       	breq	.-6      	; 0x236 <atoi+0x8>
 23c:	29 30       	cpi	r18, 0x09	; 9
 23e:	10 f0       	brcs	.+4      	; 0x244 <atoi+0x16>
 240:	2e 30       	cpi	r18, 0x0E	; 14
 242:	c8 f3       	brcs	.-14     	; 0x236 <atoi+0x8>
 244:	2b 32       	cpi	r18, 0x2B	; 43
 246:	41 f0       	breq	.+16     	; 0x258 <atoi+0x2a>
 248:	2d 32       	cpi	r18, 0x2D	; 45
 24a:	39 f4       	brne	.+14     	; 0x25a <atoi+0x2c>
 24c:	68 94       	set
 24e:	04 c0       	rjmp	.+8      	; 0x258 <atoi+0x2a>
 250:	0e 94 35 01 	call	0x26a	; 0x26a <__mulhi_const_10>
 254:	82 0f       	add	r24, r18
 256:	91 1d       	adc	r25, r1
 258:	21 91       	ld	r18, Z+
 25a:	20 53       	subi	r18, 0x30	; 48
 25c:	2a 30       	cpi	r18, 0x0A	; 10
 25e:	c0 f3       	brcs	.-16     	; 0x250 <atoi+0x22>
 260:	1e f4       	brtc	.+6      	; 0x268 <atoi+0x3a>
 262:	90 95       	com	r25
 264:	81 95       	neg	r24
 266:	9f 4f       	sbci	r25, 0xFF	; 255
 268:	08 95       	ret

0000026a <__mulhi_const_10>:
 26a:	7a e0       	ldi	r23, 0x0A	; 10
 26c:	97 9f       	mul	r25, r23
 26e:	90 2d       	mov	r25, r0
 270:	87 9f       	mul	r24, r23
 272:	80 2d       	mov	r24, r0
 274:	91 0d       	add	r25, r1
 276:	11 24       	eor	r1, r1
 278:	08 95       	ret

0000027a <_exit>:
 27a:	f8 94       	cli

0000027c <__stop_program>:
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__stop_program>
