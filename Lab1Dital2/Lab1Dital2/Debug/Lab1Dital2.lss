
Lab1Dital2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000003da  0000046e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800106  00800106  00000474  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b3  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b1  00000000  00000000  00000cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000538  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000018b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e9  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ec  00000000  00000000  00001d01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001ded  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  9e:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
};

volatile uint8_t start_sequence = 0;

// External interrupt service routine
ISR(INT0_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
    start_sequence = 1;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
}
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <main>:
    //PORTB = segment_map[digit];
//}

int main(void) {
	//Configuración de interrupciones
	PCICR |= (1 << PCIE0);
  c4:	e8 e6       	ldi	r30, 0x68	; 104
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0)| (1 << PCINT1)| (1 << PCINT2);
  ce:	eb e6       	ldi	r30, 0x6B	; 107
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	87 60       	ori	r24, 0x07	; 7
  d6:	80 83       	st	Z, r24
	DDRD |= 0xFF;
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	8a b9       	out	0x0a, r24	; 10
	//PORTD = 0;
	UCSR0B = 0;
  de:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	DDRB |= 0b00111000;
  e2:	94 b1       	in	r25, 0x04	; 4
  e4:	98 63       	ori	r25, 0x38	; 56
  e6:	94 b9       	out	0x04, r25	; 4
	PORTB |= 0b00111111;
  e8:	95 b1       	in	r25, 0x05	; 5
  ea:	9f 63       	ori	r25, 0x3F	; 63
  ec:	95 b9       	out	0x05, r25	; 5
	
	DDRC |= 0xFF;
  ee:	97 b1       	in	r25, 0x07	; 7
  f0:	87 b9       	out	0x07, r24	; 7
    // Set port B as output for the 7-segment display
    DDRD = 0xFF;
  f2:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0x00;
  f4:	1b b8       	out	0x0b, r1	; 11
    // Enable external interrupt on INT0 (PD2) with falling edge trigger
    //EICRA |= (1 << ISC01);
    //EIMSK |= (1 << INT0);

    // Enable global interrupts
    sei();
  f6:	78 94       	sei

    while (1) {
        if (start_sequence==1) {
  f8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	89 f5       	brne	.+98     	; 0x162 <main+0x9e>
			contJ1=0;
 100:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <contJ1+0x1>
 104:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <contJ1>
			PORTC = 0b00000000;
 108:	18 b8       	out	0x08, r1	; 8
			PORTC &= ~(1 << PC4); // Apagar PC4
 10a:	88 b1       	in	r24, 0x08	; 8
 10c:	8f 7e       	andi	r24, 0xEF	; 239
 10e:	88 b9       	out	0x08, r24	; 8
			PORTB &= ~(1 << PB3); // Apagar PB3
 110:	85 b1       	in	r24, 0x05	; 5
 112:	87 7f       	andi	r24, 0xF7	; 247
 114:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1 << PB4); // Apagar PB4
 116:	85 b1       	in	r24, 0x05	; 5
 118:	8f 7e       	andi	r24, 0xEF	; 239
 11a:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1 << PB5); // Apagar PB5
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	8f 7d       	andi	r24, 0xDF	; 223
 120:	85 b9       	out	0x05, r24	; 5
            // Start the countdown sequence
            for (int8_t i = 5; i >= 0; i--) {
 122:	85 e0       	ldi	r24, 0x05	; 5
 124:	12 c0       	rjmp	.+36     	; 0x14a <main+0x86>
                PORTD = segment_map[i];
 126:	e8 2f       	mov	r30, r24
 128:	08 2e       	mov	r0, r24
 12a:	00 0c       	add	r0, r0
 12c:	ff 0b       	sbc	r31, r31
 12e:	e0 50       	subi	r30, 0x00	; 0
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	90 81       	ld	r25, Z
 134:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	33 ed       	ldi	r19, 0xD3	; 211
 13a:	90 e3       	ldi	r25, 0x30	; 48
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	30 40       	sbci	r19, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x78>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x82>
 146:	00 00       	nop
			PORTC &= ~(1 << PC4); // Apagar PC4
			PORTB &= ~(1 << PB3); // Apagar PB3
			PORTB &= ~(1 << PB4); // Apagar PB4
			PORTB &= ~(1 << PB5); // Apagar PB5
            // Start the countdown sequence
            for (int8_t i = 5; i >= 0; i--) {
 148:	81 50       	subi	r24, 0x01	; 1
 14a:	88 23       	and	r24, r24
 14c:	64 f7       	brge	.-40     	; 0x126 <main+0x62>
                _delay_ms(1000); // 1-second delay
				// Ejecutar código adicional cuando la secuencia llegue a 0
				// Aquí va tu código adicional
            }
            // Reset the flag
            start_sequence = 0;
 14e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
			contJ1=0;
 152:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <contJ1+0x1>
 156:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <contJ1>
			contJ2=0;
 15a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <contJ2+0x1>
 15e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <contJ2>
				//}
        }
		// Asumiendo que PORTC está configurado correctamente como salida
		// y contJ1 está definido e inicializado adecuadamente

		switch (contJ1) {
 162:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <contJ1>
 166:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <contJ1+0x1>
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	91 05       	cpc	r25, r1
 16e:	41 f1       	breq	.+80     	; 0x1c0 <main+0xfc>
 170:	2c f4       	brge	.+10     	; 0x17c <main+0xb8>
 172:	00 97       	sbiw	r24, 0x00	; 0
 174:	59 f0       	breq	.+22     	; 0x18c <main+0xc8>
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	b1 f0       	breq	.+44     	; 0x1a6 <main+0xe2>
 17a:	69 c0       	rjmp	.+210    	; 0x24e <main+0x18a>
 17c:	84 30       	cpi	r24, 0x04	; 4
 17e:	91 05       	cpc	r25, r1
 180:	c9 f1       	breq	.+114    	; 0x1f4 <main+0x130>
 182:	5c f1       	brlt	.+86     	; 0x1da <main+0x116>
 184:	05 97       	sbiw	r24, 0x05	; 5
 186:	09 f4       	brne	.+2      	; 0x18a <main+0xc6>
 188:	42 c0       	rjmp	.+132    	; 0x20e <main+0x14a>
 18a:	61 c0       	rjmp	.+194    	; 0x24e <main+0x18a>
    case 0:
        PORTC &= ~(1 << PC0); // Apagar PC0
 18c:	88 b1       	in	r24, 0x08	; 8
 18e:	8e 7f       	andi	r24, 0xFE	; 254
 190:	88 b9       	out	0x08, r24	; 8
        PORTC &= ~(1 << PC1); // Apagar PC1
 192:	88 b1       	in	r24, 0x08	; 8
 194:	8d 7f       	andi	r24, 0xFD	; 253
 196:	88 b9       	out	0x08, r24	; 8
        PORTC &= ~(1 << PC2); // Apagar PC2
 198:	88 b1       	in	r24, 0x08	; 8
 19a:	8b 7f       	andi	r24, 0xFB	; 251
 19c:	88 b9       	out	0x08, r24	; 8
        PORTC &= ~(1 << PC3); // Apagar PC3
 19e:	88 b1       	in	r24, 0x08	; 8
 1a0:	87 7f       	andi	r24, 0xF7	; 247
 1a2:	88 b9       	out	0x08, r24	; 8
        break;
 1a4:	66 c0       	rjmp	.+204    	; 0x272 <main+0x1ae>
    case 1:
        PORTC |= (1 << PC0);  // Encender PC0
 1a6:	88 b1       	in	r24, 0x08	; 8
 1a8:	81 60       	ori	r24, 0x01	; 1
 1aa:	88 b9       	out	0x08, r24	; 8
        PORTC &= ~(1 << PC1); // Apagar PC1
 1ac:	88 b1       	in	r24, 0x08	; 8
 1ae:	8d 7f       	andi	r24, 0xFD	; 253
 1b0:	88 b9       	out	0x08, r24	; 8
        PORTC &= ~(1 << PC2); // Apagar PC2
 1b2:	88 b1       	in	r24, 0x08	; 8
 1b4:	8b 7f       	andi	r24, 0xFB	; 251
 1b6:	88 b9       	out	0x08, r24	; 8
        PORTC &= ~(1 << PC3); // Apagar PC3
 1b8:	88 b1       	in	r24, 0x08	; 8
 1ba:	87 7f       	andi	r24, 0xF7	; 247
 1bc:	88 b9       	out	0x08, r24	; 8
        break;
 1be:	59 c0       	rjmp	.+178    	; 0x272 <main+0x1ae>
    case 2:
        PORTC &= ~(1 << PC0); // Apagar PC0
 1c0:	88 b1       	in	r24, 0x08	; 8
 1c2:	8e 7f       	andi	r24, 0xFE	; 254
 1c4:	88 b9       	out	0x08, r24	; 8
        PORTC |= (1 << PC1);  // Encender PC1
 1c6:	88 b1       	in	r24, 0x08	; 8
 1c8:	82 60       	ori	r24, 0x02	; 2
 1ca:	88 b9       	out	0x08, r24	; 8
        PORTC &= ~(1 << PC2); // Apagar PC2
 1cc:	88 b1       	in	r24, 0x08	; 8
 1ce:	8b 7f       	andi	r24, 0xFB	; 251
 1d0:	88 b9       	out	0x08, r24	; 8
        PORTC &= ~(1 << PC3); // Apagar PC3
 1d2:	88 b1       	in	r24, 0x08	; 8
 1d4:	87 7f       	andi	r24, 0xF7	; 247
 1d6:	88 b9       	out	0x08, r24	; 8
        break;
 1d8:	4c c0       	rjmp	.+152    	; 0x272 <main+0x1ae>
    case 3:
        PORTC &= ~(1 << PC0); // Apagar PC0
 1da:	88 b1       	in	r24, 0x08	; 8
 1dc:	8e 7f       	andi	r24, 0xFE	; 254
 1de:	88 b9       	out	0x08, r24	; 8
        PORTC &= ~(1 << PC1); // Apagar PC1
 1e0:	88 b1       	in	r24, 0x08	; 8
 1e2:	8d 7f       	andi	r24, 0xFD	; 253
 1e4:	88 b9       	out	0x08, r24	; 8
        PORTC |= (1 << PC2);  // Encender PC2
 1e6:	88 b1       	in	r24, 0x08	; 8
 1e8:	84 60       	ori	r24, 0x04	; 4
 1ea:	88 b9       	out	0x08, r24	; 8
        PORTC &= ~(1 << PC3); // Apagar PC3
 1ec:	88 b1       	in	r24, 0x08	; 8
 1ee:	87 7f       	andi	r24, 0xF7	; 247
 1f0:	88 b9       	out	0x08, r24	; 8
        break;
 1f2:	3f c0       	rjmp	.+126    	; 0x272 <main+0x1ae>
    case 4:
        PORTC &= ~(1 << PC0); // Apagar PC0
 1f4:	88 b1       	in	r24, 0x08	; 8
 1f6:	8e 7f       	andi	r24, 0xFE	; 254
 1f8:	88 b9       	out	0x08, r24	; 8
        PORTC &= ~(1 << PC1); // Apagar PC1
 1fa:	88 b1       	in	r24, 0x08	; 8
 1fc:	8d 7f       	andi	r24, 0xFD	; 253
 1fe:	88 b9       	out	0x08, r24	; 8
        PORTC &= ~(1 << PC2); // Apagar PC2
 200:	88 b1       	in	r24, 0x08	; 8
 202:	8b 7f       	andi	r24, 0xFB	; 251
 204:	88 b9       	out	0x08, r24	; 8
        PORTC |= (1 << PC3);  // Encender PC3
 206:	88 b1       	in	r24, 0x08	; 8
 208:	88 60       	ori	r24, 0x08	; 8
 20a:	88 b9       	out	0x08, r24	; 8
        break;
 20c:	32 c0       	rjmp	.+100    	; 0x272 <main+0x1ae>
    case 5:
        PORTC |= (1 << PC0);  // Encender PC0
 20e:	88 b1       	in	r24, 0x08	; 8
 210:	81 60       	ori	r24, 0x01	; 1
 212:	88 b9       	out	0x08, r24	; 8
        PORTC |= (1 << PC1);  // Encender PC1
 214:	88 b1       	in	r24, 0x08	; 8
 216:	82 60       	ori	r24, 0x02	; 2
 218:	88 b9       	out	0x08, r24	; 8
        PORTC |= (1 << PC2);  // Encender PC2
 21a:	88 b1       	in	r24, 0x08	; 8
 21c:	84 60       	ori	r24, 0x04	; 4
 21e:	88 b9       	out	0x08, r24	; 8
        PORTC |= (1 << PC3);  // Encender PC3
 220:	88 b1       	in	r24, 0x08	; 8
 222:	88 60       	ori	r24, 0x08	; 8
 224:	88 b9       	out	0x08, r24	; 8
        PORTD = segment_map[1];
 226:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 22a:	8b b9       	out	0x0b, r24	; 11
		contJ2=0;
 22c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <contJ2+0x1>
 230:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <contJ2>
		PORTC &= ~(1 << PC4); // Apagar PC4
 234:	88 b1       	in	r24, 0x08	; 8
 236:	8f 7e       	andi	r24, 0xEF	; 239
 238:	88 b9       	out	0x08, r24	; 8
		PORTB &= ~(1 << PB3); // Apagar PB3
 23a:	85 b1       	in	r24, 0x05	; 5
 23c:	87 7f       	andi	r24, 0xF7	; 247
 23e:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << PB4); // Apagar PB4
 240:	85 b1       	in	r24, 0x05	; 5
 242:	8f 7e       	andi	r24, 0xEF	; 239
 244:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << PB5); // Apagar PB5
 246:	85 b1       	in	r24, 0x05	; 5
 248:	8f 7d       	andi	r24, 0xDF	; 223
 24a:	85 b9       	out	0x05, r24	; 5
        break;
 24c:	12 c0       	rjmp	.+36     	; 0x272 <main+0x1ae>
    default:
        PORTC |= (1 << PC0);  // Encender PC0
 24e:	88 b1       	in	r24, 0x08	; 8
 250:	81 60       	ori	r24, 0x01	; 1
 252:	88 b9       	out	0x08, r24	; 8
        PORTC |= (1 << PC1);  // Encender PC1
 254:	88 b1       	in	r24, 0x08	; 8
 256:	82 60       	ori	r24, 0x02	; 2
 258:	88 b9       	out	0x08, r24	; 8
        PORTC |= (1 << PC2);  // Encender PC2
 25a:	88 b1       	in	r24, 0x08	; 8
 25c:	84 60       	ori	r24, 0x04	; 4
 25e:	88 b9       	out	0x08, r24	; 8
        PORTC |= (1 << PC3);  // Encender PC3
 260:	88 b1       	in	r24, 0x08	; 8
 262:	88 60       	ori	r24, 0x08	; 8
 264:	88 b9       	out	0x08, r24	; 8
        contJ1 = 5;
 266:	85 e0       	ldi	r24, 0x05	; 5
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <contJ1+0x1>
 26e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <contJ1>
        break;
}



		switch (contJ2) {
 272:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <contJ2>
 276:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <contJ2+0x1>
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	91 05       	cpc	r25, r1
 27e:	41 f1       	breq	.+80     	; 0x2d0 <main+0x20c>
 280:	2c f4       	brge	.+10     	; 0x28c <main+0x1c8>
 282:	00 97       	sbiw	r24, 0x00	; 0
 284:	59 f0       	breq	.+22     	; 0x29c <main+0x1d8>
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	b1 f0       	breq	.+44     	; 0x2b6 <main+0x1f2>
 28a:	69 c0       	rjmp	.+210    	; 0x35e <main+0x29a>
 28c:	84 30       	cpi	r24, 0x04	; 4
 28e:	91 05       	cpc	r25, r1
 290:	c9 f1       	breq	.+114    	; 0x304 <main+0x240>
 292:	5c f1       	brlt	.+86     	; 0x2ea <main+0x226>
 294:	05 97       	sbiw	r24, 0x05	; 5
 296:	09 f4       	brne	.+2      	; 0x29a <main+0x1d6>
 298:	42 c0       	rjmp	.+132    	; 0x31e <main+0x25a>
 29a:	61 c0       	rjmp	.+194    	; 0x35e <main+0x29a>
			case 0:
				PORTC &= ~(1 << PC4); // Apagar PC4
 29c:	88 b1       	in	r24, 0x08	; 8
 29e:	8f 7e       	andi	r24, 0xEF	; 239
 2a0:	88 b9       	out	0x08, r24	; 8
				PORTB &= ~(1 << PB3); // Apagar PB3
 2a2:	85 b1       	in	r24, 0x05	; 5
 2a4:	87 7f       	andi	r24, 0xF7	; 247
 2a6:	85 b9       	out	0x05, r24	; 5
				PORTB &= ~(1 << PB4); // Apagar PB4
 2a8:	85 b1       	in	r24, 0x05	; 5
 2aa:	8f 7e       	andi	r24, 0xEF	; 239
 2ac:	85 b9       	out	0x05, r24	; 5
				PORTB &= ~(1 << PB5); // Apagar PB5
 2ae:	85 b1       	in	r24, 0x05	; 5
 2b0:	8f 7d       	andi	r24, 0xDF	; 223
 2b2:	85 b9       	out	0x05, r24	; 5
				break;
 2b4:	21 cf       	rjmp	.-446    	; 0xf8 <main+0x34>
			case 1:
				PORTC &= ~(1 << PC4); // Apagar PC4
 2b6:	88 b1       	in	r24, 0x08	; 8
 2b8:	8f 7e       	andi	r24, 0xEF	; 239
 2ba:	88 b9       	out	0x08, r24	; 8
				PORTB &= ~(1 << PB3); // Apagar PB3
 2bc:	85 b1       	in	r24, 0x05	; 5
 2be:	87 7f       	andi	r24, 0xF7	; 247
 2c0:	85 b9       	out	0x05, r24	; 5
				PORTB |= (1 << PB4);  // Encender PB4
 2c2:	85 b1       	in	r24, 0x05	; 5
 2c4:	80 61       	ori	r24, 0x10	; 16
 2c6:	85 b9       	out	0x05, r24	; 5
				PORTB &= ~(1 << PB5); // Apagar PB5
 2c8:	85 b1       	in	r24, 0x05	; 5
 2ca:	8f 7d       	andi	r24, 0xDF	; 223
 2cc:	85 b9       	out	0x05, r24	; 5
				break;
 2ce:	14 cf       	rjmp	.-472    	; 0xf8 <main+0x34>
			case 2:
				PORTC &= ~(1 << PC4); // Apagar PC4
 2d0:	88 b1       	in	r24, 0x08	; 8
 2d2:	8f 7e       	andi	r24, 0xEF	; 239
 2d4:	88 b9       	out	0x08, r24	; 8
				PORTB |= (1 << PB3);  // Encender PB3
 2d6:	85 b1       	in	r24, 0x05	; 5
 2d8:	88 60       	ori	r24, 0x08	; 8
 2da:	85 b9       	out	0x05, r24	; 5
				PORTB &= ~(1 << PB4); // Apagar PB4
 2dc:	85 b1       	in	r24, 0x05	; 5
 2de:	8f 7e       	andi	r24, 0xEF	; 239
 2e0:	85 b9       	out	0x05, r24	; 5
				PORTB &= ~(1 << PB5); // Apagar PB5
 2e2:	85 b1       	in	r24, 0x05	; 5
 2e4:	8f 7d       	andi	r24, 0xDF	; 223
 2e6:	85 b9       	out	0x05, r24	; 5
				break;
 2e8:	07 cf       	rjmp	.-498    	; 0xf8 <main+0x34>
			case 3:
				PORTC &= ~(1 << PC4); // Apagar PC4
 2ea:	88 b1       	in	r24, 0x08	; 8
 2ec:	8f 7e       	andi	r24, 0xEF	; 239
 2ee:	88 b9       	out	0x08, r24	; 8
				PORTB &= ~(1 << PB3); // Apagar PB3
 2f0:	85 b1       	in	r24, 0x05	; 5
 2f2:	87 7f       	andi	r24, 0xF7	; 247
 2f4:	85 b9       	out	0x05, r24	; 5
				PORTB &= ~(1 << PB4); // Apagar PB4
 2f6:	85 b1       	in	r24, 0x05	; 5
 2f8:	8f 7e       	andi	r24, 0xEF	; 239
 2fa:	85 b9       	out	0x05, r24	; 5
				PORTB |= (1 << PB5);  // Encender PB5
 2fc:	85 b1       	in	r24, 0x05	; 5
 2fe:	80 62       	ori	r24, 0x20	; 32
 300:	85 b9       	out	0x05, r24	; 5
				break;
 302:	fa ce       	rjmp	.-524    	; 0xf8 <main+0x34>
			case 4:
				PORTC |= (1 << PC4);  // Encender PC4
 304:	88 b1       	in	r24, 0x08	; 8
 306:	80 61       	ori	r24, 0x10	; 16
 308:	88 b9       	out	0x08, r24	; 8
				PORTB &= ~(1 << PB3); // Apagar PB3
 30a:	85 b1       	in	r24, 0x05	; 5
 30c:	87 7f       	andi	r24, 0xF7	; 247
 30e:	85 b9       	out	0x05, r24	; 5
				PORTB &= ~(1 << PB4); // Apagar PB4
 310:	85 b1       	in	r24, 0x05	; 5
 312:	8f 7e       	andi	r24, 0xEF	; 239
 314:	85 b9       	out	0x05, r24	; 5
				PORTB &= ~(1 << PB5); // Apagar PB5
 316:	85 b1       	in	r24, 0x05	; 5
 318:	8f 7d       	andi	r24, 0xDF	; 223
 31a:	85 b9       	out	0x05, r24	; 5
				break;
 31c:	ed ce       	rjmp	.-550    	; 0xf8 <main+0x34>
			case 5:
				PORTC |= (1 << PC4);  // Encender PC4
 31e:	88 b1       	in	r24, 0x08	; 8
 320:	80 61       	ori	r24, 0x10	; 16
 322:	88 b9       	out	0x08, r24	; 8
				PORTB |= (1 << PB3);  // Encender PB3
 324:	85 b1       	in	r24, 0x05	; 5
 326:	88 60       	ori	r24, 0x08	; 8
 328:	85 b9       	out	0x05, r24	; 5
				PORTB |= (1 << PB4);  // Encender PB4
 32a:	85 b1       	in	r24, 0x05	; 5
 32c:	80 61       	ori	r24, 0x10	; 16
 32e:	85 b9       	out	0x05, r24	; 5
				PORTB |= (1 << PB5);  // Encender PB5
 330:	85 b1       	in	r24, 0x05	; 5
 332:	80 62       	ori	r24, 0x20	; 32
 334:	85 b9       	out	0x05, r24	; 5
				PORTD = segment_map[2];
 336:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 33a:	8b b9       	out	0x0b, r24	; 11
				contJ1=0;
 33c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <contJ1+0x1>
 340:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <contJ1>
				PORTC &= ~(1 << PC0); // Apagar PC0
 344:	88 b1       	in	r24, 0x08	; 8
 346:	8e 7f       	andi	r24, 0xFE	; 254
 348:	88 b9       	out	0x08, r24	; 8
				PORTC &= ~(1 << PC1); // Apagar PC1
 34a:	88 b1       	in	r24, 0x08	; 8
 34c:	8d 7f       	andi	r24, 0xFD	; 253
 34e:	88 b9       	out	0x08, r24	; 8
				PORTC &= ~(1 << PC2); // Apagar PC2
 350:	88 b1       	in	r24, 0x08	; 8
 352:	8b 7f       	andi	r24, 0xFB	; 251
 354:	88 b9       	out	0x08, r24	; 8
				PORTC &= ~(1 << PC3); // Apagar PC3
 356:	88 b1       	in	r24, 0x08	; 8
 358:	87 7f       	andi	r24, 0xF7	; 247
 35a:	88 b9       	out	0x08, r24	; 8
				break;
 35c:	cd ce       	rjmp	.-614    	; 0xf8 <main+0x34>
			default:
				PORTC |= (1 << PC4);  // Encender PC4
 35e:	88 b1       	in	r24, 0x08	; 8
 360:	80 61       	ori	r24, 0x10	; 16
 362:	88 b9       	out	0x08, r24	; 8
				PORTB |= (1 << PB3);  // Encender PB3
 364:	85 b1       	in	r24, 0x05	; 5
 366:	88 60       	ori	r24, 0x08	; 8
 368:	85 b9       	out	0x05, r24	; 5
				PORTB |= (1 << PB4);  // Encender PB4
 36a:	85 b1       	in	r24, 0x05	; 5
 36c:	80 61       	ori	r24, 0x10	; 16
 36e:	85 b9       	out	0x05, r24	; 5
				PORTB |= (1 << PB5);  // Encender PB5
 370:	85 b1       	in	r24, 0x05	; 5
 372:	80 62       	ori	r24, 0x20	; 32
 374:	85 b9       	out	0x05, r24	; 5
				contJ2 = 5;
 376:	85 e0       	ldi	r24, 0x05	; 5
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <contJ2+0x1>
 37e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <contJ2>
				break;
 382:	ba ce       	rjmp	.-652    	; 0xf8 <main+0x34>

00000384 <__vector_3>:


		//PORTC= contJ1;
    }
}
ISR(PCINT0_vect){
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	8f 93       	push	r24
 390:	9f 93       	push	r25
	if ((PINB&(1<<PINB0))==0) //Reviso el botón de decremento
 392:	18 99       	sbic	0x03, 0	; 3
 394:	03 c0       	rjmp	.+6      	; 0x39c <__vector_3+0x18>
	start_sequence=1;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	if ((PINB&(1<<PINB1))==0) //Reviso el botón de incremento
 39c:	19 99       	sbic	0x03, 1	; 3
 39e:	09 c0       	rjmp	.+18     	; 0x3b2 <__vector_3+0x2e>
	contJ1++;
 3a0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <contJ1>
 3a4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <contJ1+0x1>
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <contJ1+0x1>
 3ae:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <contJ1>
	if ((PINB&(1<<PINB2))==0) //Reviso el botón de decremento
 3b2:	1a 99       	sbic	0x03, 2	; 3
 3b4:	09 c0       	rjmp	.+18     	; 0x3c8 <__vector_3+0x44>
	contJ2++;
 3b6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <contJ2>
 3ba:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <contJ2+0x1>
 3be:	01 96       	adiw	r24, 0x01	; 1
 3c0:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <contJ2+0x1>
 3c4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <contJ2>
}
 3c8:	9f 91       	pop	r25
 3ca:	8f 91       	pop	r24
 3cc:	0f 90       	pop	r0
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	0f 90       	pop	r0
 3d2:	1f 90       	pop	r1
 3d4:	18 95       	reti

000003d6 <_exit>:
 3d6:	f8 94       	cli

000003d8 <__stop_program>:
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <__stop_program>
