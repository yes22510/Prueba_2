
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000280  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000002f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000081a  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000739  00000000  00000000  00000bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a3  00000000  00000000  00001317  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000016bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b5  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014f  00000000  00000000  00001b41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001c90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 65 00 	call	0xca	; 0xca <main>
  88:	0c 94 3e 01 	jmp	0x27c	; 0x27c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
	}
}
void initADC(void)
{
	// Seleccion de Canal ADC0
	ADMUX = 7;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	87 e0       	ldi	r24, 0x07	; 7
  96:	80 83       	st	Z, r24
	
	// Utilizando AVCC = 5V internos
	ADMUX |= (1<<REFS0);
  98:	80 81       	ld	r24, Z
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  9e:	80 81       	ld	r24, Z
  a0:	8f 77       	andi	r24, 0x7F	; 127
  a2:	80 83       	st	Z, r24
	
	// Justificacion a la Izquierda
	ADMUX |= (1<<ADLAR);
  a4:	80 81       	ld	r24, Z
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
	
	ADCSRA |= (1<<ADEN);
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	//Habilitamos las interrupciones
	ADCSRA |= (1<<ADIE);
  b6:	80 81       	ld	r24, Z
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	80 83       	st	Z, r24
	
	// Habilitamos el Prescaler de 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  bc:	80 81       	ld	r24, Z
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	80 83       	st	Z, r24
	
	// Habilitando el ADC
	ADCSRA |= (1<<ADEN);
  c2:	80 81       	ld	r24, Z
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <main>:
//************************************************************
// SETUP
//************************************************************
int main(void)
{
	cli();
  ca:	f8 94       	cli
	initADC();
  cc:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	sei();
  d0:	78 94       	sei
	DDRD = 0XFF;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	8a b9       	out	0x0a, r24	; 10
	PWM1_init();
  d6:	0e 94 a8 00 	call	0x150	; 0x150 <PWM1_init>
	PWM1_dca(10, no_invertido);
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	8a e0       	ldi	r24, 0x0A	; 10
  de:	0e 94 c0 00 	call	0x180	; 0x180 <PWM1_dca>
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <main+0x18>

000000e4 <__vector_21>:
	
	// Habilitando el ADC
	ADCSRA |= (1<<ADEN);
}

ISR(ADC_vect){
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	4f 93       	push	r20
  f4:	5f 93       	push	r21
  f6:	6f 93       	push	r22
  f8:	7f 93       	push	r23
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
  fe:	af 93       	push	r26
 100:	bf 93       	push	r27
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	adc = ADCH;
 106:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <__floatunsisf>
 114:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <adc>
 118:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <adc+0x1>
 11c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <adc+0x2>
 120:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <adc+0x3>
	ADCSRA |= (1<<ADIF);
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	80 83       	st	Z, r24

}
 12e:	ff 91       	pop	r31
 130:	ef 91       	pop	r30
 132:	bf 91       	pop	r27
 134:	af 91       	pop	r26
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	7f 91       	pop	r23
 13c:	6f 91       	pop	r22
 13e:	5f 91       	pop	r21
 140:	4f 91       	pop	r20
 142:	3f 91       	pop	r19
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <PWM1_init>:
#define F_CPU 16000000UL
#include "T1PWM.h"
#include <util/delay.h>
void PWM1_init(void)
{
	DDRB |= (1<<DDB1);
 150:	84 b1       	in	r24, 0x04	; 4
 152:	82 60       	ori	r24, 0x02	; 2
 154:	84 b9       	out	0x04, r24	; 4
	//Modo fast PWM
	TCCR1A &= ~(1<<WGM02);
 156:	e0 e8       	ldi	r30, 0x80	; 128
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	87 7f       	andi	r24, 0xF7	; 247
 15e:	80 83       	st	Z, r24
	TCCR0A |= (1<<WGM01);
 160:	84 b5       	in	r24, 0x24	; 36
 162:	82 60       	ori	r24, 0x02	; 2
 164:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM00);
 166:	84 b5       	in	r24, 0x24	; 36
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	84 bd       	out	0x24, r24	; 36
	//PRESCALER 64
	TCCR0B &= ~(1<<CS02);
 16c:	85 b5       	in	r24, 0x25	; 37
 16e:	8b 7f       	andi	r24, 0xFB	; 251
 170:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= (1<<CS01);
 172:	84 b5       	in	r24, 0x24	; 36
 174:	82 60       	ori	r24, 0x02	; 2
 176:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<CS00);
 178:	84 b5       	in	r24, 0x24	; 36
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	84 bd       	out	0x24, r24	; 36
 17e:	08 95       	ret

00000180 <PWM1_dca>:
}
void PWM1_dca(uint8_t dc, uint8_t modo)
{
	//Pin Configuration OC1A
	//DDRB |= (1<<DDB1);
	if (modo == 1)
 180:	61 30       	cpi	r22, 0x01	; 1
 182:	39 f4       	brne	.+14     	; 0x192 <PWM1_dca+0x12>
	{
		TCCR0A |=(1<<COM0A1); 
 184:	94 b5       	in	r25, 0x24	; 36
 186:	90 68       	ori	r25, 0x80	; 128
 188:	94 bd       	out	0x24, r25	; 36
		TCCR0A &= ~(1<<COM0A0);
 18a:	94 b5       	in	r25, 0x24	; 36
 18c:	9f 7b       	andi	r25, 0xBF	; 191
 18e:	94 bd       	out	0x24, r25	; 36
 190:	06 c0       	rjmp	.+12     	; 0x19e <PWM1_dca+0x1e>
		
	}
	else 
	{
		TCCR0A |= (1<< COM0A1);
 192:	94 b5       	in	r25, 0x24	; 36
 194:	90 68       	ori	r25, 0x80	; 128
 196:	94 bd       	out	0x24, r25	; 36
		TCCR0A |= (1<<COM0A0);
 198:	94 b5       	in	r25, 0x24	; 36
 19a:	90 64       	ori	r25, 0x40	; 64
 19c:	94 bd       	out	0x24, r25	; 36
		
	}
	OCR0A = (dc *255)/100;
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	82 9f       	mul	r24, r18
 1a2:	c0 01       	movw	r24, r0
 1a4:	11 24       	eor	r1, r1
 1a6:	64 e6       	ldi	r22, 0x64	; 100
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	0e 94 16 01 	call	0x22c	; 0x22c <__divmodhi4>
 1ae:	67 bd       	out	0x27, r22	; 39
 1b0:	08 95       	ret

000001b2 <__floatunsisf>:
 1b2:	e8 94       	clt
 1b4:	09 c0       	rjmp	.+18     	; 0x1c8 <__floatsisf+0x12>

000001b6 <__floatsisf>:
 1b6:	97 fb       	bst	r25, 7
 1b8:	3e f4       	brtc	.+14     	; 0x1c8 <__floatsisf+0x12>
 1ba:	90 95       	com	r25
 1bc:	80 95       	com	r24
 1be:	70 95       	com	r23
 1c0:	61 95       	neg	r22
 1c2:	7f 4f       	sbci	r23, 0xFF	; 255
 1c4:	8f 4f       	sbci	r24, 0xFF	; 255
 1c6:	9f 4f       	sbci	r25, 0xFF	; 255
 1c8:	99 23       	and	r25, r25
 1ca:	a9 f0       	breq	.+42     	; 0x1f6 <__floatsisf+0x40>
 1cc:	f9 2f       	mov	r31, r25
 1ce:	96 e9       	ldi	r25, 0x96	; 150
 1d0:	bb 27       	eor	r27, r27
 1d2:	93 95       	inc	r25
 1d4:	f6 95       	lsr	r31
 1d6:	87 95       	ror	r24
 1d8:	77 95       	ror	r23
 1da:	67 95       	ror	r22
 1dc:	b7 95       	ror	r27
 1de:	f1 11       	cpse	r31, r1
 1e0:	f8 cf       	rjmp	.-16     	; 0x1d2 <__floatsisf+0x1c>
 1e2:	fa f4       	brpl	.+62     	; 0x222 <__floatsisf+0x6c>
 1e4:	bb 0f       	add	r27, r27
 1e6:	11 f4       	brne	.+4      	; 0x1ec <__floatsisf+0x36>
 1e8:	60 ff       	sbrs	r22, 0
 1ea:	1b c0       	rjmp	.+54     	; 0x222 <__floatsisf+0x6c>
 1ec:	6f 5f       	subi	r22, 0xFF	; 255
 1ee:	7f 4f       	sbci	r23, 0xFF	; 255
 1f0:	8f 4f       	sbci	r24, 0xFF	; 255
 1f2:	9f 4f       	sbci	r25, 0xFF	; 255
 1f4:	16 c0       	rjmp	.+44     	; 0x222 <__floatsisf+0x6c>
 1f6:	88 23       	and	r24, r24
 1f8:	11 f0       	breq	.+4      	; 0x1fe <__floatsisf+0x48>
 1fa:	96 e9       	ldi	r25, 0x96	; 150
 1fc:	11 c0       	rjmp	.+34     	; 0x220 <__floatsisf+0x6a>
 1fe:	77 23       	and	r23, r23
 200:	21 f0       	breq	.+8      	; 0x20a <__floatsisf+0x54>
 202:	9e e8       	ldi	r25, 0x8E	; 142
 204:	87 2f       	mov	r24, r23
 206:	76 2f       	mov	r23, r22
 208:	05 c0       	rjmp	.+10     	; 0x214 <__floatsisf+0x5e>
 20a:	66 23       	and	r22, r22
 20c:	71 f0       	breq	.+28     	; 0x22a <__floatsisf+0x74>
 20e:	96 e8       	ldi	r25, 0x86	; 134
 210:	86 2f       	mov	r24, r22
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	2a f0       	brmi	.+10     	; 0x222 <__floatsisf+0x6c>
 218:	9a 95       	dec	r25
 21a:	66 0f       	add	r22, r22
 21c:	77 1f       	adc	r23, r23
 21e:	88 1f       	adc	r24, r24
 220:	da f7       	brpl	.-10     	; 0x218 <__floatsisf+0x62>
 222:	88 0f       	add	r24, r24
 224:	96 95       	lsr	r25
 226:	87 95       	ror	r24
 228:	97 f9       	bld	r25, 7
 22a:	08 95       	ret

0000022c <__divmodhi4>:
 22c:	97 fb       	bst	r25, 7
 22e:	07 2e       	mov	r0, r23
 230:	16 f4       	brtc	.+4      	; 0x236 <__divmodhi4+0xa>
 232:	00 94       	com	r0
 234:	07 d0       	rcall	.+14     	; 0x244 <__divmodhi4_neg1>
 236:	77 fd       	sbrc	r23, 7
 238:	09 d0       	rcall	.+18     	; 0x24c <__divmodhi4_neg2>
 23a:	0e 94 2a 01 	call	0x254	; 0x254 <__udivmodhi4>
 23e:	07 fc       	sbrc	r0, 7
 240:	05 d0       	rcall	.+10     	; 0x24c <__divmodhi4_neg2>
 242:	3e f4       	brtc	.+14     	; 0x252 <__divmodhi4_exit>

00000244 <__divmodhi4_neg1>:
 244:	90 95       	com	r25
 246:	81 95       	neg	r24
 248:	9f 4f       	sbci	r25, 0xFF	; 255
 24a:	08 95       	ret

0000024c <__divmodhi4_neg2>:
 24c:	70 95       	com	r23
 24e:	61 95       	neg	r22
 250:	7f 4f       	sbci	r23, 0xFF	; 255

00000252 <__divmodhi4_exit>:
 252:	08 95       	ret

00000254 <__udivmodhi4>:
 254:	aa 1b       	sub	r26, r26
 256:	bb 1b       	sub	r27, r27
 258:	51 e1       	ldi	r21, 0x11	; 17
 25a:	07 c0       	rjmp	.+14     	; 0x26a <__udivmodhi4_ep>

0000025c <__udivmodhi4_loop>:
 25c:	aa 1f       	adc	r26, r26
 25e:	bb 1f       	adc	r27, r27
 260:	a6 17       	cp	r26, r22
 262:	b7 07       	cpc	r27, r23
 264:	10 f0       	brcs	.+4      	; 0x26a <__udivmodhi4_ep>
 266:	a6 1b       	sub	r26, r22
 268:	b7 0b       	sbc	r27, r23

0000026a <__udivmodhi4_ep>:
 26a:	88 1f       	adc	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	5a 95       	dec	r21
 270:	a9 f7       	brne	.-22     	; 0x25c <__udivmodhi4_loop>
 272:	80 95       	com	r24
 274:	90 95       	com	r25
 276:	bc 01       	movw	r22, r24
 278:	cd 01       	movw	r24, r26
 27a:	08 95       	ret

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
