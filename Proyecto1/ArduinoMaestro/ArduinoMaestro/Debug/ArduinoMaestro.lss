
ArduinoMaestro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800100  00000f5a  00000fee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a4  008001ba  008001ba  000010a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001104  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018b3  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b26  00000000  00000000  00002b47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e41  00000000  00000000  0000366d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000380  00000000  00000000  000044b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e8  00000000  00000000  00004830  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fc6  00000000  00000000  00004f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005ede  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 3b       	cpi	r26, 0xBA	; 186
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	aa eb       	ldi	r26, 0xBA	; 186
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 35       	cpi	r26, 0x5E	; 94
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 66 03 	call	0x6cc	; 0x6cc <main>
  9e:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Master_Init>:
#define F_CPU 16000000UL  // Define la frecuencia de tu microcontrolador en Hz
#include <stdint.h>
#include <avr/io.h>

// Configura el bus I2C
void I2C_Master_Init(unsigned long SC_Clock, uint8_t Preescaler) {
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	6b 01       	movw	r12, r22
  b0:	7c 01       	movw	r14, r24
	DDRC &= ~((1 << DDC4) | (1 << DDC5)); // Configura los pines I2C como entradas
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	8f 7c       	andi	r24, 0xCF	; 207
  b6:	87 b9       	out	0x07, r24	; 7

	switch (Preescaler) {
  b8:	44 30       	cpi	r20, 0x04	; 4
  ba:	79 f0       	breq	.+30     	; 0xda <I2C_Master_Init+0x34>
  bc:	18 f4       	brcc	.+6      	; 0xc4 <I2C_Master_Init+0x1e>
  be:	41 30       	cpi	r20, 0x01	; 1
  c0:	31 f0       	breq	.+12     	; 0xce <I2C_Master_Init+0x28>
  c2:	23 c0       	rjmp	.+70     	; 0x10a <I2C_Master_Init+0x64>
  c4:	40 31       	cpi	r20, 0x10	; 16
  c6:	91 f0       	breq	.+36     	; 0xec <I2C_Master_Init+0x46>
  c8:	40 34       	cpi	r20, 0x40	; 64
  ca:	c9 f0       	breq	.+50     	; 0xfe <I2C_Master_Init+0x58>
  cc:	1e c0       	rjmp	.+60     	; 0x10a <I2C_Master_Init+0x64>
		case 1:
		TWSR &= ~((1 << TWPS1) | (1 << TWPS0));
  ce:	e9 eb       	ldi	r30, 0xB9	; 185
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8c 7f       	andi	r24, 0xFC	; 252
  d6:	80 83       	st	Z, r24
		break;
  d8:	1d c0       	rjmp	.+58     	; 0x114 <I2C_Master_Init+0x6e>
		case 4:
		TWSR &= ~(1 << TWPS1);
  da:	e9 eb       	ldi	r30, 0xB9	; 185
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8d 7f       	andi	r24, 0xFD	; 253
  e2:	80 83       	st	Z, r24
		TWSR |= (1 << TWPS0);
  e4:	80 81       	ld	r24, Z
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	80 83       	st	Z, r24
		break;
  ea:	14 c0       	rjmp	.+40     	; 0x114 <I2C_Master_Init+0x6e>
		case 16:
		TWSR &= ~(1 << TWPS0);
  ec:	e9 eb       	ldi	r30, 0xB9	; 185
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	80 83       	st	Z, r24
		TWSR |= (1 << TWPS1);
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
		break;
  fc:	0b c0       	rjmp	.+22     	; 0x114 <I2C_Master_Init+0x6e>
		case 64:
		TWSR |= (1 << TWPS1) | (1 << TWPS0);
  fe:	e9 eb       	ldi	r30, 0xB9	; 185
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	83 60       	ori	r24, 0x03	; 3
 106:	80 83       	st	Z, r24
		break;
 108:	05 c0       	rjmp	.+10     	; 0x114 <I2C_Master_Init+0x6e>
		default:
		// Valor predeterminado para el prescaler
		TWSR &= ~((1 << TWPS1) | (1 << TWPS0));
 10a:	e9 eb       	ldi	r30, 0xB9	; 185
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	8c 7f       	andi	r24, 0xFC	; 252
 112:	80 83       	st	Z, r24
		break;
	}
	TWBR = ((F_CPU / SC_Clock) - 16) / (2 * (1 << (TWSR & 0x03)));
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	74 e2       	ldi	r23, 0x24	; 36
 118:	84 ef       	ldi	r24, 0xF4	; 244
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	a7 01       	movw	r20, r14
 11e:	96 01       	movw	r18, r12
 120:	0e 94 91 04 	call	0x922	; 0x922 <__udivmodsi4>
 124:	ca 01       	movw	r24, r20
 126:	b9 01       	movw	r22, r18
 128:	60 51       	subi	r22, 0x10	; 16
 12a:	71 09       	sbc	r23, r1
 12c:	81 09       	sbc	r24, r1
 12e:	91 09       	sbc	r25, r1
 130:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 134:	23 70       	andi	r18, 0x03	; 3
 136:	42 e0       	ldi	r20, 0x02	; 2
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	fa 01       	movw	r30, r20
 13c:	02 c0       	rjmp	.+4      	; 0x142 <I2C_Master_Init+0x9c>
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	2a 95       	dec	r18
 144:	e2 f7       	brpl	.-8      	; 0x13e <I2C_Master_Init+0x98>
 146:	9f 01       	movw	r18, r30
 148:	03 2e       	mov	r0, r19
 14a:	00 0c       	add	r0, r0
 14c:	44 0b       	sbc	r20, r20
 14e:	55 0b       	sbc	r21, r21
 150:	0e 94 91 04 	call	0x922	; 0x922 <__udivmodsi4>
 154:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR |= (1 << TWEN);
 158:	ec eb       	ldi	r30, 0xBC	; 188
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	84 60       	ori	r24, 0x04	; 4
 160:	80 83       	st	Z, r24
}
 162:	ff 90       	pop	r15
 164:	ef 90       	pop	r14
 166:	df 90       	pop	r13
 168:	cf 90       	pop	r12
 16a:	08 95       	ret

0000016c <I2C_Master_Start>:

// Envía un inicio de comunicación I2C
uint8_t I2C_Master_Start(void) {
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); // Envía una señal de START
 16c:	84 ea       	ldi	r24, 0xA4	; 164
 16e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Espera a que el START se complete
 172:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 176:	88 23       	and	r24, r24
 178:	e4 f7       	brge	.-8      	; 0x172 <I2C_Master_Start+0x6>

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
 17a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 17e:	88 7f       	andi	r24, 0xF8	; 248
	if (estado != 0x08 && estado != 0x10) {
 180:	88 30       	cpi	r24, 0x08	; 8
 182:	21 f0       	breq	.+8      	; 0x18c <I2C_Master_Start+0x20>
 184:	80 31       	cpi	r24, 0x10	; 16
 186:	21 f4       	brne	.+8      	; 0x190 <I2C_Master_Start+0x24>
		return 1; // Error
	}
	return 0; // Éxito
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	08 95       	ret
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	08 95       	ret
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); // Envía una señal de START
	while (!(TWCR & (1 << TWINT))); // Espera a que el START se complete

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
	if (estado != 0x08 && estado != 0x10) {
		return 1; // Error
 190:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0; // Éxito
}
 192:	08 95       	ret

00000194 <I2C_Master_Stop>:

// Envía una parada de comunicación I2C
void I2C_Master_Stop(void) {
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); // Envía una señal de STOP
 194:	84 e9       	ldi	r24, 0x94	; 148
 196:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (TWCR & (1 << TWSTO)); // Espera a que el STOP se complete
 19a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 19e:	84 fd       	sbrc	r24, 4
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <I2C_Master_Stop+0x6>
}
 1a2:	08 95       	ret

000001a4 <I2C_Master_Write>:

// Escribe un byte en el bus I2C
uint8_t I2C_Master_Write(uint8_t dato) {
	TWDR = dato; // Carga el dato en el registro de datos
 1a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT) | (1 << TWEN); // Inicia la transmisión
 1a8:	84 e8       	ldi	r24, 0x84	; 132
 1aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Espera a que la transmisión se complete
 1ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b2:	88 23       	and	r24, r24
 1b4:	e4 f7       	brge	.-8      	; 0x1ae <I2C_Master_Write+0xa>

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
 1b6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1ba:	88 7f       	andi	r24, 0xF8	; 248
	if (estado != 0x18 && estado != 0x28 && estado != 0x40) {
 1bc:	88 31       	cpi	r24, 0x18	; 24
 1be:	31 f0       	breq	.+12     	; 0x1cc <I2C_Master_Write+0x28>
 1c0:	88 32       	cpi	r24, 0x28	; 40
 1c2:	31 f0       	breq	.+12     	; 0x1d0 <I2C_Master_Write+0x2c>
 1c4:	80 34       	cpi	r24, 0x40	; 64
 1c6:	29 f4       	brne	.+10     	; 0x1d2 <I2C_Master_Write+0x2e>
		return estado; // Error
	}
	return 0; // Éxito
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	08 95       	ret
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	08 95       	ret
 1d0:	80 e0       	ldi	r24, 0x00	; 0
}
 1d2:	08 95       	ret

000001d4 <I2C_Master_Read>:

uint8_t I2C_Master_Read(uint8_t *buffer, uint8_t ack) {
 1d4:	dc 01       	movw	r26, r24
	if (ack) {
 1d6:	66 23       	and	r22, r22
 1d8:	31 f0       	breq	.+12     	; 0x1e6 <I2C_Master_Read+0x12>
		TWCR |= (1 << TWEA); // Configura ACK para la próxima lectura
 1da:	ec eb       	ldi	r30, 0xBC	; 188
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	90 81       	ld	r25, Z
 1e0:	90 64       	ori	r25, 0x40	; 64
 1e2:	90 83       	st	Z, r25
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <I2C_Master_Read+0x1c>
		} else {
		TWCR &= ~(1 << TWEA); // Desactiva ACK
 1e6:	ec eb       	ldi	r30, 0xBC	; 188
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	90 81       	ld	r25, Z
 1ec:	9f 7b       	andi	r25, 0xBF	; 191
 1ee:	90 83       	st	Z, r25
	}
	TWCR |= (1 << TWINT); // Inicia la lectura
 1f0:	ec eb       	ldi	r30, 0xBC	; 188
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	90 81       	ld	r25, Z
 1f6:	90 68       	ori	r25, 0x80	; 128
 1f8:	90 83       	st	Z, r25
	while (!(TWCR & (1 << TWINT))); // Espera a que el dato sea recibido
 1fa:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1fe:	99 23       	and	r25, r25
 200:	e4 f7       	brge	.-8      	; 0x1fa <I2C_Master_Read+0x26>

	uint8_t estado = TWSR & 0xF8; // Lee el estado del TWI
 202:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 206:	98 7f       	andi	r25, 0xF8	; 248
	if (estado == 0x58 || estado == 0x50) { // Verifica estado de recepción
 208:	98 35       	cpi	r25, 0x58	; 88
 20a:	11 f0       	breq	.+4      	; 0x210 <I2C_Master_Read+0x3c>
 20c:	90 35       	cpi	r25, 0x50	; 80
 20e:	29 f4       	brne	.+10     	; 0x21a <I2C_Master_Read+0x46>
		*buffer = TWDR; // Lee el dato recibido
 210:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 214:	8c 93       	st	X, r24
		return 0; // Recepción exitosa
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	08 95       	ret
		} else {
		return estado; // Retorna el código de error
 21a:	89 2f       	mov	r24, r25
	}
}
 21c:	08 95       	ret

0000021e <read_from_slave>:

uint8_t read_from_slave(uint8_t direccion_esclavo, uint8_t *dato) {
	// Iniciar condición de START
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
 21e:	94 ea       	ldi	r25, 0xA4	; 164
 220:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 224:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 228:	99 23       	and	r25, r25
 22a:	e4 f7       	brge	.-8      	; 0x224 <read_from_slave+0x6>

	// Verificar estado de START
	if ((TWSR & 0xF8) != 0x08) return 1; // Error: No se pudo iniciar la condición de START
 22c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 230:	98 7f       	andi	r25, 0xF8	; 248
 232:	98 30       	cpi	r25, 0x08	; 8
 234:	99 f5       	brne	.+102    	; 0x29c <read_from_slave+0x7e>

	// Enviar dirección del esclavo con bit de lectura
	TWDR = (direccion_esclavo << 1) | 1; // SLA + R (bit de lectura)
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	81 60       	ori	r24, 0x01	; 1
 23e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
 242:	84 e8       	ldi	r24, 0x84	; 132
 244:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 248:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 24c:	88 23       	and	r24, r24
 24e:	e4 f7       	brge	.-8      	; 0x248 <read_from_slave+0x2a>
 250:	fb 01       	movw	r30, r22

	// Verificar estado de la dirección del esclavo
	if ((TWSR & 0xF8) != 0x40) {
 252:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 256:	88 7f       	andi	r24, 0xF8	; 248
 258:	80 34       	cpi	r24, 0x40	; 64
 25a:	21 f0       	breq	.+8      	; 0x264 <read_from_slave+0x46>
		I2C_Master_Stop(); // Detener si se recibe un NACK o estado inesperado
 25c:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>
		return 1; // Error: No se pudo recibir ACK del esclavo
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	08 95       	ret
	}

	// Leer el dato del esclavo
	TWCR = (1 << TWINT) | (1 << TWEN);
 264:	84 e8       	ldi	r24, 0x84	; 132
 266:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 26a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 26e:	88 23       	and	r24, r24
 270:	e4 f7       	brge	.-8      	; 0x26a <read_from_slave+0x4c>

	// Verificar estado del dato recibido
	if ((TWSR & 0xF8) != 0x58 && (TWSR & 0xF8) != 0x50) {
 272:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 276:	88 7f       	andi	r24, 0xF8	; 248
 278:	88 35       	cpi	r24, 0x58	; 88
 27a:	49 f0       	breq	.+18     	; 0x28e <read_from_slave+0x70>
 27c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 280:	88 7f       	andi	r24, 0xF8	; 248
 282:	80 35       	cpi	r24, 0x50	; 80
 284:	21 f0       	breq	.+8      	; 0x28e <read_from_slave+0x70>
		I2C_Master_Stop(); // Detener si hay error en la recepción
 286:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>
		return 1; // Error en la recepción
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	08 95       	ret
	}

	*dato = TWDR; // Leer el dato recibido
 28e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 292:	80 83       	st	Z, r24
	I2C_Master_Stop(); // Generar condición de STOP
 294:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>
	return 0; // Éxito
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	08 95       	ret
	// Iniciar condición de START
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete

	// Verificar estado de START
	if ((TWSR & 0xF8) != 0x08) return 1; // Error: No se pudo iniciar la condición de START
 29c:	81 e0       	ldi	r24, 0x01	; 1
	}

	*dato = TWDR; // Leer el dato recibido
	I2C_Master_Stop(); // Generar condición de STOP
	return 0; // Éxito
}
 29e:	08 95       	ret

000002a0 <send_to_slave>:

void send_to_slave(uint8_t slave_address, uint8_t data) {
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	d8 2f       	mov	r29, r24
 2a6:	c6 2f       	mov	r28, r22
	// Inicia la comunicación I2C
	I2C_Master_Start();
 2a8:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Master_Start>

	// Envía la dirección del esclavo con el bit de escritura
	I2C_Master_Write(slave_address << 1);
 2ac:	8d 2f       	mov	r24, r29
 2ae:	88 0f       	add	r24, r24
 2b0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>

	// Envía el dato
	I2C_Master_Write(data);
 2b4:	8c 2f       	mov	r24, r28
 2b6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>

	// Detiene la comunicación I2C
	I2C_Master_Stop();
 2ba:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <LCD_port>:
	LCD_CMD(0x1C);
}

//desplazamiento hacia la izquierda
void Lcd_Shift_Left(void) {
	LCD_CMD(0x18);
 2c4:	80 ff       	sbrs	r24, 0
 2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <LCD_port+0xc>
 2c8:	9b b1       	in	r25, 0x0b	; 11
 2ca:	90 61       	ori	r25, 0x10	; 16
 2cc:	9b b9       	out	0x0b, r25	; 11
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <LCD_port+0x12>
 2d0:	9b b1       	in	r25, 0x0b	; 11
 2d2:	9f 7e       	andi	r25, 0xEF	; 239
 2d4:	9b b9       	out	0x0b, r25	; 11
 2d6:	81 ff       	sbrs	r24, 1
 2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <LCD_port+0x1e>
 2da:	9b b1       	in	r25, 0x0b	; 11
 2dc:	90 62       	ori	r25, 0x20	; 32
 2de:	9b b9       	out	0x0b, r25	; 11
 2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <LCD_port+0x24>
 2e2:	9b b1       	in	r25, 0x0b	; 11
 2e4:	9f 7d       	andi	r25, 0xDF	; 223
 2e6:	9b b9       	out	0x0b, r25	; 11
 2e8:	82 ff       	sbrs	r24, 2
 2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <LCD_port+0x30>
 2ec:	9b b1       	in	r25, 0x0b	; 11
 2ee:	90 64       	ori	r25, 0x40	; 64
 2f0:	9b b9       	out	0x0b, r25	; 11
 2f2:	03 c0       	rjmp	.+6      	; 0x2fa <LCD_port+0x36>
 2f4:	9b b1       	in	r25, 0x0b	; 11
 2f6:	9f 7b       	andi	r25, 0xBF	; 191
 2f8:	9b b9       	out	0x0b, r25	; 11
 2fa:	83 ff       	sbrs	r24, 3
 2fc:	04 c0       	rjmp	.+8      	; 0x306 <LCD_port+0x42>
 2fe:	9b b1       	in	r25, 0x0b	; 11
 300:	90 68       	ori	r25, 0x80	; 128
 302:	9b b9       	out	0x0b, r25	; 11
 304:	03 c0       	rjmp	.+6      	; 0x30c <LCD_port+0x48>
 306:	9b b1       	in	r25, 0x0b	; 11
 308:	9f 77       	andi	r25, 0x7F	; 127
 30a:	9b b9       	out	0x0b, r25	; 11
 30c:	84 ff       	sbrs	r24, 4
 30e:	04 c0       	rjmp	.+8      	; 0x318 <LCD_port+0x54>
 310:	95 b1       	in	r25, 0x05	; 5
 312:	91 60       	ori	r25, 0x01	; 1
 314:	95 b9       	out	0x05, r25	; 5
 316:	03 c0       	rjmp	.+6      	; 0x31e <LCD_port+0x5a>
 318:	95 b1       	in	r25, 0x05	; 5
 31a:	9e 7f       	andi	r25, 0xFE	; 254
 31c:	95 b9       	out	0x05, r25	; 5
 31e:	85 ff       	sbrs	r24, 5
 320:	04 c0       	rjmp	.+8      	; 0x32a <LCD_port+0x66>
 322:	95 b1       	in	r25, 0x05	; 5
 324:	92 60       	ori	r25, 0x02	; 2
 326:	95 b9       	out	0x05, r25	; 5
 328:	03 c0       	rjmp	.+6      	; 0x330 <LCD_port+0x6c>
 32a:	95 b1       	in	r25, 0x05	; 5
 32c:	9d 7f       	andi	r25, 0xFD	; 253
 32e:	95 b9       	out	0x05, r25	; 5
 330:	86 ff       	sbrs	r24, 6
 332:	04 c0       	rjmp	.+8      	; 0x33c <LCD_port+0x78>
 334:	95 b1       	in	r25, 0x05	; 5
 336:	94 60       	ori	r25, 0x04	; 4
 338:	95 b9       	out	0x05, r25	; 5
 33a:	03 c0       	rjmp	.+6      	; 0x342 <LCD_port+0x7e>
 33c:	95 b1       	in	r25, 0x05	; 5
 33e:	9b 7f       	andi	r25, 0xFB	; 251
 340:	95 b9       	out	0x05, r25	; 5
 342:	88 23       	and	r24, r24
 344:	24 f4       	brge	.+8      	; 0x34e <LCD_port+0x8a>
 346:	85 b1       	in	r24, 0x05	; 5
 348:	88 60       	ori	r24, 0x08	; 8
 34a:	85 b9       	out	0x05, r24	; 5
 34c:	08 95       	ret
 34e:	85 b1       	in	r24, 0x05	; 5
 350:	87 7f       	andi	r24, 0xF7	; 247
 352:	85 b9       	out	0x05, r24	; 5
 354:	08 95       	ret

00000356 <LCD_CMD>:
 356:	9b b1       	in	r25, 0x0b	; 11
 358:	9b 7f       	andi	r25, 0xFB	; 251
 35a:	9b b9       	out	0x0b, r25	; 11
 35c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCD_port>
 360:	8b b1       	in	r24, 0x0b	; 11
 362:	88 60       	ori	r24, 0x08	; 8
 364:	8b b9       	out	0x0b, r24	; 11
 366:	85 e0       	ldi	r24, 0x05	; 5
 368:	8a 95       	dec	r24
 36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_CMD+0x12>
 36c:	00 00       	nop
 36e:	8b b1       	in	r24, 0x0b	; 11
 370:	87 7f       	andi	r24, 0xF7	; 247
 372:	8b b9       	out	0x0b, r24	; 11
 374:	8f e3       	ldi	r24, 0x3F	; 63
 376:	9f e1       	ldi	r25, 0x1F	; 31
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <LCD_CMD+0x22>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <LCD_CMD+0x28>
 37e:	00 00       	nop
 380:	08 95       	ret

00000382 <initLCD8bits>:
 382:	8a b1       	in	r24, 0x0a	; 10
 384:	8c 6f       	ori	r24, 0xFC	; 252
 386:	8a b9       	out	0x0a, r24	; 10
 388:	1b b8       	out	0x0b, r1	; 11
 38a:	84 b1       	in	r24, 0x04	; 4
 38c:	8f 60       	ori	r24, 0x0F	; 15
 38e:	84 b9       	out	0x04, r24	; 4
 390:	15 b8       	out	0x05, r1	; 5
 392:	2f ef       	ldi	r18, 0xFF	; 255
 394:	89 ef       	ldi	r24, 0xF9	; 249
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	21 50       	subi	r18, 0x01	; 1
 39a:	80 40       	sbci	r24, 0x00	; 0
 39c:	90 40       	sbci	r25, 0x00	; 0
 39e:	e1 f7       	brne	.-8      	; 0x398 <initLCD8bits+0x16>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <initLCD8bits+0x20>
 3a2:	00 00       	nop
 3a4:	88 e3       	ldi	r24, 0x38	; 56
 3a6:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
 3aa:	8f e1       	ldi	r24, 0x1F	; 31
 3ac:	9e e4       	ldi	r25, 0x4E	; 78
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <initLCD8bits+0x2c>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <initLCD8bits+0x32>
 3b4:	00 00       	nop
 3b6:	88 e3       	ldi	r24, 0x38	; 56
 3b8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
 3bc:	8f e9       	ldi	r24, 0x9F	; 159
 3be:	9f e0       	ldi	r25, 0x0F	; 15
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <initLCD8bits+0x3e>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <initLCD8bits+0x44>
 3c6:	00 00       	nop
 3c8:	88 e3       	ldi	r24, 0x38	; 56
 3ca:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
 3ce:	8f e9       	ldi	r24, 0x9F	; 159
 3d0:	9f e0       	ldi	r25, 0x0F	; 15
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <initLCD8bits+0x50>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <initLCD8bits+0x56>
 3d8:	00 00       	nop
 3da:	88 e3       	ldi	r24, 0x38	; 56
 3dc:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
 3e0:	8c e0       	ldi	r24, 0x0C	; 12
 3e2:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
 3ec:	8f e3       	ldi	r24, 0x3F	; 63
 3ee:	9f e1       	ldi	r25, 0x1F	; 31
 3f0:	01 97       	sbiw	r24, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <initLCD8bits+0x6e>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <initLCD8bits+0x74>
 3f6:	00 00       	nop
 3f8:	86 e0       	ldi	r24, 0x06	; 6
 3fa:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
 3fe:	08 95       	ret

00000400 <LCD_WriteCaracter>:
 400:	9b b1       	in	r25, 0x0b	; 11
 402:	94 60       	ori	r25, 0x04	; 4
 404:	9b b9       	out	0x0b, r25	; 11
 406:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCD_port>
 40a:	8b b1       	in	r24, 0x0b	; 11
 40c:	88 60       	ori	r24, 0x08	; 8
 40e:	8b b9       	out	0x0b, r24	; 11
 410:	85 e0       	ldi	r24, 0x05	; 5
 412:	8a 95       	dec	r24
 414:	f1 f7       	brne	.-4      	; 0x412 <LCD_WriteCaracter+0x12>
 416:	00 00       	nop
 418:	8b b1       	in	r24, 0x0b	; 11
 41a:	87 7f       	andi	r24, 0xF7	; 247
 41c:	8b b9       	out	0x0b, r24	; 11
 41e:	8f e3       	ldi	r24, 0x3F	; 63
 420:	9f e1       	ldi	r25, 0x1F	; 31
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <LCD_WriteCaracter+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <LCD_WriteCaracter+0x28>
 428:	00 00       	nop
 42a:	08 95       	ret

0000042c <LCD_Write_String>:
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	8c 01       	movw	r16, r24
 436:	c0 e0       	ldi	r28, 0x00	; 0
 438:	d0 e0       	ldi	r29, 0x00	; 0
 43a:	03 c0       	rjmp	.+6      	; 0x442 <LCD_Write_String+0x16>
 43c:	0e 94 00 02 	call	0x400	; 0x400 <LCD_WriteCaracter>
 440:	21 96       	adiw	r28, 0x01	; 1
 442:	f8 01       	movw	r30, r16
 444:	ec 0f       	add	r30, r28
 446:	fd 1f       	adc	r31, r29
 448:	80 81       	ld	r24, Z
 44a:	81 11       	cpse	r24, r1
 44c:	f7 cf       	rjmp	.-18     	; 0x43c <LCD_Write_String+0x10>
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	1f 91       	pop	r17
 454:	0f 91       	pop	r16
 456:	08 95       	ret

00000458 <LCD_Set_Cursor>:
}

//Establecer cursor
void LCD_Set_Cursor(char c, char f) {
 458:	cf 93       	push	r28
	char temp;
	if (f == 1) {
 45a:	61 30       	cpi	r22, 0x01	; 1
 45c:	31 f4       	brne	.+12     	; 0x46a <LCD_Set_Cursor+0x12>
		temp = 0x80 + c - 1;
 45e:	cf e7       	ldi	r28, 0x7F	; 127
 460:	c8 0f       	add	r28, r24
		LCD_CMD(temp);
 462:	8c 2f       	mov	r24, r28
 464:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
 468:	07 c0       	rjmp	.+14     	; 0x478 <LCD_Set_Cursor+0x20>
		} else if (f == 2) {
 46a:	62 30       	cpi	r22, 0x02	; 2
 46c:	29 f4       	brne	.+10     	; 0x478 <LCD_Set_Cursor+0x20>
		temp = 0xC0 + c - 1;
 46e:	cf eb       	ldi	r28, 0xBF	; 191
 470:	c8 0f       	add	r28, r24
		LCD_CMD(temp);
 472:	8c 2f       	mov	r24, r28
 474:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
	}
	LCD_CMD(temp);
 478:	8c 2f       	mov	r24, r28
 47a:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_CMD>
}
 47e:	cf 91       	pop	r28
 480:	08 95       	ret

00000482 <DS3231_ReadTime>:

void DS3231_Init(void) {
    // No es necesario inicializar nada en específico para el DS3231.
}

void DS3231_ReadTime(uint8_t *hours, uint8_t *minutes, uint8_t *seconds) {
 482:	af 92       	push	r10
 484:	bf 92       	push	r11
 486:	cf 92       	push	r12
 488:	df 92       	push	r13
 48a:	ef 92       	push	r14
 48c:	ff 92       	push	r15
 48e:	1f 93       	push	r17
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	00 d0       	rcall	.+0      	; 0x496 <DS3231_ReadTime+0x14>
 496:	1f 92       	push	r1
 498:	cd b7       	in	r28, 0x3d	; 61
 49a:	de b7       	in	r29, 0x3e	; 62
 49c:	7c 01       	movw	r14, r24
 49e:	6b 01       	movw	r12, r22
 4a0:	5a 01       	movw	r10, r20
    uint8_t data[3];
    uint8_t addr = 0x00;  // Dirección del registro de la hora en el DS3231

    I2C_Master_Start();
 4a2:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Master_Start>
    I2C_Master_Write(DS3231_ADDR << 1);  // Enviar dirección del esclavo con bit de escritura
 4a6:	80 ed       	ldi	r24, 0xD0	; 208
 4a8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>
    I2C_Master_Write(addr);  // Especificar que se comenzará a leer desde el registro de segundos
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>

    I2C_Master_Start();  // Repetir START para cambiar a modo lectura
 4b2:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Master_Start>
    I2C_Master_Write((DS3231_ADDR << 1) | 1);  // Enviar dirección del esclavo con bit de lectura
 4b6:	81 ed       	ldi	r24, 0xD1	; 209
 4b8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Master_Write>

    for (uint8_t i = 0; i < 3; i++) {
 4bc:	10 e0       	ldi	r17, 0x00	; 0
 4be:	16 c0       	rjmp	.+44     	; 0x4ec <DS3231_ReadTime+0x6a>
        if (i < 2) {
 4c0:	12 30       	cpi	r17, 0x02	; 2
 4c2:	50 f4       	brcc	.+20     	; 0x4d8 <DS3231_ReadTime+0x56>
            I2C_Master_Read(&data[i], 1);  // Leer con ACK
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	8c 0f       	add	r24, r28
 4cc:	9d 1f       	adc	r25, r29
 4ce:	81 0f       	add	r24, r17
 4d0:	91 1d       	adc	r25, r1
 4d2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2C_Master_Read>
 4d6:	09 c0       	rjmp	.+18     	; 0x4ea <DS3231_ReadTime+0x68>
        } else {
            I2C_Master_Read(&data[i], 0);  // Leer con NACK
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	8c 0f       	add	r24, r28
 4e0:	9d 1f       	adc	r25, r29
 4e2:	81 0f       	add	r24, r17
 4e4:	91 1d       	adc	r25, r1
 4e6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2C_Master_Read>
    I2C_Master_Write(addr);  // Especificar que se comenzará a leer desde el registro de segundos

    I2C_Master_Start();  // Repetir START para cambiar a modo lectura
    I2C_Master_Write((DS3231_ADDR << 1) | 1);  // Enviar dirección del esclavo con bit de lectura

    for (uint8_t i = 0; i < 3; i++) {
 4ea:	1f 5f       	subi	r17, 0xFF	; 255
 4ec:	13 30       	cpi	r17, 0x03	; 3
 4ee:	40 f3       	brcs	.-48     	; 0x4c0 <DS3231_ReadTime+0x3e>
        } else {
            I2C_Master_Read(&data[i], 0);  // Leer con NACK
        }
    }
    
    I2C_Master_Stop();
 4f0:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Master_Stop>

    *seconds = ((data[0] >> 4) * 10) + (data[0] & 0x0F);
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
 4f6:	98 2f       	mov	r25, r24
 4f8:	92 95       	swap	r25
 4fa:	9f 70       	andi	r25, 0x0F	; 15
 4fc:	99 0f       	add	r25, r25
 4fe:	29 2f       	mov	r18, r25
 500:	22 0f       	add	r18, r18
 502:	22 0f       	add	r18, r18
 504:	92 0f       	add	r25, r18
 506:	8f 70       	andi	r24, 0x0F	; 15
 508:	89 0f       	add	r24, r25
 50a:	f5 01       	movw	r30, r10
 50c:	80 83       	st	Z, r24
    *minutes = ((data[1] >> 4) * 10) + (data[1] & 0x0F);
 50e:	8a 81       	ldd	r24, Y+2	; 0x02
 510:	98 2f       	mov	r25, r24
 512:	92 95       	swap	r25
 514:	9f 70       	andi	r25, 0x0F	; 15
 516:	99 0f       	add	r25, r25
 518:	29 2f       	mov	r18, r25
 51a:	22 0f       	add	r18, r18
 51c:	22 0f       	add	r18, r18
 51e:	92 0f       	add	r25, r18
 520:	8f 70       	andi	r24, 0x0F	; 15
 522:	89 0f       	add	r24, r25
 524:	f6 01       	movw	r30, r12
 526:	80 83       	st	Z, r24
    *hours   = ((data[2] >> 4) * 10) + (data[2] & 0x0F);
 528:	8b 81       	ldd	r24, Y+3	; 0x03
 52a:	98 2f       	mov	r25, r24
 52c:	92 95       	swap	r25
 52e:	9f 70       	andi	r25, 0x0F	; 15
 530:	99 0f       	add	r25, r25
 532:	29 2f       	mov	r18, r25
 534:	22 0f       	add	r18, r18
 536:	22 0f       	add	r18, r18
 538:	92 0f       	add	r25, r18
 53a:	8f 70       	andi	r24, 0x0F	; 15
 53c:	89 0f       	add	r24, r25
 53e:	f7 01       	movw	r30, r14
 540:	80 83       	st	Z, r24
}
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	1f 91       	pop	r17
 54e:	ff 90       	pop	r15
 550:	ef 90       	pop	r14
 552:	df 90       	pop	r13
 554:	cf 90       	pop	r12
 556:	bf 90       	pop	r11
 558:	af 90       	pop	r10
 55a:	08 95       	ret

0000055c <portonUltra>:

void portonUltra() {
    uint8_t result = read_from_slave(SLAVE2_ADDR, &Abierto);
 55c:	6d e5       	ldi	r22, 0x5D	; 93
 55e:	72 e0       	ldi	r23, 0x02	; 2
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	0e 94 0f 01 	call	0x21e	; 0x21e <read_from_slave>
    int abierto2 = (int)(Abierto);
 566:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <Abierto>
    if (result == 0) {
 56a:	81 11       	cpse	r24, r1
 56c:	16 c0       	rjmp	.+44     	; 0x59a <portonUltra+0x3e>
        if (abierto2 == 1) {
 56e:	91 30       	cpi	r25, 0x01	; 1
 570:	51 f4       	brne	.+20     	; 0x586 <portonUltra+0x2a>
            strcpy(buffer2, "open");
 572:	85 e0       	ldi	r24, 0x05	; 5
 574:	e2 e0       	ldi	r30, 0x02	; 2
 576:	f1 e0       	ldi	r31, 0x01	; 1
 578:	ab eb       	ldi	r26, 0xBB	; 187
 57a:	b1 e0       	ldi	r27, 0x01	; 1
 57c:	01 90       	ld	r0, Z+
 57e:	0d 92       	st	X+, r0
 580:	8a 95       	dec	r24
 582:	e1 f7       	brne	.-8      	; 0x57c <portonUltra+0x20>
 584:	08 95       	ret
        } else {
            strcpy(buffer2, "close");
 586:	86 e0       	ldi	r24, 0x06	; 6
 588:	e7 e0       	ldi	r30, 0x07	; 7
 58a:	f1 e0       	ldi	r31, 0x01	; 1
 58c:	ab eb       	ldi	r26, 0xBB	; 187
 58e:	b1 e0       	ldi	r27, 0x01	; 1
 590:	01 90       	ld	r0, Z+
 592:	0d 92       	st	X+, r0
 594:	8a 95       	dec	r24
 596:	e1 f7       	brne	.-8      	; 0x590 <portonUltra+0x34>
 598:	08 95       	ret
        }
    } else {
        strcpy(buffer2, "error");
 59a:	86 e0       	ldi	r24, 0x06	; 6
 59c:	ed e0       	ldi	r30, 0x0D	; 13
 59e:	f1 e0       	ldi	r31, 0x01	; 1
 5a0:	ab eb       	ldi	r26, 0xBB	; 187
 5a2:	b1 e0       	ldi	r27, 0x01	; 1
 5a4:	01 90       	ld	r0, Z+
 5a6:	0d 92       	st	X+, r0
 5a8:	8a 95       	dec	r24
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <portonUltra+0x48>
 5ac:	08 95       	ret

000005ae <enviarDatosAlESP32>:

void enviarDatosAlESP32(uint8_t hours, uint8_t minutes, uint8_t seconds) {
    static uint8_t minutoAnterior = 255;

    // Enviar la hora por UART solo si ha cambiado el minuto
    if (minutes != minutoAnterior) {
 5ae:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5b2:	96 17       	cp	r25, r22
 5b4:	09 f1       	breq	.+66     	; 0x5f8 <enviarDatosAlESP32+0x4a>
        minutoAnterior = minutes;
 5b6:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
        snprintf(buffer, sizeof(buffer), "Hora:%02d:%02d:%02d\n", hours, minutes, seconds);
 5ba:	1f 92       	push	r1
 5bc:	4f 93       	push	r20
 5be:	1f 92       	push	r1
 5c0:	6f 93       	push	r22
 5c2:	1f 92       	push	r1
 5c4:	8f 93       	push	r24
 5c6:	83 e1       	ldi	r24, 0x13	; 19
 5c8:	91 e0       	ldi	r25, 0x01	; 1
 5ca:	9f 93       	push	r25
 5cc:	8f 93       	push	r24
 5ce:	1f 92       	push	r1
 5d0:	80 e8       	ldi	r24, 0x80	; 128
 5d2:	8f 93       	push	r24
 5d4:	8c ec       	ldi	r24, 0xCC	; 204
 5d6:	91 e0       	ldi	r25, 0x01	; 1
 5d8:	9f 93       	push	r25
 5da:	8f 93       	push	r24
 5dc:	0e 94 b3 04 	call	0x966	; 0x966 <snprintf>
        writeUART_Text(buffer);
 5e0:	8c ec       	ldi	r24, 0xCC	; 204
 5e2:	91 e0       	ldi	r25, 0x01	; 1
 5e4:	0e 94 79 04 	call	0x8f2	; 0x8f2 <writeUART_Text>
 5e8:	8d b7       	in	r24, 0x3d	; 61
 5ea:	9e b7       	in	r25, 0x3e	; 62
 5ec:	0c 96       	adiw	r24, 0x0c	; 12
 5ee:	0f b6       	in	r0, 0x3f	; 63
 5f0:	f8 94       	cli
 5f2:	9e bf       	out	0x3e, r25	; 62
 5f4:	0f be       	out	0x3f, r0	; 63
 5f6:	8d bf       	out	0x3d, r24	; 61
    }

    // Enviar el estado de la puerta solo si ha cambiado
    uint8_t estadoActualPuerta = (Abierto == 1) ? 1 : 0;
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <Abierto>
 5fe:	91 30       	cpi	r25, 0x01	; 1
 600:	09 f0       	breq	.+2      	; 0x604 <enviarDatosAlESP32+0x56>
 602:	80 e0       	ldi	r24, 0x00	; 0
    if (estadoActualPuerta != estadoAnteriorPuerta) {
 604:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <estadoAnteriorPuerta>
 608:	89 17       	cp	r24, r25
 60a:	f9 f0       	breq	.+62     	; 0x64a <enviarDatosAlESP32+0x9c>
        estadoAnteriorPuerta = estadoActualPuerta;
 60c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <estadoAnteriorPuerta>
        snprintf(buffer, sizeof(buffer), "Puerta:%s\n", buffer2);
 610:	8b eb       	ldi	r24, 0xBB	; 187
 612:	91 e0       	ldi	r25, 0x01	; 1
 614:	9f 93       	push	r25
 616:	8f 93       	push	r24
 618:	88 e2       	ldi	r24, 0x28	; 40
 61a:	91 e0       	ldi	r25, 0x01	; 1
 61c:	9f 93       	push	r25
 61e:	8f 93       	push	r24
 620:	1f 92       	push	r1
 622:	80 e8       	ldi	r24, 0x80	; 128
 624:	8f 93       	push	r24
 626:	8c ec       	ldi	r24, 0xCC	; 204
 628:	91 e0       	ldi	r25, 0x01	; 1
 62a:	9f 93       	push	r25
 62c:	8f 93       	push	r24
 62e:	0e 94 b3 04 	call	0x966	; 0x966 <snprintf>
        writeUART_Text(buffer);
 632:	8c ec       	ldi	r24, 0xCC	; 204
 634:	91 e0       	ldi	r25, 0x01	; 1
 636:	0e 94 79 04 	call	0x8f2	; 0x8f2 <writeUART_Text>
 63a:	8d b7       	in	r24, 0x3d	; 61
 63c:	9e b7       	in	r25, 0x3e	; 62
 63e:	08 96       	adiw	r24, 0x08	; 8
 640:	0f b6       	in	r0, 0x3f	; 63
 642:	f8 94       	cli
 644:	9e bf       	out	0x3e, r25	; 62
 646:	0f be       	out	0x3f, r0	; 63
 648:	8d bf       	out	0x3d, r24	; 61
 64a:	08 95       	ret

0000064c <uartCasa>:
    }
}

void uartCasa() {
 64c:	cf 93       	push	r28
    if (UCSR0A & (1 << RXC0)) {  // Verificar si hay datos disponibles para leer
 64e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 652:	88 23       	and	r24, r24
 654:	cc f5       	brge	.+114    	; 0x6c8 <uartCasa+0x7c>
        char comando = receivedChar();
 656:	0e 94 8a 04 	call	0x914	; 0x914 <receivedChar>
 65a:	c8 2f       	mov	r28, r24

        // Ignorar espacios en blanco o caracteres de fin de línea
        if (comando == '\n' || comando == '\r' || comando == ' ') {
 65c:	8a 30       	cpi	r24, 0x0A	; 10
 65e:	a1 f1       	breq	.+104    	; 0x6c8 <uartCasa+0x7c>
 660:	8d 30       	cpi	r24, 0x0D	; 13
 662:	91 f1       	breq	.+100    	; 0x6c8 <uartCasa+0x7c>
 664:	80 32       	cpi	r24, 0x20	; 32
 666:	81 f1       	breq	.+96     	; 0x6c8 <uartCasa+0x7c>
            return;
        }
        
        snprintf(buffer, sizeof(buffer), "Recibido desde ESP32: %c\n", comando);
 668:	1f 92       	push	r1
 66a:	8f 93       	push	r24
 66c:	83 e3       	ldi	r24, 0x33	; 51
 66e:	91 e0       	ldi	r25, 0x01	; 1
 670:	9f 93       	push	r25
 672:	8f 93       	push	r24
 674:	1f 92       	push	r1
 676:	80 e8       	ldi	r24, 0x80	; 128
 678:	8f 93       	push	r24
 67a:	8c ec       	ldi	r24, 0xCC	; 204
 67c:	91 e0       	ldi	r25, 0x01	; 1
 67e:	9f 93       	push	r25
 680:	8f 93       	push	r24
 682:	0e 94 b3 04 	call	0x966	; 0x966 <snprintf>
        writeUART_Text(buffer);
 686:	8c ec       	ldi	r24, 0xCC	; 204
 688:	91 e0       	ldi	r25, 0x01	; 1
 68a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <writeUART_Text>

        // Procesar el comando recibido y enviar la bandera correspondiente al esclavo
        if (comando == '1') {
 68e:	8d b7       	in	r24, 0x3d	; 61
 690:	9e b7       	in	r25, 0x3e	; 62
 692:	08 96       	adiw	r24, 0x08	; 8
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	f8 94       	cli
 698:	9e bf       	out	0x3e, r25	; 62
 69a:	0f be       	out	0x3f, r0	; 63
 69c:	8d bf       	out	0x3d, r24	; 61
 69e:	c1 33       	cpi	r28, 0x31	; 49
 6a0:	49 f4       	brne	.+18     	; 0x6b4 <uartCasa+0x68>
            send_to_slave(SLAVE2_ADDR, 'A');  // Envía la bandera 'A' al esclavo 1 si el comando es 1
 6a2:	61 e4       	ldi	r22, 0x41	; 65
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
            writeUART_Text("Bandera 'A' enviada al esclavo 1\n");
 6aa:	8d e4       	ldi	r24, 0x4D	; 77
 6ac:	91 e0       	ldi	r25, 0x01	; 1
 6ae:	0e 94 79 04 	call	0x8f2	; 0x8f2 <writeUART_Text>
 6b2:	0a c0       	rjmp	.+20     	; 0x6c8 <uartCasa+0x7c>
        }
        else if (comando == '0') {
 6b4:	c0 33       	cpi	r28, 0x30	; 48
 6b6:	41 f4       	brne	.+16     	; 0x6c8 <uartCasa+0x7c>
            send_to_slave(SLAVE2_ADDR, 'B');  // Envía la bandera 'B' al esclavo 1 si el comando es 0
 6b8:	62 e4       	ldi	r22, 0x42	; 66
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <send_to_slave>
            writeUART_Text("Bandera 'B' enviada al esclavo 1\n");
 6c0:	8f e6       	ldi	r24, 0x6F	; 111
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	0e 94 79 04 	call	0x8f2	; 0x8f2 <writeUART_Text>
        }
    }
}
 6c8:	cf 91       	pop	r28
 6ca:	08 95       	ret

000006cc <main>:

int main(void) {
 6cc:	cf 93       	push	r28
 6ce:	df 93       	push	r29
 6d0:	00 d0       	rcall	.+0      	; 0x6d2 <main+0x6>
 6d2:	1f 92       	push	r1
 6d4:	cd b7       	in	r28, 0x3d	; 61
 6d6:	de b7       	in	r29, 0x3e	; 62
    // Inicialización de periféricos
    I2C_Master_Init(100, 4);
 6d8:	44 e0       	ldi	r20, 0x04	; 4
 6da:	64 e6       	ldi	r22, 0x64	; 100
 6dc:	70 e0       	ldi	r23, 0x00	; 0
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Master_Init>
    initLCD8bits();  // Inicializar el LCD en modo 8 bits
 6e6:	0e 94 c1 01 	call	0x382	; 0x382 <initLCD8bits>
    initUART(9600, 0, 0, 0, 0, 1, 8, 103);  // Inicializar UART a 9600 baudios
 6ea:	0f 2e       	mov	r0, r31
 6ec:	f7 e6       	ldi	r31, 0x67	; 103
 6ee:	af 2e       	mov	r10, r31
 6f0:	b1 2c       	mov	r11, r1
 6f2:	f0 2d       	mov	r31, r0
 6f4:	68 94       	set
 6f6:	cc 24       	eor	r12, r12
 6f8:	c3 f8       	bld	r12, 3
 6fa:	d1 2c       	mov	r13, r1
 6fc:	ee 24       	eor	r14, r14
 6fe:	e3 94       	inc	r14
 700:	f1 2c       	mov	r15, r1
 702:	00 e0       	ldi	r16, 0x00	; 0
 704:	10 e0       	ldi	r17, 0x00	; 0
 706:	20 e0       	ldi	r18, 0x00	; 0
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	40 e0       	ldi	r20, 0x00	; 0
 70c:	50 e0       	ldi	r21, 0x00	; 0
 70e:	60 e0       	ldi	r22, 0x00	; 0
 710:	70 e0       	ldi	r23, 0x00	; 0
 712:	80 e8       	ldi	r24, 0x80	; 128
 714:	95 e2       	ldi	r25, 0x25	; 37
 716:	0e 94 f5 03 	call	0x7ea	; 0x7ea <initUART>
    uint8_t hours, minutes, seconds;

    DS3231_Init();  // Inicializar el DS3231

    while (1) {
        portonUltra();
 71a:	0e 94 ae 02 	call	0x55c	; 0x55c <portonUltra>
        DS3231_ReadTime(&hours, &minutes, &seconds);
 71e:	ae 01       	movw	r20, r28
 720:	4d 5f       	subi	r20, 0xFD	; 253
 722:	5f 4f       	sbci	r21, 0xFF	; 255
 724:	be 01       	movw	r22, r28
 726:	6e 5f       	subi	r22, 0xFE	; 254
 728:	7f 4f       	sbci	r23, 0xFF	; 255
 72a:	ce 01       	movw	r24, r28
 72c:	01 96       	adiw	r24, 0x01	; 1
 72e:	0e 94 41 02 	call	0x482	; 0x482 <DS3231_ReadTime>

        // Mostrar la hora en el LCD
        snprintf(buffer, sizeof(buffer), "%02d:%02d:%02d", hours, minutes, seconds);
 732:	8b 81       	ldd	r24, Y+3	; 0x03
 734:	1f 92       	push	r1
 736:	8f 93       	push	r24
 738:	8a 81       	ldd	r24, Y+2	; 0x02
 73a:	1f 92       	push	r1
 73c:	8f 93       	push	r24
 73e:	89 81       	ldd	r24, Y+1	; 0x01
 740:	1f 92       	push	r1
 742:	8f 93       	push	r24
 744:	81 e9       	ldi	r24, 0x91	; 145
 746:	91 e0       	ldi	r25, 0x01	; 1
 748:	9f 93       	push	r25
 74a:	8f 93       	push	r24
 74c:	1f 92       	push	r1
 74e:	80 e8       	ldi	r24, 0x80	; 128
 750:	8f 93       	push	r24
 752:	8c ec       	ldi	r24, 0xCC	; 204
 754:	91 e0       	ldi	r25, 0x01	; 1
 756:	9f 93       	push	r25
 758:	8f 93       	push	r24
 75a:	0e 94 b3 04 	call	0x966	; 0x966 <snprintf>
        LCD_Set_Cursor(1, 2); // Posiciona el cursor en la primera línea del LCD
 75e:	62 e0       	ldi	r22, 0x02	; 2
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
        LCD_Write_String("        "); // Limpia la línea
 766:	80 ea       	ldi	r24, 0xA0	; 160
 768:	91 e0       	ldi	r25, 0x01	; 1
 76a:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
        LCD_Set_Cursor(1, 2); // Posiciona el cursor nuevamente
 76e:	62 e0       	ldi	r22, 0x02	; 2
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
        LCD_Write_String(buffer); // Muestra la hora formateada
 776:	8c ec       	ldi	r24, 0xCC	; 204
 778:	91 e0       	ldi	r25, 0x01	; 1
 77a:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
        LCD_Set_Cursor(1, 1); // Posiciona el cursor nuevamente
 77e:	61 e0       	ldi	r22, 0x01	; 1
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
        LCD_Write_String("Tiempo:"); // Muestra la etiqueta
 786:	89 ea       	ldi	r24, 0xA9	; 169
 788:	91 e0       	ldi	r25, 0x01	; 1
 78a:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>

        // Muestra el estado del portón
        LCD_Set_Cursor(11, 2); // Posiciona el cursor en la segunda línea del LCD
 78e:	62 e0       	ldi	r22, 0x02	; 2
 790:	8b e0       	ldi	r24, 0x0B	; 11
 792:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
        LCD_Write_String("        "); // Limpia la línea
 796:	80 ea       	ldi	r24, 0xA0	; 160
 798:	91 e0       	ldi	r25, 0x01	; 1
 79a:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
        LCD_Set_Cursor(11, 2); // Posiciona el cursor nuevamente
 79e:	62 e0       	ldi	r22, 0x02	; 2
 7a0:	8b e0       	ldi	r24, 0x0B	; 11
 7a2:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
        LCD_Write_String(buffer2); // Muestra el estado del portón
 7a6:	8b eb       	ldi	r24, 0xBB	; 187
 7a8:	91 e0       	ldi	r25, 0x01	; 1
 7aa:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>
        LCD_Set_Cursor(11, 1); // Posiciona el cursor nuevamente
 7ae:	61 e0       	ldi	r22, 0x01	; 1
 7b0:	8b e0       	ldi	r24, 0x0B	; 11
 7b2:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_Set_Cursor>
        LCD_Write_String("Puerta:"); // Muestra la etiqueta
 7b6:	81 eb       	ldi	r24, 0xB1	; 177
 7b8:	91 e0       	ldi	r25, 0x01	; 1
 7ba:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_String>

        // Enviar los datos al ESP32
        enviarDatosAlESP32(hours, minutes, seconds);
 7be:	4b 81       	ldd	r20, Y+3	; 0x03
 7c0:	6a 81       	ldd	r22, Y+2	; 0x02
 7c2:	89 81       	ldd	r24, Y+1	; 0x01
 7c4:	0e 94 d7 02 	call	0x5ae	; 0x5ae <enviarDatosAlESP32>

        // Procesar el comando recibido del ESP32 y enviarlo al esclavo adecuado
        uartCasa();
 7c8:	0e 94 26 03 	call	0x64c	; 0x64c <uartCasa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7cc:	2f ef       	ldi	r18, 0xFF	; 255
 7ce:	83 ed       	ldi	r24, 0xD3	; 211
 7d0:	90 e3       	ldi	r25, 0x30	; 48
 7d2:	21 50       	subi	r18, 0x01	; 1
 7d4:	80 40       	sbci	r24, 0x00	; 0
 7d6:	90 40       	sbci	r25, 0x00	; 0
 7d8:	e1 f7       	brne	.-8      	; 0x7d2 <main+0x106>
 7da:	00 c0       	rjmp	.+0      	; 0x7dc <main+0x110>
 7dc:	00 00       	nop
 7de:	0f b6       	in	r0, 0x3f	; 63
 7e0:	f8 94       	cli
 7e2:	de bf       	out	0x3e, r29	; 62
 7e4:	0f be       	out	0x3f, r0	; 63
 7e6:	cd bf       	out	0x3d, r28	; 61
 7e8:	98 cf       	rjmp	.-208    	; 0x71a <main+0x4e>

000007ea <initUART>:
	
}

void writeUART_car(char caracter){
	while (!(UCSR0A & (1<<UDRE0)));
	UDR0=caracter;
 7ea:	af 92       	push	r10
 7ec:	bf 92       	push	r11
 7ee:	cf 92       	push	r12
 7f0:	df 92       	push	r13
 7f2:	ef 92       	push	r14
 7f4:	ff 92       	push	r15
 7f6:	0f 93       	push	r16
 7f8:	1f 93       	push	r17
 7fa:	8a b1       	in	r24, 0x0a	; 10
 7fc:	8e 7f       	andi	r24, 0xFE	; 254
 7fe:	8a b9       	out	0x0a, r24	; 10
 800:	8a b1       	in	r24, 0x0a	; 10
 802:	82 60       	ori	r24, 0x02	; 2
 804:	8a b9       	out	0x0a, r24	; 10
 806:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 80a:	61 30       	cpi	r22, 0x01	; 1
 80c:	71 05       	cpc	r23, r1
 80e:	29 f4       	brne	.+10     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 810:	e0 ec       	ldi	r30, 0xC0	; 192
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	80 81       	ld	r24, Z
 816:	82 60       	ori	r24, 0x02	; 2
 818:	80 83       	st	Z, r24
 81a:	41 30       	cpi	r20, 0x01	; 1
 81c:	51 05       	cpc	r21, r1
 81e:	29 f4       	brne	.+10     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 820:	e0 ec       	ldi	r30, 0xC0	; 192
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	80 81       	ld	r24, Z
 826:	81 60       	ori	r24, 0x01	; 1
 828:	80 83       	st	Z, r24
 82a:	e1 ec       	ldi	r30, 0xC1	; 193
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	10 82       	st	Z, r1
 830:	80 81       	ld	r24, Z
 832:	80 6a       	ori	r24, 0xA0	; 160
 834:	80 83       	st	Z, r24
 836:	80 81       	ld	r24, Z
 838:	88 61       	ori	r24, 0x18	; 24
 83a:	80 83       	st	Z, r24
 83c:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 840:	21 30       	cpi	r18, 0x01	; 1
 842:	31 05       	cpc	r19, r1
 844:	29 f4       	brne	.+10     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 846:	e2 ec       	ldi	r30, 0xC2	; 194
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	80 81       	ld	r24, Z
 84c:	80 64       	ori	r24, 0x40	; 64
 84e:	80 83       	st	Z, r24
 850:	01 30       	cpi	r16, 0x01	; 1
 852:	11 05       	cpc	r17, r1
 854:	31 f4       	brne	.+12     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 856:	e2 ec       	ldi	r30, 0xC2	; 194
 858:	f0 e0       	ldi	r31, 0x00	; 0
 85a:	80 81       	ld	r24, Z
 85c:	80 62       	ori	r24, 0x20	; 32
 85e:	80 83       	st	Z, r24
 860:	08 c0       	rjmp	.+16     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 862:	02 30       	cpi	r16, 0x02	; 2
 864:	11 05       	cpc	r17, r1
 866:	29 f4       	brne	.+10     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 868:	e2 ec       	ldi	r30, 0xC2	; 194
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	80 81       	ld	r24, Z
 86e:	80 63       	ori	r24, 0x30	; 48
 870:	80 83       	st	Z, r24
 872:	82 e0       	ldi	r24, 0x02	; 2
 874:	e8 16       	cp	r14, r24
 876:	f1 04       	cpc	r15, r1
 878:	29 f4       	brne	.+10     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 87a:	e2 ec       	ldi	r30, 0xC2	; 194
 87c:	f0 e0       	ldi	r31, 0x00	; 0
 87e:	80 81       	ld	r24, Z
 880:	88 60       	ori	r24, 0x08	; 8
 882:	80 83       	st	Z, r24
 884:	87 e0       	ldi	r24, 0x07	; 7
 886:	c8 16       	cp	r12, r24
 888:	d1 04       	cpc	r13, r1
 88a:	a9 f0       	breq	.+42     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 88c:	2c f4       	brge	.+10     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 88e:	86 e0       	ldi	r24, 0x06	; 6
 890:	c8 16       	cp	r12, r24
 892:	d1 04       	cpc	r13, r1
 894:	51 f0       	breq	.+20     	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
 896:	20 c0       	rjmp	.+64     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 898:	88 e0       	ldi	r24, 0x08	; 8
 89a:	c8 16       	cp	r12, r24
 89c:	d1 04       	cpc	r13, r1
 89e:	89 f0       	breq	.+34     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8a0:	89 e0       	ldi	r24, 0x09	; 9
 8a2:	c8 16       	cp	r12, r24
 8a4:	d1 04       	cpc	r13, r1
 8a6:	99 f0       	breq	.+38     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8a8:	17 c0       	rjmp	.+46     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 8aa:	e2 ec       	ldi	r30, 0xC2	; 194
 8ac:	f0 e0       	ldi	r31, 0x00	; 0
 8ae:	80 81       	ld	r24, Z
 8b0:	82 60       	ori	r24, 0x02	; 2
 8b2:	80 83       	st	Z, r24
 8b4:	11 c0       	rjmp	.+34     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 8b6:	e2 ec       	ldi	r30, 0xC2	; 194
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	80 81       	ld	r24, Z
 8bc:	84 60       	ori	r24, 0x04	; 4
 8be:	80 83       	st	Z, r24
 8c0:	0b c0       	rjmp	.+22     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 8c2:	e2 ec       	ldi	r30, 0xC2	; 194
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	80 81       	ld	r24, Z
 8c8:	86 60       	ori	r24, 0x06	; 6
 8ca:	80 83       	st	Z, r24
 8cc:	05 c0       	rjmp	.+10     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 8ce:	e2 ec       	ldi	r30, 0xC2	; 194
 8d0:	f0 e0       	ldi	r31, 0x00	; 0
 8d2:	80 81       	ld	r24, Z
 8d4:	86 60       	ori	r24, 0x06	; 6
 8d6:	80 83       	st	Z, r24
 8d8:	b0 92 c5 00 	sts	0x00C5, r11	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 8dc:	a0 92 c4 00 	sts	0x00C4, r10	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 8e0:	1f 91       	pop	r17
 8e2:	0f 91       	pop	r16
 8e4:	ff 90       	pop	r15
 8e6:	ef 90       	pop	r14
 8e8:	df 90       	pop	r13
 8ea:	cf 90       	pop	r12
 8ec:	bf 90       	pop	r11
 8ee:	af 90       	pop	r10
 8f0:	08 95       	ret

000008f2 <writeUART_Text>:
}

void writeUART_Text(char* texto){
 8f2:	ac 01       	movw	r20, r24
	uint8_t i;
	for (i=0; texto[i]!='\0'; i++){
 8f4:	20 e0       	ldi	r18, 0x00	; 0
 8f6:	07 c0       	rjmp	.+14     	; 0x906 <__stack+0x7>
		while (!(UCSR0A & (1<<UDRE0)));
 8f8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 8fc:	95 ff       	sbrs	r25, 5
 8fe:	fc cf       	rjmp	.-8      	; 0x8f8 <writeUART_Text+0x6>
		UDR0=texto[i];
 900:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	UDR0=caracter;
}

void writeUART_Text(char* texto){
	uint8_t i;
	for (i=0; texto[i]!='\0'; i++){
 904:	2f 5f       	subi	r18, 0xFF	; 255
 906:	fa 01       	movw	r30, r20
 908:	e2 0f       	add	r30, r18
 90a:	f1 1d       	adc	r31, r1
 90c:	30 81       	ld	r19, Z
 90e:	31 11       	cpse	r19, r1
 910:	f3 cf       	rjmp	.-26     	; 0x8f8 <writeUART_Text+0x6>
		while (!(UCSR0A & (1<<UDRE0)));
		UDR0=texto[i];
	}
}
 912:	08 95       	ret

00000914 <receivedChar>:

uint8_t receivedChar(void){
	while (!(UCSR0A & (1 << RXC0)));
 914:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 918:	88 23       	and	r24, r24
 91a:	e4 f7       	brge	.-8      	; 0x914 <receivedChar>
	return UDR0;
 91c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 920:	08 95       	ret

00000922 <__udivmodsi4>:
 922:	a1 e2       	ldi	r26, 0x21	; 33
 924:	1a 2e       	mov	r1, r26
 926:	aa 1b       	sub	r26, r26
 928:	bb 1b       	sub	r27, r27
 92a:	fd 01       	movw	r30, r26
 92c:	0d c0       	rjmp	.+26     	; 0x948 <__udivmodsi4_ep>

0000092e <__udivmodsi4_loop>:
 92e:	aa 1f       	adc	r26, r26
 930:	bb 1f       	adc	r27, r27
 932:	ee 1f       	adc	r30, r30
 934:	ff 1f       	adc	r31, r31
 936:	a2 17       	cp	r26, r18
 938:	b3 07       	cpc	r27, r19
 93a:	e4 07       	cpc	r30, r20
 93c:	f5 07       	cpc	r31, r21
 93e:	20 f0       	brcs	.+8      	; 0x948 <__udivmodsi4_ep>
 940:	a2 1b       	sub	r26, r18
 942:	b3 0b       	sbc	r27, r19
 944:	e4 0b       	sbc	r30, r20
 946:	f5 0b       	sbc	r31, r21

00000948 <__udivmodsi4_ep>:
 948:	66 1f       	adc	r22, r22
 94a:	77 1f       	adc	r23, r23
 94c:	88 1f       	adc	r24, r24
 94e:	99 1f       	adc	r25, r25
 950:	1a 94       	dec	r1
 952:	69 f7       	brne	.-38     	; 0x92e <__udivmodsi4_loop>
 954:	60 95       	com	r22
 956:	70 95       	com	r23
 958:	80 95       	com	r24
 95a:	90 95       	com	r25
 95c:	9b 01       	movw	r18, r22
 95e:	ac 01       	movw	r20, r24
 960:	bd 01       	movw	r22, r26
 962:	cf 01       	movw	r24, r30
 964:	08 95       	ret

00000966 <snprintf>:
 966:	ae e0       	ldi	r26, 0x0E	; 14
 968:	b0 e0       	ldi	r27, 0x00	; 0
 96a:	e9 eb       	ldi	r30, 0xB9	; 185
 96c:	f4 e0       	ldi	r31, 0x04	; 4
 96e:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__prologue_saves__+0x1c>
 972:	0d 89       	ldd	r16, Y+21	; 0x15
 974:	1e 89       	ldd	r17, Y+22	; 0x16
 976:	8f 89       	ldd	r24, Y+23	; 0x17
 978:	98 8d       	ldd	r25, Y+24	; 0x18
 97a:	26 e0       	ldi	r18, 0x06	; 6
 97c:	2c 83       	std	Y+4, r18	; 0x04
 97e:	1a 83       	std	Y+2, r17	; 0x02
 980:	09 83       	std	Y+1, r16	; 0x01
 982:	97 ff       	sbrs	r25, 7
 984:	02 c0       	rjmp	.+4      	; 0x98a <snprintf+0x24>
 986:	80 e0       	ldi	r24, 0x00	; 0
 988:	90 e8       	ldi	r25, 0x80	; 128
 98a:	01 97       	sbiw	r24, 0x01	; 1
 98c:	9e 83       	std	Y+6, r25	; 0x06
 98e:	8d 83       	std	Y+5, r24	; 0x05
 990:	ae 01       	movw	r20, r28
 992:	45 5e       	subi	r20, 0xE5	; 229
 994:	5f 4f       	sbci	r21, 0xFF	; 255
 996:	69 8d       	ldd	r22, Y+25	; 0x19
 998:	7a 8d       	ldd	r23, Y+26	; 0x1a
 99a:	ce 01       	movw	r24, r28
 99c:	01 96       	adiw	r24, 0x01	; 1
 99e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <vfprintf>
 9a2:	4d 81       	ldd	r20, Y+5	; 0x05
 9a4:	5e 81       	ldd	r21, Y+6	; 0x06
 9a6:	57 fd       	sbrc	r21, 7
 9a8:	0a c0       	rjmp	.+20     	; 0x9be <snprintf+0x58>
 9aa:	2f 81       	ldd	r18, Y+7	; 0x07
 9ac:	38 85       	ldd	r19, Y+8	; 0x08
 9ae:	42 17       	cp	r20, r18
 9b0:	53 07       	cpc	r21, r19
 9b2:	0c f4       	brge	.+2      	; 0x9b6 <snprintf+0x50>
 9b4:	9a 01       	movw	r18, r20
 9b6:	f8 01       	movw	r30, r16
 9b8:	e2 0f       	add	r30, r18
 9ba:	f3 1f       	adc	r31, r19
 9bc:	10 82       	st	Z, r1
 9be:	2e 96       	adiw	r28, 0x0e	; 14
 9c0:	e4 e0       	ldi	r30, 0x04	; 4
 9c2:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__epilogue_restores__+0x1c>

000009c6 <vfprintf>:
 9c6:	ab e0       	ldi	r26, 0x0B	; 11
 9c8:	b0 e0       	ldi	r27, 0x00	; 0
 9ca:	e9 ee       	ldi	r30, 0xE9	; 233
 9cc:	f4 e0       	ldi	r31, 0x04	; 4
 9ce:	0c 94 74 07 	jmp	0xee8	; 0xee8 <__prologue_saves__>
 9d2:	6c 01       	movw	r12, r24
 9d4:	7b 01       	movw	r14, r22
 9d6:	8a 01       	movw	r16, r20
 9d8:	fc 01       	movw	r30, r24
 9da:	17 82       	std	Z+7, r1	; 0x07
 9dc:	16 82       	std	Z+6, r1	; 0x06
 9de:	83 81       	ldd	r24, Z+3	; 0x03
 9e0:	81 ff       	sbrs	r24, 1
 9e2:	cc c1       	rjmp	.+920    	; 0xd7c <vfprintf+0x3b6>
 9e4:	ce 01       	movw	r24, r28
 9e6:	01 96       	adiw	r24, 0x01	; 1
 9e8:	3c 01       	movw	r6, r24
 9ea:	f6 01       	movw	r30, r12
 9ec:	93 81       	ldd	r25, Z+3	; 0x03
 9ee:	f7 01       	movw	r30, r14
 9f0:	93 fd       	sbrc	r25, 3
 9f2:	85 91       	lpm	r24, Z+
 9f4:	93 ff       	sbrs	r25, 3
 9f6:	81 91       	ld	r24, Z+
 9f8:	7f 01       	movw	r14, r30
 9fa:	88 23       	and	r24, r24
 9fc:	09 f4       	brne	.+2      	; 0xa00 <vfprintf+0x3a>
 9fe:	ba c1       	rjmp	.+884    	; 0xd74 <vfprintf+0x3ae>
 a00:	85 32       	cpi	r24, 0x25	; 37
 a02:	39 f4       	brne	.+14     	; 0xa12 <vfprintf+0x4c>
 a04:	93 fd       	sbrc	r25, 3
 a06:	85 91       	lpm	r24, Z+
 a08:	93 ff       	sbrs	r25, 3
 a0a:	81 91       	ld	r24, Z+
 a0c:	7f 01       	movw	r14, r30
 a0e:	85 32       	cpi	r24, 0x25	; 37
 a10:	29 f4       	brne	.+10     	; 0xa1c <vfprintf+0x56>
 a12:	b6 01       	movw	r22, r12
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 94 da 06 	call	0xdb4	; 0xdb4 <fputc>
 a1a:	e7 cf       	rjmp	.-50     	; 0x9ea <vfprintf+0x24>
 a1c:	91 2c       	mov	r9, r1
 a1e:	21 2c       	mov	r2, r1
 a20:	31 2c       	mov	r3, r1
 a22:	ff e1       	ldi	r31, 0x1F	; 31
 a24:	f3 15       	cp	r31, r3
 a26:	d8 f0       	brcs	.+54     	; 0xa5e <vfprintf+0x98>
 a28:	8b 32       	cpi	r24, 0x2B	; 43
 a2a:	79 f0       	breq	.+30     	; 0xa4a <vfprintf+0x84>
 a2c:	38 f4       	brcc	.+14     	; 0xa3c <vfprintf+0x76>
 a2e:	80 32       	cpi	r24, 0x20	; 32
 a30:	79 f0       	breq	.+30     	; 0xa50 <vfprintf+0x8a>
 a32:	83 32       	cpi	r24, 0x23	; 35
 a34:	a1 f4       	brne	.+40     	; 0xa5e <vfprintf+0x98>
 a36:	23 2d       	mov	r18, r3
 a38:	20 61       	ori	r18, 0x10	; 16
 a3a:	1d c0       	rjmp	.+58     	; 0xa76 <vfprintf+0xb0>
 a3c:	8d 32       	cpi	r24, 0x2D	; 45
 a3e:	61 f0       	breq	.+24     	; 0xa58 <vfprintf+0x92>
 a40:	80 33       	cpi	r24, 0x30	; 48
 a42:	69 f4       	brne	.+26     	; 0xa5e <vfprintf+0x98>
 a44:	23 2d       	mov	r18, r3
 a46:	21 60       	ori	r18, 0x01	; 1
 a48:	16 c0       	rjmp	.+44     	; 0xa76 <vfprintf+0xb0>
 a4a:	83 2d       	mov	r24, r3
 a4c:	82 60       	ori	r24, 0x02	; 2
 a4e:	38 2e       	mov	r3, r24
 a50:	e3 2d       	mov	r30, r3
 a52:	e4 60       	ori	r30, 0x04	; 4
 a54:	3e 2e       	mov	r3, r30
 a56:	2a c0       	rjmp	.+84     	; 0xaac <vfprintf+0xe6>
 a58:	f3 2d       	mov	r31, r3
 a5a:	f8 60       	ori	r31, 0x08	; 8
 a5c:	1d c0       	rjmp	.+58     	; 0xa98 <vfprintf+0xd2>
 a5e:	37 fc       	sbrc	r3, 7
 a60:	2d c0       	rjmp	.+90     	; 0xabc <vfprintf+0xf6>
 a62:	20 ed       	ldi	r18, 0xD0	; 208
 a64:	28 0f       	add	r18, r24
 a66:	2a 30       	cpi	r18, 0x0A	; 10
 a68:	40 f0       	brcs	.+16     	; 0xa7a <vfprintf+0xb4>
 a6a:	8e 32       	cpi	r24, 0x2E	; 46
 a6c:	b9 f4       	brne	.+46     	; 0xa9c <vfprintf+0xd6>
 a6e:	36 fc       	sbrc	r3, 6
 a70:	81 c1       	rjmp	.+770    	; 0xd74 <vfprintf+0x3ae>
 a72:	23 2d       	mov	r18, r3
 a74:	20 64       	ori	r18, 0x40	; 64
 a76:	32 2e       	mov	r3, r18
 a78:	19 c0       	rjmp	.+50     	; 0xaac <vfprintf+0xe6>
 a7a:	36 fe       	sbrs	r3, 6
 a7c:	06 c0       	rjmp	.+12     	; 0xa8a <vfprintf+0xc4>
 a7e:	8a e0       	ldi	r24, 0x0A	; 10
 a80:	98 9e       	mul	r9, r24
 a82:	20 0d       	add	r18, r0
 a84:	11 24       	eor	r1, r1
 a86:	92 2e       	mov	r9, r18
 a88:	11 c0       	rjmp	.+34     	; 0xaac <vfprintf+0xe6>
 a8a:	ea e0       	ldi	r30, 0x0A	; 10
 a8c:	2e 9e       	mul	r2, r30
 a8e:	20 0d       	add	r18, r0
 a90:	11 24       	eor	r1, r1
 a92:	22 2e       	mov	r2, r18
 a94:	f3 2d       	mov	r31, r3
 a96:	f0 62       	ori	r31, 0x20	; 32
 a98:	3f 2e       	mov	r3, r31
 a9a:	08 c0       	rjmp	.+16     	; 0xaac <vfprintf+0xe6>
 a9c:	8c 36       	cpi	r24, 0x6C	; 108
 a9e:	21 f4       	brne	.+8      	; 0xaa8 <vfprintf+0xe2>
 aa0:	83 2d       	mov	r24, r3
 aa2:	80 68       	ori	r24, 0x80	; 128
 aa4:	38 2e       	mov	r3, r24
 aa6:	02 c0       	rjmp	.+4      	; 0xaac <vfprintf+0xe6>
 aa8:	88 36       	cpi	r24, 0x68	; 104
 aaa:	41 f4       	brne	.+16     	; 0xabc <vfprintf+0xf6>
 aac:	f7 01       	movw	r30, r14
 aae:	93 fd       	sbrc	r25, 3
 ab0:	85 91       	lpm	r24, Z+
 ab2:	93 ff       	sbrs	r25, 3
 ab4:	81 91       	ld	r24, Z+
 ab6:	7f 01       	movw	r14, r30
 ab8:	81 11       	cpse	r24, r1
 aba:	b3 cf       	rjmp	.-154    	; 0xa22 <vfprintf+0x5c>
 abc:	98 2f       	mov	r25, r24
 abe:	9f 7d       	andi	r25, 0xDF	; 223
 ac0:	95 54       	subi	r25, 0x45	; 69
 ac2:	93 30       	cpi	r25, 0x03	; 3
 ac4:	28 f4       	brcc	.+10     	; 0xad0 <vfprintf+0x10a>
 ac6:	0c 5f       	subi	r16, 0xFC	; 252
 ac8:	1f 4f       	sbci	r17, 0xFF	; 255
 aca:	9f e3       	ldi	r25, 0x3F	; 63
 acc:	99 83       	std	Y+1, r25	; 0x01
 ace:	0d c0       	rjmp	.+26     	; 0xaea <vfprintf+0x124>
 ad0:	83 36       	cpi	r24, 0x63	; 99
 ad2:	31 f0       	breq	.+12     	; 0xae0 <vfprintf+0x11a>
 ad4:	83 37       	cpi	r24, 0x73	; 115
 ad6:	71 f0       	breq	.+28     	; 0xaf4 <vfprintf+0x12e>
 ad8:	83 35       	cpi	r24, 0x53	; 83
 ada:	09 f0       	breq	.+2      	; 0xade <vfprintf+0x118>
 adc:	59 c0       	rjmp	.+178    	; 0xb90 <vfprintf+0x1ca>
 ade:	21 c0       	rjmp	.+66     	; 0xb22 <vfprintf+0x15c>
 ae0:	f8 01       	movw	r30, r16
 ae2:	80 81       	ld	r24, Z
 ae4:	89 83       	std	Y+1, r24	; 0x01
 ae6:	0e 5f       	subi	r16, 0xFE	; 254
 ae8:	1f 4f       	sbci	r17, 0xFF	; 255
 aea:	88 24       	eor	r8, r8
 aec:	83 94       	inc	r8
 aee:	91 2c       	mov	r9, r1
 af0:	53 01       	movw	r10, r6
 af2:	13 c0       	rjmp	.+38     	; 0xb1a <vfprintf+0x154>
 af4:	28 01       	movw	r4, r16
 af6:	f2 e0       	ldi	r31, 0x02	; 2
 af8:	4f 0e       	add	r4, r31
 afa:	51 1c       	adc	r5, r1
 afc:	f8 01       	movw	r30, r16
 afe:	a0 80       	ld	r10, Z
 b00:	b1 80       	ldd	r11, Z+1	; 0x01
 b02:	36 fe       	sbrs	r3, 6
 b04:	03 c0       	rjmp	.+6      	; 0xb0c <vfprintf+0x146>
 b06:	69 2d       	mov	r22, r9
 b08:	70 e0       	ldi	r23, 0x00	; 0
 b0a:	02 c0       	rjmp	.+4      	; 0xb10 <vfprintf+0x14a>
 b0c:	6f ef       	ldi	r22, 0xFF	; 255
 b0e:	7f ef       	ldi	r23, 0xFF	; 255
 b10:	c5 01       	movw	r24, r10
 b12:	0e 94 cf 06 	call	0xd9e	; 0xd9e <strnlen>
 b16:	4c 01       	movw	r8, r24
 b18:	82 01       	movw	r16, r4
 b1a:	f3 2d       	mov	r31, r3
 b1c:	ff 77       	andi	r31, 0x7F	; 127
 b1e:	3f 2e       	mov	r3, r31
 b20:	16 c0       	rjmp	.+44     	; 0xb4e <vfprintf+0x188>
 b22:	28 01       	movw	r4, r16
 b24:	22 e0       	ldi	r18, 0x02	; 2
 b26:	42 0e       	add	r4, r18
 b28:	51 1c       	adc	r5, r1
 b2a:	f8 01       	movw	r30, r16
 b2c:	a0 80       	ld	r10, Z
 b2e:	b1 80       	ldd	r11, Z+1	; 0x01
 b30:	36 fe       	sbrs	r3, 6
 b32:	03 c0       	rjmp	.+6      	; 0xb3a <vfprintf+0x174>
 b34:	69 2d       	mov	r22, r9
 b36:	70 e0       	ldi	r23, 0x00	; 0
 b38:	02 c0       	rjmp	.+4      	; 0xb3e <vfprintf+0x178>
 b3a:	6f ef       	ldi	r22, 0xFF	; 255
 b3c:	7f ef       	ldi	r23, 0xFF	; 255
 b3e:	c5 01       	movw	r24, r10
 b40:	0e 94 c4 06 	call	0xd88	; 0xd88 <strnlen_P>
 b44:	4c 01       	movw	r8, r24
 b46:	f3 2d       	mov	r31, r3
 b48:	f0 68       	ori	r31, 0x80	; 128
 b4a:	3f 2e       	mov	r3, r31
 b4c:	82 01       	movw	r16, r4
 b4e:	33 fc       	sbrc	r3, 3
 b50:	1b c0       	rjmp	.+54     	; 0xb88 <vfprintf+0x1c2>
 b52:	82 2d       	mov	r24, r2
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	88 16       	cp	r8, r24
 b58:	99 06       	cpc	r9, r25
 b5a:	b0 f4       	brcc	.+44     	; 0xb88 <vfprintf+0x1c2>
 b5c:	b6 01       	movw	r22, r12
 b5e:	80 e2       	ldi	r24, 0x20	; 32
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	0e 94 da 06 	call	0xdb4	; 0xdb4 <fputc>
 b66:	2a 94       	dec	r2
 b68:	f4 cf       	rjmp	.-24     	; 0xb52 <vfprintf+0x18c>
 b6a:	f5 01       	movw	r30, r10
 b6c:	37 fc       	sbrc	r3, 7
 b6e:	85 91       	lpm	r24, Z+
 b70:	37 fe       	sbrs	r3, 7
 b72:	81 91       	ld	r24, Z+
 b74:	5f 01       	movw	r10, r30
 b76:	b6 01       	movw	r22, r12
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	0e 94 da 06 	call	0xdb4	; 0xdb4 <fputc>
 b7e:	21 10       	cpse	r2, r1
 b80:	2a 94       	dec	r2
 b82:	21 e0       	ldi	r18, 0x01	; 1
 b84:	82 1a       	sub	r8, r18
 b86:	91 08       	sbc	r9, r1
 b88:	81 14       	cp	r8, r1
 b8a:	91 04       	cpc	r9, r1
 b8c:	71 f7       	brne	.-36     	; 0xb6a <vfprintf+0x1a4>
 b8e:	e8 c0       	rjmp	.+464    	; 0xd60 <vfprintf+0x39a>
 b90:	84 36       	cpi	r24, 0x64	; 100
 b92:	11 f0       	breq	.+4      	; 0xb98 <vfprintf+0x1d2>
 b94:	89 36       	cpi	r24, 0x69	; 105
 b96:	41 f5       	brne	.+80     	; 0xbe8 <vfprintf+0x222>
 b98:	f8 01       	movw	r30, r16
 b9a:	37 fe       	sbrs	r3, 7
 b9c:	07 c0       	rjmp	.+14     	; 0xbac <vfprintf+0x1e6>
 b9e:	60 81       	ld	r22, Z
 ba0:	71 81       	ldd	r23, Z+1	; 0x01
 ba2:	82 81       	ldd	r24, Z+2	; 0x02
 ba4:	93 81       	ldd	r25, Z+3	; 0x03
 ba6:	0c 5f       	subi	r16, 0xFC	; 252
 ba8:	1f 4f       	sbci	r17, 0xFF	; 255
 baa:	08 c0       	rjmp	.+16     	; 0xbbc <vfprintf+0x1f6>
 bac:	60 81       	ld	r22, Z
 bae:	71 81       	ldd	r23, Z+1	; 0x01
 bb0:	07 2e       	mov	r0, r23
 bb2:	00 0c       	add	r0, r0
 bb4:	88 0b       	sbc	r24, r24
 bb6:	99 0b       	sbc	r25, r25
 bb8:	0e 5f       	subi	r16, 0xFE	; 254
 bba:	1f 4f       	sbci	r17, 0xFF	; 255
 bbc:	f3 2d       	mov	r31, r3
 bbe:	ff 76       	andi	r31, 0x6F	; 111
 bc0:	3f 2e       	mov	r3, r31
 bc2:	97 ff       	sbrs	r25, 7
 bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <vfprintf+0x212>
 bc6:	90 95       	com	r25
 bc8:	80 95       	com	r24
 bca:	70 95       	com	r23
 bcc:	61 95       	neg	r22
 bce:	7f 4f       	sbci	r23, 0xFF	; 255
 bd0:	8f 4f       	sbci	r24, 0xFF	; 255
 bd2:	9f 4f       	sbci	r25, 0xFF	; 255
 bd4:	f0 68       	ori	r31, 0x80	; 128
 bd6:	3f 2e       	mov	r3, r31
 bd8:	2a e0       	ldi	r18, 0x0A	; 10
 bda:	30 e0       	ldi	r19, 0x00	; 0
 bdc:	a3 01       	movw	r20, r6
 bde:	0e 94 16 07 	call	0xe2c	; 0xe2c <__ultoa_invert>
 be2:	88 2e       	mov	r8, r24
 be4:	86 18       	sub	r8, r6
 be6:	45 c0       	rjmp	.+138    	; 0xc72 <vfprintf+0x2ac>
 be8:	85 37       	cpi	r24, 0x75	; 117
 bea:	31 f4       	brne	.+12     	; 0xbf8 <vfprintf+0x232>
 bec:	23 2d       	mov	r18, r3
 bee:	2f 7e       	andi	r18, 0xEF	; 239
 bf0:	b2 2e       	mov	r11, r18
 bf2:	2a e0       	ldi	r18, 0x0A	; 10
 bf4:	30 e0       	ldi	r19, 0x00	; 0
 bf6:	25 c0       	rjmp	.+74     	; 0xc42 <vfprintf+0x27c>
 bf8:	93 2d       	mov	r25, r3
 bfa:	99 7f       	andi	r25, 0xF9	; 249
 bfc:	b9 2e       	mov	r11, r25
 bfe:	8f 36       	cpi	r24, 0x6F	; 111
 c00:	c1 f0       	breq	.+48     	; 0xc32 <vfprintf+0x26c>
 c02:	18 f4       	brcc	.+6      	; 0xc0a <vfprintf+0x244>
 c04:	88 35       	cpi	r24, 0x58	; 88
 c06:	79 f0       	breq	.+30     	; 0xc26 <vfprintf+0x260>
 c08:	b5 c0       	rjmp	.+362    	; 0xd74 <vfprintf+0x3ae>
 c0a:	80 37       	cpi	r24, 0x70	; 112
 c0c:	19 f0       	breq	.+6      	; 0xc14 <vfprintf+0x24e>
 c0e:	88 37       	cpi	r24, 0x78	; 120
 c10:	21 f0       	breq	.+8      	; 0xc1a <vfprintf+0x254>
 c12:	b0 c0       	rjmp	.+352    	; 0xd74 <vfprintf+0x3ae>
 c14:	e9 2f       	mov	r30, r25
 c16:	e0 61       	ori	r30, 0x10	; 16
 c18:	be 2e       	mov	r11, r30
 c1a:	b4 fe       	sbrs	r11, 4
 c1c:	0d c0       	rjmp	.+26     	; 0xc38 <vfprintf+0x272>
 c1e:	fb 2d       	mov	r31, r11
 c20:	f4 60       	ori	r31, 0x04	; 4
 c22:	bf 2e       	mov	r11, r31
 c24:	09 c0       	rjmp	.+18     	; 0xc38 <vfprintf+0x272>
 c26:	34 fe       	sbrs	r3, 4
 c28:	0a c0       	rjmp	.+20     	; 0xc3e <vfprintf+0x278>
 c2a:	29 2f       	mov	r18, r25
 c2c:	26 60       	ori	r18, 0x06	; 6
 c2e:	b2 2e       	mov	r11, r18
 c30:	06 c0       	rjmp	.+12     	; 0xc3e <vfprintf+0x278>
 c32:	28 e0       	ldi	r18, 0x08	; 8
 c34:	30 e0       	ldi	r19, 0x00	; 0
 c36:	05 c0       	rjmp	.+10     	; 0xc42 <vfprintf+0x27c>
 c38:	20 e1       	ldi	r18, 0x10	; 16
 c3a:	30 e0       	ldi	r19, 0x00	; 0
 c3c:	02 c0       	rjmp	.+4      	; 0xc42 <vfprintf+0x27c>
 c3e:	20 e1       	ldi	r18, 0x10	; 16
 c40:	32 e0       	ldi	r19, 0x02	; 2
 c42:	f8 01       	movw	r30, r16
 c44:	b7 fe       	sbrs	r11, 7
 c46:	07 c0       	rjmp	.+14     	; 0xc56 <vfprintf+0x290>
 c48:	60 81       	ld	r22, Z
 c4a:	71 81       	ldd	r23, Z+1	; 0x01
 c4c:	82 81       	ldd	r24, Z+2	; 0x02
 c4e:	93 81       	ldd	r25, Z+3	; 0x03
 c50:	0c 5f       	subi	r16, 0xFC	; 252
 c52:	1f 4f       	sbci	r17, 0xFF	; 255
 c54:	06 c0       	rjmp	.+12     	; 0xc62 <vfprintf+0x29c>
 c56:	60 81       	ld	r22, Z
 c58:	71 81       	ldd	r23, Z+1	; 0x01
 c5a:	80 e0       	ldi	r24, 0x00	; 0
 c5c:	90 e0       	ldi	r25, 0x00	; 0
 c5e:	0e 5f       	subi	r16, 0xFE	; 254
 c60:	1f 4f       	sbci	r17, 0xFF	; 255
 c62:	a3 01       	movw	r20, r6
 c64:	0e 94 16 07 	call	0xe2c	; 0xe2c <__ultoa_invert>
 c68:	88 2e       	mov	r8, r24
 c6a:	86 18       	sub	r8, r6
 c6c:	fb 2d       	mov	r31, r11
 c6e:	ff 77       	andi	r31, 0x7F	; 127
 c70:	3f 2e       	mov	r3, r31
 c72:	36 fe       	sbrs	r3, 6
 c74:	0d c0       	rjmp	.+26     	; 0xc90 <vfprintf+0x2ca>
 c76:	23 2d       	mov	r18, r3
 c78:	2e 7f       	andi	r18, 0xFE	; 254
 c7a:	a2 2e       	mov	r10, r18
 c7c:	89 14       	cp	r8, r9
 c7e:	58 f4       	brcc	.+22     	; 0xc96 <vfprintf+0x2d0>
 c80:	34 fe       	sbrs	r3, 4
 c82:	0b c0       	rjmp	.+22     	; 0xc9a <vfprintf+0x2d4>
 c84:	32 fc       	sbrc	r3, 2
 c86:	09 c0       	rjmp	.+18     	; 0xc9a <vfprintf+0x2d4>
 c88:	83 2d       	mov	r24, r3
 c8a:	8e 7e       	andi	r24, 0xEE	; 238
 c8c:	a8 2e       	mov	r10, r24
 c8e:	05 c0       	rjmp	.+10     	; 0xc9a <vfprintf+0x2d4>
 c90:	b8 2c       	mov	r11, r8
 c92:	a3 2c       	mov	r10, r3
 c94:	03 c0       	rjmp	.+6      	; 0xc9c <vfprintf+0x2d6>
 c96:	b8 2c       	mov	r11, r8
 c98:	01 c0       	rjmp	.+2      	; 0xc9c <vfprintf+0x2d6>
 c9a:	b9 2c       	mov	r11, r9
 c9c:	a4 fe       	sbrs	r10, 4
 c9e:	0f c0       	rjmp	.+30     	; 0xcbe <vfprintf+0x2f8>
 ca0:	fe 01       	movw	r30, r28
 ca2:	e8 0d       	add	r30, r8
 ca4:	f1 1d       	adc	r31, r1
 ca6:	80 81       	ld	r24, Z
 ca8:	80 33       	cpi	r24, 0x30	; 48
 caa:	21 f4       	brne	.+8      	; 0xcb4 <vfprintf+0x2ee>
 cac:	9a 2d       	mov	r25, r10
 cae:	99 7e       	andi	r25, 0xE9	; 233
 cb0:	a9 2e       	mov	r10, r25
 cb2:	09 c0       	rjmp	.+18     	; 0xcc6 <vfprintf+0x300>
 cb4:	a2 fe       	sbrs	r10, 2
 cb6:	06 c0       	rjmp	.+12     	; 0xcc4 <vfprintf+0x2fe>
 cb8:	b3 94       	inc	r11
 cba:	b3 94       	inc	r11
 cbc:	04 c0       	rjmp	.+8      	; 0xcc6 <vfprintf+0x300>
 cbe:	8a 2d       	mov	r24, r10
 cc0:	86 78       	andi	r24, 0x86	; 134
 cc2:	09 f0       	breq	.+2      	; 0xcc6 <vfprintf+0x300>
 cc4:	b3 94       	inc	r11
 cc6:	a3 fc       	sbrc	r10, 3
 cc8:	11 c0       	rjmp	.+34     	; 0xcec <vfprintf+0x326>
 cca:	a0 fe       	sbrs	r10, 0
 ccc:	06 c0       	rjmp	.+12     	; 0xcda <vfprintf+0x314>
 cce:	b2 14       	cp	r11, r2
 cd0:	88 f4       	brcc	.+34     	; 0xcf4 <vfprintf+0x32e>
 cd2:	28 0c       	add	r2, r8
 cd4:	92 2c       	mov	r9, r2
 cd6:	9b 18       	sub	r9, r11
 cd8:	0e c0       	rjmp	.+28     	; 0xcf6 <vfprintf+0x330>
 cda:	b2 14       	cp	r11, r2
 cdc:	60 f4       	brcc	.+24     	; 0xcf6 <vfprintf+0x330>
 cde:	b6 01       	movw	r22, r12
 ce0:	80 e2       	ldi	r24, 0x20	; 32
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	0e 94 da 06 	call	0xdb4	; 0xdb4 <fputc>
 ce8:	b3 94       	inc	r11
 cea:	f7 cf       	rjmp	.-18     	; 0xcda <vfprintf+0x314>
 cec:	b2 14       	cp	r11, r2
 cee:	18 f4       	brcc	.+6      	; 0xcf6 <vfprintf+0x330>
 cf0:	2b 18       	sub	r2, r11
 cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <vfprintf+0x332>
 cf4:	98 2c       	mov	r9, r8
 cf6:	21 2c       	mov	r2, r1
 cf8:	a4 fe       	sbrs	r10, 4
 cfa:	10 c0       	rjmp	.+32     	; 0xd1c <vfprintf+0x356>
 cfc:	b6 01       	movw	r22, r12
 cfe:	80 e3       	ldi	r24, 0x30	; 48
 d00:	90 e0       	ldi	r25, 0x00	; 0
 d02:	0e 94 da 06 	call	0xdb4	; 0xdb4 <fputc>
 d06:	a2 fe       	sbrs	r10, 2
 d08:	17 c0       	rjmp	.+46     	; 0xd38 <vfprintf+0x372>
 d0a:	a1 fc       	sbrc	r10, 1
 d0c:	03 c0       	rjmp	.+6      	; 0xd14 <vfprintf+0x34e>
 d0e:	88 e7       	ldi	r24, 0x78	; 120
 d10:	90 e0       	ldi	r25, 0x00	; 0
 d12:	02 c0       	rjmp	.+4      	; 0xd18 <vfprintf+0x352>
 d14:	88 e5       	ldi	r24, 0x58	; 88
 d16:	90 e0       	ldi	r25, 0x00	; 0
 d18:	b6 01       	movw	r22, r12
 d1a:	0c c0       	rjmp	.+24     	; 0xd34 <vfprintf+0x36e>
 d1c:	8a 2d       	mov	r24, r10
 d1e:	86 78       	andi	r24, 0x86	; 134
 d20:	59 f0       	breq	.+22     	; 0xd38 <vfprintf+0x372>
 d22:	a1 fe       	sbrs	r10, 1
 d24:	02 c0       	rjmp	.+4      	; 0xd2a <vfprintf+0x364>
 d26:	8b e2       	ldi	r24, 0x2B	; 43
 d28:	01 c0       	rjmp	.+2      	; 0xd2c <vfprintf+0x366>
 d2a:	80 e2       	ldi	r24, 0x20	; 32
 d2c:	a7 fc       	sbrc	r10, 7
 d2e:	8d e2       	ldi	r24, 0x2D	; 45
 d30:	b6 01       	movw	r22, r12
 d32:	90 e0       	ldi	r25, 0x00	; 0
 d34:	0e 94 da 06 	call	0xdb4	; 0xdb4 <fputc>
 d38:	89 14       	cp	r8, r9
 d3a:	38 f4       	brcc	.+14     	; 0xd4a <vfprintf+0x384>
 d3c:	b6 01       	movw	r22, r12
 d3e:	80 e3       	ldi	r24, 0x30	; 48
 d40:	90 e0       	ldi	r25, 0x00	; 0
 d42:	0e 94 da 06 	call	0xdb4	; 0xdb4 <fputc>
 d46:	9a 94       	dec	r9
 d48:	f7 cf       	rjmp	.-18     	; 0xd38 <vfprintf+0x372>
 d4a:	8a 94       	dec	r8
 d4c:	f3 01       	movw	r30, r6
 d4e:	e8 0d       	add	r30, r8
 d50:	f1 1d       	adc	r31, r1
 d52:	80 81       	ld	r24, Z
 d54:	b6 01       	movw	r22, r12
 d56:	90 e0       	ldi	r25, 0x00	; 0
 d58:	0e 94 da 06 	call	0xdb4	; 0xdb4 <fputc>
 d5c:	81 10       	cpse	r8, r1
 d5e:	f5 cf       	rjmp	.-22     	; 0xd4a <vfprintf+0x384>
 d60:	22 20       	and	r2, r2
 d62:	09 f4       	brne	.+2      	; 0xd66 <vfprintf+0x3a0>
 d64:	42 ce       	rjmp	.-892    	; 0x9ea <vfprintf+0x24>
 d66:	b6 01       	movw	r22, r12
 d68:	80 e2       	ldi	r24, 0x20	; 32
 d6a:	90 e0       	ldi	r25, 0x00	; 0
 d6c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <fputc>
 d70:	2a 94       	dec	r2
 d72:	f6 cf       	rjmp	.-20     	; 0xd60 <vfprintf+0x39a>
 d74:	f6 01       	movw	r30, r12
 d76:	86 81       	ldd	r24, Z+6	; 0x06
 d78:	97 81       	ldd	r25, Z+7	; 0x07
 d7a:	02 c0       	rjmp	.+4      	; 0xd80 <vfprintf+0x3ba>
 d7c:	8f ef       	ldi	r24, 0xFF	; 255
 d7e:	9f ef       	ldi	r25, 0xFF	; 255
 d80:	2b 96       	adiw	r28, 0x0b	; 11
 d82:	e2 e1       	ldi	r30, 0x12	; 18
 d84:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__epilogue_restores__>

00000d88 <strnlen_P>:
 d88:	fc 01       	movw	r30, r24
 d8a:	05 90       	lpm	r0, Z+
 d8c:	61 50       	subi	r22, 0x01	; 1
 d8e:	70 40       	sbci	r23, 0x00	; 0
 d90:	01 10       	cpse	r0, r1
 d92:	d8 f7       	brcc	.-10     	; 0xd8a <strnlen_P+0x2>
 d94:	80 95       	com	r24
 d96:	90 95       	com	r25
 d98:	8e 0f       	add	r24, r30
 d9a:	9f 1f       	adc	r25, r31
 d9c:	08 95       	ret

00000d9e <strnlen>:
 d9e:	fc 01       	movw	r30, r24
 da0:	61 50       	subi	r22, 0x01	; 1
 da2:	70 40       	sbci	r23, 0x00	; 0
 da4:	01 90       	ld	r0, Z+
 da6:	01 10       	cpse	r0, r1
 da8:	d8 f7       	brcc	.-10     	; 0xda0 <strnlen+0x2>
 daa:	80 95       	com	r24
 dac:	90 95       	com	r25
 dae:	8e 0f       	add	r24, r30
 db0:	9f 1f       	adc	r25, r31
 db2:	08 95       	ret

00000db4 <fputc>:
 db4:	0f 93       	push	r16
 db6:	1f 93       	push	r17
 db8:	cf 93       	push	r28
 dba:	df 93       	push	r29
 dbc:	fb 01       	movw	r30, r22
 dbe:	23 81       	ldd	r18, Z+3	; 0x03
 dc0:	21 fd       	sbrc	r18, 1
 dc2:	03 c0       	rjmp	.+6      	; 0xdca <fputc+0x16>
 dc4:	8f ef       	ldi	r24, 0xFF	; 255
 dc6:	9f ef       	ldi	r25, 0xFF	; 255
 dc8:	2c c0       	rjmp	.+88     	; 0xe22 <fputc+0x6e>
 dca:	22 ff       	sbrs	r18, 2
 dcc:	16 c0       	rjmp	.+44     	; 0xdfa <fputc+0x46>
 dce:	46 81       	ldd	r20, Z+6	; 0x06
 dd0:	57 81       	ldd	r21, Z+7	; 0x07
 dd2:	24 81       	ldd	r18, Z+4	; 0x04
 dd4:	35 81       	ldd	r19, Z+5	; 0x05
 dd6:	42 17       	cp	r20, r18
 dd8:	53 07       	cpc	r21, r19
 dda:	44 f4       	brge	.+16     	; 0xdec <fputc+0x38>
 ddc:	a0 81       	ld	r26, Z
 dde:	b1 81       	ldd	r27, Z+1	; 0x01
 de0:	9d 01       	movw	r18, r26
 de2:	2f 5f       	subi	r18, 0xFF	; 255
 de4:	3f 4f       	sbci	r19, 0xFF	; 255
 de6:	31 83       	std	Z+1, r19	; 0x01
 de8:	20 83       	st	Z, r18
 dea:	8c 93       	st	X, r24
 dec:	26 81       	ldd	r18, Z+6	; 0x06
 dee:	37 81       	ldd	r19, Z+7	; 0x07
 df0:	2f 5f       	subi	r18, 0xFF	; 255
 df2:	3f 4f       	sbci	r19, 0xFF	; 255
 df4:	37 83       	std	Z+7, r19	; 0x07
 df6:	26 83       	std	Z+6, r18	; 0x06
 df8:	14 c0       	rjmp	.+40     	; 0xe22 <fputc+0x6e>
 dfa:	8b 01       	movw	r16, r22
 dfc:	ec 01       	movw	r28, r24
 dfe:	fb 01       	movw	r30, r22
 e00:	00 84       	ldd	r0, Z+8	; 0x08
 e02:	f1 85       	ldd	r31, Z+9	; 0x09
 e04:	e0 2d       	mov	r30, r0
 e06:	09 95       	icall
 e08:	89 2b       	or	r24, r25
 e0a:	e1 f6       	brne	.-72     	; 0xdc4 <fputc+0x10>
 e0c:	d8 01       	movw	r26, r16
 e0e:	16 96       	adiw	r26, 0x06	; 6
 e10:	8d 91       	ld	r24, X+
 e12:	9c 91       	ld	r25, X
 e14:	17 97       	sbiw	r26, 0x07	; 7
 e16:	01 96       	adiw	r24, 0x01	; 1
 e18:	17 96       	adiw	r26, 0x07	; 7
 e1a:	9c 93       	st	X, r25
 e1c:	8e 93       	st	-X, r24
 e1e:	16 97       	sbiw	r26, 0x06	; 6
 e20:	ce 01       	movw	r24, r28
 e22:	df 91       	pop	r29
 e24:	cf 91       	pop	r28
 e26:	1f 91       	pop	r17
 e28:	0f 91       	pop	r16
 e2a:	08 95       	ret

00000e2c <__ultoa_invert>:
 e2c:	fa 01       	movw	r30, r20
 e2e:	aa 27       	eor	r26, r26
 e30:	28 30       	cpi	r18, 0x08	; 8
 e32:	51 f1       	breq	.+84     	; 0xe88 <__ultoa_invert+0x5c>
 e34:	20 31       	cpi	r18, 0x10	; 16
 e36:	81 f1       	breq	.+96     	; 0xe98 <__ultoa_invert+0x6c>
 e38:	e8 94       	clt
 e3a:	6f 93       	push	r22
 e3c:	6e 7f       	andi	r22, 0xFE	; 254
 e3e:	6e 5f       	subi	r22, 0xFE	; 254
 e40:	7f 4f       	sbci	r23, 0xFF	; 255
 e42:	8f 4f       	sbci	r24, 0xFF	; 255
 e44:	9f 4f       	sbci	r25, 0xFF	; 255
 e46:	af 4f       	sbci	r26, 0xFF	; 255
 e48:	b1 e0       	ldi	r27, 0x01	; 1
 e4a:	3e d0       	rcall	.+124    	; 0xec8 <__ultoa_invert+0x9c>
 e4c:	b4 e0       	ldi	r27, 0x04	; 4
 e4e:	3c d0       	rcall	.+120    	; 0xec8 <__ultoa_invert+0x9c>
 e50:	67 0f       	add	r22, r23
 e52:	78 1f       	adc	r23, r24
 e54:	89 1f       	adc	r24, r25
 e56:	9a 1f       	adc	r25, r26
 e58:	a1 1d       	adc	r26, r1
 e5a:	68 0f       	add	r22, r24
 e5c:	79 1f       	adc	r23, r25
 e5e:	8a 1f       	adc	r24, r26
 e60:	91 1d       	adc	r25, r1
 e62:	a1 1d       	adc	r26, r1
 e64:	6a 0f       	add	r22, r26
 e66:	71 1d       	adc	r23, r1
 e68:	81 1d       	adc	r24, r1
 e6a:	91 1d       	adc	r25, r1
 e6c:	a1 1d       	adc	r26, r1
 e6e:	20 d0       	rcall	.+64     	; 0xeb0 <__ultoa_invert+0x84>
 e70:	09 f4       	brne	.+2      	; 0xe74 <__ultoa_invert+0x48>
 e72:	68 94       	set
 e74:	3f 91       	pop	r19
 e76:	2a e0       	ldi	r18, 0x0A	; 10
 e78:	26 9f       	mul	r18, r22
 e7a:	11 24       	eor	r1, r1
 e7c:	30 19       	sub	r19, r0
 e7e:	30 5d       	subi	r19, 0xD0	; 208
 e80:	31 93       	st	Z+, r19
 e82:	de f6       	brtc	.-74     	; 0xe3a <__ultoa_invert+0xe>
 e84:	cf 01       	movw	r24, r30
 e86:	08 95       	ret
 e88:	46 2f       	mov	r20, r22
 e8a:	47 70       	andi	r20, 0x07	; 7
 e8c:	40 5d       	subi	r20, 0xD0	; 208
 e8e:	41 93       	st	Z+, r20
 e90:	b3 e0       	ldi	r27, 0x03	; 3
 e92:	0f d0       	rcall	.+30     	; 0xeb2 <__ultoa_invert+0x86>
 e94:	c9 f7       	brne	.-14     	; 0xe88 <__ultoa_invert+0x5c>
 e96:	f6 cf       	rjmp	.-20     	; 0xe84 <__ultoa_invert+0x58>
 e98:	46 2f       	mov	r20, r22
 e9a:	4f 70       	andi	r20, 0x0F	; 15
 e9c:	40 5d       	subi	r20, 0xD0	; 208
 e9e:	4a 33       	cpi	r20, 0x3A	; 58
 ea0:	18 f0       	brcs	.+6      	; 0xea8 <__ultoa_invert+0x7c>
 ea2:	49 5d       	subi	r20, 0xD9	; 217
 ea4:	31 fd       	sbrc	r19, 1
 ea6:	40 52       	subi	r20, 0x20	; 32
 ea8:	41 93       	st	Z+, r20
 eaa:	02 d0       	rcall	.+4      	; 0xeb0 <__ultoa_invert+0x84>
 eac:	a9 f7       	brne	.-22     	; 0xe98 <__ultoa_invert+0x6c>
 eae:	ea cf       	rjmp	.-44     	; 0xe84 <__ultoa_invert+0x58>
 eb0:	b4 e0       	ldi	r27, 0x04	; 4
 eb2:	a6 95       	lsr	r26
 eb4:	97 95       	ror	r25
 eb6:	87 95       	ror	r24
 eb8:	77 95       	ror	r23
 eba:	67 95       	ror	r22
 ebc:	ba 95       	dec	r27
 ebe:	c9 f7       	brne	.-14     	; 0xeb2 <__ultoa_invert+0x86>
 ec0:	00 97       	sbiw	r24, 0x00	; 0
 ec2:	61 05       	cpc	r22, r1
 ec4:	71 05       	cpc	r23, r1
 ec6:	08 95       	ret
 ec8:	9b 01       	movw	r18, r22
 eca:	ac 01       	movw	r20, r24
 ecc:	0a 2e       	mov	r0, r26
 ece:	06 94       	lsr	r0
 ed0:	57 95       	ror	r21
 ed2:	47 95       	ror	r20
 ed4:	37 95       	ror	r19
 ed6:	27 95       	ror	r18
 ed8:	ba 95       	dec	r27
 eda:	c9 f7       	brne	.-14     	; 0xece <__ultoa_invert+0xa2>
 edc:	62 0f       	add	r22, r18
 ede:	73 1f       	adc	r23, r19
 ee0:	84 1f       	adc	r24, r20
 ee2:	95 1f       	adc	r25, r21
 ee4:	a0 1d       	adc	r26, r0
 ee6:	08 95       	ret

00000ee8 <__prologue_saves__>:
 ee8:	2f 92       	push	r2
 eea:	3f 92       	push	r3
 eec:	4f 92       	push	r4
 eee:	5f 92       	push	r5
 ef0:	6f 92       	push	r6
 ef2:	7f 92       	push	r7
 ef4:	8f 92       	push	r8
 ef6:	9f 92       	push	r9
 ef8:	af 92       	push	r10
 efa:	bf 92       	push	r11
 efc:	cf 92       	push	r12
 efe:	df 92       	push	r13
 f00:	ef 92       	push	r14
 f02:	ff 92       	push	r15
 f04:	0f 93       	push	r16
 f06:	1f 93       	push	r17
 f08:	cf 93       	push	r28
 f0a:	df 93       	push	r29
 f0c:	cd b7       	in	r28, 0x3d	; 61
 f0e:	de b7       	in	r29, 0x3e	; 62
 f10:	ca 1b       	sub	r28, r26
 f12:	db 0b       	sbc	r29, r27
 f14:	0f b6       	in	r0, 0x3f	; 63
 f16:	f8 94       	cli
 f18:	de bf       	out	0x3e, r29	; 62
 f1a:	0f be       	out	0x3f, r0	; 63
 f1c:	cd bf       	out	0x3d, r28	; 61
 f1e:	09 94       	ijmp

00000f20 <__epilogue_restores__>:
 f20:	2a 88       	ldd	r2, Y+18	; 0x12
 f22:	39 88       	ldd	r3, Y+17	; 0x11
 f24:	48 88       	ldd	r4, Y+16	; 0x10
 f26:	5f 84       	ldd	r5, Y+15	; 0x0f
 f28:	6e 84       	ldd	r6, Y+14	; 0x0e
 f2a:	7d 84       	ldd	r7, Y+13	; 0x0d
 f2c:	8c 84       	ldd	r8, Y+12	; 0x0c
 f2e:	9b 84       	ldd	r9, Y+11	; 0x0b
 f30:	aa 84       	ldd	r10, Y+10	; 0x0a
 f32:	b9 84       	ldd	r11, Y+9	; 0x09
 f34:	c8 84       	ldd	r12, Y+8	; 0x08
 f36:	df 80       	ldd	r13, Y+7	; 0x07
 f38:	ee 80       	ldd	r14, Y+6	; 0x06
 f3a:	fd 80       	ldd	r15, Y+5	; 0x05
 f3c:	0c 81       	ldd	r16, Y+4	; 0x04
 f3e:	1b 81       	ldd	r17, Y+3	; 0x03
 f40:	aa 81       	ldd	r26, Y+2	; 0x02
 f42:	b9 81       	ldd	r27, Y+1	; 0x01
 f44:	ce 0f       	add	r28, r30
 f46:	d1 1d       	adc	r29, r1
 f48:	0f b6       	in	r0, 0x3f	; 63
 f4a:	f8 94       	cli
 f4c:	de bf       	out	0x3e, r29	; 62
 f4e:	0f be       	out	0x3f, r0	; 63
 f50:	cd bf       	out	0x3d, r28	; 61
 f52:	ed 01       	movw	r28, r26
 f54:	08 95       	ret

00000f56 <_exit>:
 f56:	f8 94       	cli

00000f58 <__stop_program>:
 f58:	ff cf       	rjmp	.-2      	; 0xf58 <__stop_program>
