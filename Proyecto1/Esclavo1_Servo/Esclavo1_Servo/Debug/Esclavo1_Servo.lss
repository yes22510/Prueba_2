
Esclavo1_Servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000008da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000866  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000008da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000090c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d9d  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b9  00000000  00000000  00001789  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000674  00000000  00000000  00002042  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  000026b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004eb  00000000  00000000  0000287c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000685  00000000  00000000  00002d67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000033ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 02 01 	call	0x204	; 0x204 <main>
  88:	0c 94 31 04 	jmp	0x862	; 0x862 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_Slave_Init>:
/*****************/
//Funcion para inicializar el esclavo
/*****************/

void I2C_Slave_Init(uint8_t adress){
	DDRC &= ~((1<<DDC4)|(1<<DDC5)); //PINES DE I2C COMO ENTRADAS
  90:	97 b1       	in	r25, 0x07	; 7
  92:	9f 7c       	andi	r25, 0xCF	; 207
  94:	97 b9       	out	0x07, r25	; 7
	
	//TWAR = adress << 1 & 0b00000010;// se asigna la direccion
	TWAR = (adress <<1| 0x01); //direccion y habilitar la llamada general
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	//se habilita la interfaz ACK automatico, se habilita la ISR
	TWCR = (1<<TWEA)|(1<<TWEN)|(1<<TWIE);
  a2:	85 e4       	ldi	r24, 0x45	; 69
  a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a8:	08 95       	ret

000000aa <__vector_24>:
volatile uint8_t dato = 0; // Variable global para almacenar datos recibidos
volatile uint8_t modoManual = 0; // Variable para indicar si estamos en modo manual

/**********************COMUNICACION I2C*********************************/
// Rutina de interrupción del TWI (I2C)
ISR(TWI_vect) {
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	8f 93       	push	r24
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
	uint8_t estado = TWSR & 0xF8;  // Lee los 3 bits superiores del registro de estado
  ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  be:	88 7f       	andi	r24, 0xF8	; 248

	switch (estado) {
  c0:	80 39       	cpi	r24, 0x90	; 144
  c2:	c9 f0       	breq	.+50     	; 0xf6 <__vector_24+0x4c>
  c4:	38 f4       	brcc	.+14     	; 0xd4 <__vector_24+0x2a>
  c6:	80 37       	cpi	r24, 0x70	; 112
  c8:	81 f0       	breq	.+32     	; 0xea <__vector_24+0x40>
  ca:	80 38       	cpi	r24, 0x80	; 128
  cc:	a1 f0       	breq	.+40     	; 0xf6 <__vector_24+0x4c>
  ce:	80 36       	cpi	r24, 0x60	; 96
  d0:	61 f5       	brne	.+88     	; 0x12a <__vector_24+0x80>
  d2:	0b c0       	rjmp	.+22     	; 0xea <__vector_24+0x40>
  d4:	88 3b       	cpi	r24, 0xB8	; 184
  d6:	c9 f0       	breq	.+50     	; 0x10a <__vector_24+0x60>
  d8:	18 f4       	brcc	.+6      	; 0xe0 <__vector_24+0x36>
  da:	88 3a       	cpi	r24, 0xA8	; 168
  dc:	b1 f0       	breq	.+44     	; 0x10a <__vector_24+0x60>
  de:	25 c0       	rjmp	.+74     	; 0x12a <__vector_24+0x80>
  e0:	80 3c       	cpi	r24, 0xC0	; 192
  e2:	e9 f0       	breq	.+58     	; 0x11e <__vector_24+0x74>
  e4:	88 3c       	cpi	r24, 0xC8	; 200
  e6:	d9 f0       	breq	.+54     	; 0x11e <__vector_24+0x74>
  e8:	20 c0       	rjmp	.+64     	; 0x12a <__vector_24+0x80>
		case 0x60: // SLA+W recibido, ACK enviado
		case 0x70: // SLA+W recibido en modo general, ACK enviado
		TWCR |= (1 << TWINT); // Borra el flag TWINT para continuar
  ea:	ec eb       	ldi	r30, 0xBC	; 188
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	80 83       	st	Z, r24
		break;
  f4:	1f c0       	rjmp	.+62     	; 0x134 <__vector_24+0x8a>

		case 0x80: // Datos recibidos, ACK enviado
		case 0x90: // Datos recibidos en llamada general, ACK enviado
		dato = TWDR;  // Lee el dato recibido del registro de datos
  f6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  fa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <dato>
		TWCR |= (1 << TWINT); // Borra el flag TWINT para continuar
  fe:	ec eb       	ldi	r30, 0xBC	; 188
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	80 68       	ori	r24, 0x80	; 128
 106:	80 83       	st	Z, r24
		break;
 108:	15 c0       	rjmp	.+42     	; 0x134 <__vector_24+0x8a>

		case 0xA8: // SLA+R recibido, ACK enviado
		case 0xB8: // Dato transmitido y ACK recibido
		TWDR = Abierto;  // Carga el valor en el registro de datos
 10a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Abierto>
 10e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR |= (1 << TWINT) | (1 << TWEA); // Borra el flag TWINT y habilita ACK para el próximo byte
 112:	ec eb       	ldi	r30, 0xBC	; 188
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	80 6c       	ori	r24, 0xC0	; 192
 11a:	80 83       	st	Z, r24
		break;
 11c:	0b c0       	rjmp	.+22     	; 0x134 <__vector_24+0x8a>

		case 0xC0: // Dato transmitido y NACK recibido
		case 0xC8: // Último dato transmitido y ACK recibido
		TWCR |= (1 << TWINT) | (1 << TWEA); // Borra el flag TWINT y habilita ACK para el próximo byte
 11e:	ec eb       	ldi	r30, 0xBC	; 188
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	80 6c       	ori	r24, 0xC0	; 192
 126:	80 83       	st	Z, r24
		break;
 128:	05 c0       	rjmp	.+10     	; 0x134 <__vector_24+0x8a>

		default: // Manejo de errores
		TWCR |= (1 << TWINT) | (1 << TWSTO); // Borra el flag TWINT y envía una condición de STOP
 12a:	ec eb       	ldi	r30, 0xBC	; 188
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 69       	ori	r24, 0x90	; 144
 132:	80 83       	st	Z, r24
		break;
	}
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <initUltrasonicSensor1>:

void initUltrasonicSensor1() {
    DDRD |= (1 << TRIG_PIN1);
 144:	8a b1       	in	r24, 0x0a	; 10
 146:	84 60       	ori	r24, 0x04	; 4
 148:	8a b9       	out	0x0a, r24	; 10
    DDRD &= ~(1 << ECHO_PIN1);
 14a:	8a b1       	in	r24, 0x0a	; 10
 14c:	87 7f       	andi	r24, 0xF7	; 247
 14e:	8a b9       	out	0x0a, r24	; 10
 150:	08 95       	ret

00000152 <initUltrasonicSensor2>:
}

void initUltrasonicSensor2() {
    DDRD |= (1 << TRIG_PIN2);  // Configura TRIG_PIN2 como salida
 152:	8a b1       	in	r24, 0x0a	; 10
 154:	80 61       	ori	r24, 0x10	; 16
 156:	8a b9       	out	0x0a, r24	; 10
    DDRD &= ~(1 << ECHO_PIN2); // Configura ECHO_PIN2 como entrada
 158:	8a b1       	in	r24, 0x0a	; 10
 15a:	8f 7d       	andi	r24, 0xDF	; 223
 15c:	8a b9       	out	0x0a, r24	; 10
 15e:	08 95       	ret

00000160 <getDistance1>:
}

uint16_t getDistance1() {
    PORTD &= ~(1 << TRIG_PIN1);
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	8b 7f       	andi	r24, 0xFB	; 251
 164:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	8a e0       	ldi	r24, 0x0A	; 10
 168:	8a 95       	dec	r24
 16a:	f1 f7       	brne	.-4      	; 0x168 <getDistance1+0x8>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <getDistance1+0xe>
    _delay_us(2);
    PORTD |= (1 << TRIG_PIN1);
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	84 60       	ori	r24, 0x04	; 4
 172:	8b b9       	out	0x0b, r24	; 11
 174:	85 e3       	ldi	r24, 0x35	; 53
 176:	8a 95       	dec	r24
 178:	f1 f7       	brne	.-4      	; 0x176 <getDistance1+0x16>
 17a:	00 00       	nop
    _delay_us(10);
    PORTD &= ~(1 << TRIG_PIN1);
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	8b 7f       	andi	r24, 0xFB	; 251
 180:	8b b9       	out	0x0b, r24	; 11

    while (!(PIND & (1 << ECHO_PIN1)));
 182:	4b 9b       	sbis	0x09, 3	; 9
 184:	fe cf       	rjmp	.-4      	; 0x182 <getDistance1+0x22>
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	06 c0       	rjmp	.+12     	; 0x198 <getDistance1+0x38>

    uint16_t pulse_width = 0;
    while (PIND & (1 << ECHO_PIN1)) {
        pulse_width++;
 18c:	2f 5f       	subi	r18, 0xFF	; 255
 18e:	3f 4f       	sbci	r19, 0xFF	; 255
 190:	85 e0       	ldi	r24, 0x05	; 5
 192:	8a 95       	dec	r24
 194:	f1 f7       	brne	.-4      	; 0x192 <getDistance1+0x32>
 196:	00 00       	nop
    PORTD &= ~(1 << TRIG_PIN1);

    while (!(PIND & (1 << ECHO_PIN1)));

    uint16_t pulse_width = 0;
    while (PIND & (1 << ECHO_PIN1)) {
 198:	4b 99       	sbic	0x09, 3	; 9
 19a:	f8 cf       	rjmp	.-16     	; 0x18c <getDistance1+0x2c>
        pulse_width++;
        _delay_us(1);
    }

    uint16_t distance = pulse_width / 58;
 19c:	af e9       	ldi	r26, 0x9F	; 159
 19e:	b6 e4       	ldi	r27, 0x46	; 70
 1a0:	0e 94 22 04 	call	0x844	; 0x844 <__umulhisi3>
    return distance;
}
 1a4:	92 95       	swap	r25
 1a6:	82 95       	swap	r24
 1a8:	8f 70       	andi	r24, 0x0F	; 15
 1aa:	89 27       	eor	r24, r25
 1ac:	9f 70       	andi	r25, 0x0F	; 15
 1ae:	89 27       	eor	r24, r25
 1b0:	08 95       	ret

000001b2 <getDistance2>:

uint16_t getDistance2() {
    PORTD &= ~(1 << TRIG_PIN2);
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	8f 7e       	andi	r24, 0xEF	; 239
 1b6:	8b b9       	out	0x0b, r24	; 11
 1b8:	8a e0       	ldi	r24, 0x0A	; 10
 1ba:	8a 95       	dec	r24
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <getDistance2+0x8>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <getDistance2+0xe>
    _delay_us(2);
    PORTD |= (1 << TRIG_PIN2);
 1c0:	8b b1       	in	r24, 0x0b	; 11
 1c2:	80 61       	ori	r24, 0x10	; 16
 1c4:	8b b9       	out	0x0b, r24	; 11
 1c6:	85 e3       	ldi	r24, 0x35	; 53
 1c8:	8a 95       	dec	r24
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <getDistance2+0x16>
 1cc:	00 00       	nop
    _delay_us(10);
    PORTD &= ~(1 << TRIG_PIN2);
 1ce:	8b b1       	in	r24, 0x0b	; 11
 1d0:	8f 7e       	andi	r24, 0xEF	; 239
 1d2:	8b b9       	out	0x0b, r24	; 11

    while (!(PIND & (1 << ECHO_PIN2)));
 1d4:	4d 9b       	sbis	0x09, 5	; 9
 1d6:	fe cf       	rjmp	.-4      	; 0x1d4 <getDistance2+0x22>
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	06 c0       	rjmp	.+12     	; 0x1ea <getDistance2+0x38>

    uint16_t pulse_width = 0;
    while (PIND & (1 << ECHO_PIN2)) {
        pulse_width++;
 1de:	2f 5f       	subi	r18, 0xFF	; 255
 1e0:	3f 4f       	sbci	r19, 0xFF	; 255
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	8a 95       	dec	r24
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <getDistance2+0x32>
 1e8:	00 00       	nop
    PORTD &= ~(1 << TRIG_PIN2);

    while (!(PIND & (1 << ECHO_PIN2)));

    uint16_t pulse_width = 0;
    while (PIND & (1 << ECHO_PIN2)) {
 1ea:	4d 99       	sbic	0x09, 5	; 9
 1ec:	f8 cf       	rjmp	.-16     	; 0x1de <getDistance2+0x2c>
        pulse_width++;
        _delay_us(1);
    }

    uint16_t distance = pulse_width / 58;
 1ee:	af e9       	ldi	r26, 0x9F	; 159
 1f0:	b6 e4       	ldi	r27, 0x46	; 70
 1f2:	0e 94 22 04 	call	0x844	; 0x844 <__umulhisi3>
    return distance;
}
 1f6:	92 95       	swap	r25
 1f8:	82 95       	swap	r24
 1fa:	8f 70       	andi	r24, 0x0F	; 15
 1fc:	89 27       	eor	r24, r25
 1fe:	9f 70       	andi	r25, 0x0F	; 15
 200:	89 27       	eor	r24, r25
 202:	08 95       	ret

00000204 <main>:

int main(void) {
    // Configurar los pines de los LEDs como salida (A0, A1 y A2 corresponden a PC0, PC1 y PC2)
    DDRC |= (1 << LED_PIN1) | (1 << LED_PIN2) | (1 << MODE_LED_PIN);
 204:	87 b1       	in	r24, 0x07	; 7
 206:	87 60       	ori	r24, 0x07	; 7
 208:	87 b9       	out	0x07, r24	; 7
    // Configurar los pines de PWM como salida (PB1 y PB2)
    DDRB |= (1 << SERVO_PIN1) | (1 << SERVO_PIN2);
 20a:	84 b1       	in	r24, 0x04	; 4
 20c:	86 60       	ori	r24, 0x06	; 6
 20e:	84 b9       	out	0x04, r24	; 4

    // Inicializar sensores ultrasónicos
    initUltrasonicSensor1();
 210:	0e 94 a2 00 	call	0x144	; 0x144 <initUltrasonicSensor1>
    initUltrasonicSensor2();
 214:	0e 94 a9 00 	call	0x152	; 0x152 <initUltrasonicSensor2>

    // Inicializar PWM para los servos
    PWM_init();
 218:	0e 94 77 01 	call	0x2ee	; 0x2ee <PWM_init>

    // Inicializar I2C como esclavo
    I2C_Slave_Init(SLAVE_ADDR);
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 48 00 	call	0x90	; 0x90 <I2C_Slave_Init>

    sei();  // Habilitar interrupciones globales
 222:	78 94       	sei

    while (1) {
        uint16_t distance1 = getDistance1();
 224:	0e 94 b0 00 	call	0x160	; 0x160 <getDistance1>
 228:	ec 01       	movw	r28, r24
        uint16_t distance2 = getDistance2();
 22a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <getDistance2>
 22e:	9c 01       	movw	r18, r24

        // Verificación del modo basado en `dato`
        if (dato == 'A') {
 230:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <dato>
 234:	91 34       	cpi	r25, 0x41	; 65
 236:	39 f4       	brne	.+14     	; 0x246 <main+0x42>
            modoManual = 1;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
            PORTC |= (1 << MODE_LED_PIN);  // Enciende el LED de modo manual
 23e:	88 b1       	in	r24, 0x08	; 8
 240:	84 60       	ori	r24, 0x04	; 4
 242:	88 b9       	out	0x08, r24	; 8
 244:	09 c0       	rjmp	.+18     	; 0x258 <main+0x54>
        } else if (dato == 'B') {
 246:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <dato>
 24a:	82 34       	cpi	r24, 0x42	; 66
 24c:	29 f4       	brne	.+10     	; 0x258 <main+0x54>
            modoManual = 0;
 24e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
            PORTC &= ~(1 << MODE_LED_PIN);  // Apaga el LED de modo manual (modo automático activo)
 252:	88 b1       	in	r24, 0x08	; 8
 254:	8b 7f       	andi	r24, 0xFB	; 251
 256:	88 b9       	out	0x08, r24	; 8
        }

        // Control del primer LED y enviar señal al maestro
        if (distance1 <= 5) {
 258:	26 97       	sbiw	r28, 0x06	; 6
 25a:	38 f4       	brcc	.+14     	; 0x26a <main+0x66>
			Abierto = 1;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Abierto>
            PORTC |= (1 << LED_PIN1);  // Enciende LED1 (A0)
 262:	98 b1       	in	r25, 0x08	; 8
 264:	91 60       	ori	r25, 0x01	; 1
 266:	98 b9       	out	0x08, r25	; 8
 268:	05 c0       	rjmp	.+10     	; 0x274 <main+0x70>
        } else {
			Abierto = 0;
 26a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <Abierto>
            PORTC &= ~(1 << LED_PIN1);  // Apaga LED1 (A0)
 26e:	98 b1       	in	r25, 0x08	; 8
 270:	9e 7f       	andi	r25, 0xFE	; 254
 272:	98 b9       	out	0x08, r25	; 8
        }

        if (modoManual == 1) {
 274:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 278:	91 30       	cpi	r25, 0x01	; 1
 27a:	51 f4       	brne	.+20     	; 0x290 <main+0x8c>
            // ** Modo Manual **: Control por Adafruit
            PORTC |= (1 << LED_PIN2);  // Enciende LED2 (A1)
 27c:	88 b1       	in	r24, 0x08	; 8
 27e:	82 60       	ori	r24, 0x02	; 2
 280:	88 b9       	out	0x08, r24	; 8
            servo_writeB(100);  // Mover el segundo servo a 90 grados (PB2)
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	88 ec       	ldi	r24, 0xC8	; 200
 288:	92 e4       	ldi	r25, 0x42	; 66
 28a:	0e 94 24 02 	call	0x448	; 0x448 <servo_writeB>
 28e:	16 c0       	rjmp	.+44     	; 0x2bc <main+0xb8>
        } else {
            // ** Modo Automático **: Control por sensor ultrasónico
            if (distance2 <= 5) {
 290:	26 30       	cpi	r18, 0x06	; 6
 292:	31 05       	cpc	r19, r1
 294:	50 f4       	brcc	.+20     	; 0x2aa <main+0xa6>
                PORTC |= (1 << LED_PIN2);  // Enciende LED2 (A1)
 296:	88 b1       	in	r24, 0x08	; 8
 298:	82 60       	ori	r24, 0x02	; 2
 29a:	88 b9       	out	0x08, r24	; 8
                servo_writeB(100);  // Mover el segundo servo a 90 grados (PB2)
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	88 ec       	ldi	r24, 0xC8	; 200
 2a2:	92 e4       	ldi	r25, 0x42	; 66
 2a4:	0e 94 24 02 	call	0x448	; 0x448 <servo_writeB>
 2a8:	09 c0       	rjmp	.+18     	; 0x2bc <main+0xb8>
            } else {
                PORTC &= ~(1 << LED_PIN2);  // Apaga LED2 (A1)
 2aa:	88 b1       	in	r24, 0x08	; 8
 2ac:	8d 7f       	andi	r24, 0xFD	; 253
 2ae:	88 b9       	out	0x08, r24	; 8
                servo_writeB(700);  // Mover el segundo servo a 0 grados (PB2)
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	8f e2       	ldi	r24, 0x2F	; 47
 2b6:	94 e4       	ldi	r25, 0x44	; 68
 2b8:	0e 94 24 02 	call	0x448	; 0x448 <servo_writeB>
            }
        }

        // Movimiento del primer servo basado en el estado del LED1
        if (PORTC & (1 << LED_PIN1)) {
 2bc:	40 9b       	sbis	0x08, 0	; 8
 2be:	07 c0       	rjmp	.+14     	; 0x2ce <main+0xca>
            servo_writeA(700);  // Mover el primer servo a 90 grados (PB1)
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	8f e2       	ldi	r24, 0x2F	; 47
 2c6:	94 e4       	ldi	r25, 0x44	; 68
 2c8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <servo_writeA>
 2cc:	06 c0       	rjmp	.+12     	; 0x2da <main+0xd6>
        } else {
            servo_writeA(100);  // Mover el primer servo a 0 grados (PB1)
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	88 ec       	ldi	r24, 0xC8	; 200
 2d4:	92 e4       	ldi	r25, 0x42	; 66
 2d6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <servo_writeA>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2da:	2f ef       	ldi	r18, 0xFF	; 255
 2dc:	89 e6       	ldi	r24, 0x69	; 105
 2de:	98 e1       	ldi	r25, 0x18	; 24
 2e0:	21 50       	subi	r18, 0x01	; 1
 2e2:	80 40       	sbci	r24, 0x00	; 0
 2e4:	90 40       	sbci	r25, 0x00	; 0
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <main+0xdc>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <main+0xe6>
 2ea:	00 00       	nop
 2ec:	9b cf       	rjmp	.-202    	; 0x224 <main+0x20>

000002ee <PWM_init>:
#include "ServoControl.h"

void PWM_init(void){
	// PB1 | PB2
	DDRB |= ( 1<< PB1 )|(1<<PB2);
 2ee:	84 b1       	in	r24, 0x04	; 4
 2f0:	86 60       	ori	r24, 0x06	; 6
 2f2:	84 b9       	out	0x04, r24	; 4
	TCNT1 = 0; // reset
 2f4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 2f8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	ICR1 = 39999; // TOP
 2fc:	8f e3       	ldi	r24, 0x3F	; 63
 2fe:	9c e9       	ldi	r25, 0x9C	; 156
 300:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 304:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	TCCR1A =  (1 << COM1A1) | (1 << COM1B1) | (0 << COM1A0) ; // low --> Compare Match
 308:	e0 e8       	ldi	r30, 0x80	; 128
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 ea       	ldi	r24, 0xA0	; 160
 30e:	80 83       	st	Z, r24
	TCCR1A |=  (1 << WGM11) | (0 << WGM10) ; // Fast PWM TOP ICR1
 310:	80 81       	ld	r24, Z
 312:	82 60       	ori	r24, 0x02	; 2
 314:	80 83       	st	Z, r24
	TCCR1B = (1 << WGM13) | (1 << WGM12); // Fast PWM TOP ICR1
 316:	e1 e8       	ldi	r30, 0x81	; 129
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	88 e1       	ldi	r24, 0x18	; 24
 31c:	80 83       	st	Z, r24
	TCCR1B |= (0 << CS12) | (1 << CS11) | ( 0 << CS10 ); // Prescaler 8
 31e:	80 81       	ld	r24, Z
 320:	82 60       	ori	r24, 0x02	; 2
 322:	80 83       	st	Z, r24
 324:	08 95       	ret

00000326 <map>:
	OCR1A = map(adc_Value, 0, 1024, 1000, 4800);
}
void servo_writeB(float adc_Value){
	OCR1B = map(adc_Value, 0, 1024, 1000, 4800);
}
float map(float x, float in_min, float in_max, float out_min, float out_max){
 326:	4f 92       	push	r4
 328:	5f 92       	push	r5
 32a:	6f 92       	push	r6
 32c:	7f 92       	push	r7
 32e:	af 92       	push	r10
 330:	bf 92       	push	r11
 332:	cf 92       	push	r12
 334:	df 92       	push	r13
 336:	ef 92       	push	r14
 338:	ff 92       	push	r15
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62
 346:	28 97       	sbiw	r28, 0x08	; 8
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	f8 94       	cli
 34c:	de bf       	out	0x3e, r29	; 62
 34e:	0f be       	out	0x3f, r0	; 63
 350:	cd bf       	out	0x3d, r28	; 61
 352:	29 01       	movw	r4, r18
 354:	3a 01       	movw	r6, r20
 356:	ed 82       	std	Y+5, r14	; 0x05
 358:	fe 82       	std	Y+6, r15	; 0x06
 35a:	0f 83       	std	Y+7, r16	; 0x07
 35c:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
 35e:	0e 94 56 02 	call	0x4ac	; 0x4ac <__subsf3>
 362:	69 83       	std	Y+1, r22	; 0x01
 364:	7a 83       	std	Y+2, r23	; 0x02
 366:	8b 83       	std	Y+3, r24	; 0x03
 368:	9c 83       	std	Y+4, r25	; 0x04
 36a:	a6 01       	movw	r20, r12
 36c:	95 01       	movw	r18, r10
 36e:	69 8d       	ldd	r22, Y+25	; 0x19
 370:	7a 8d       	ldd	r23, Y+26	; 0x1a
 372:	8b 8d       	ldd	r24, Y+27	; 0x1b
 374:	9c 8d       	ldd	r25, Y+28	; 0x1c
 376:	0e 94 56 02 	call	0x4ac	; 0x4ac <__subsf3>
 37a:	9b 01       	movw	r18, r22
 37c:	ac 01       	movw	r20, r24
 37e:	69 81       	ldd	r22, Y+1	; 0x01
 380:	7a 81       	ldd	r23, Y+2	; 0x02
 382:	8b 81       	ldd	r24, Y+3	; 0x03
 384:	9c 81       	ldd	r25, Y+4	; 0x04
 386:	0e 94 b5 03 	call	0x76a	; 0x76a <__mulsf3>
 38a:	69 83       	std	Y+1, r22	; 0x01
 38c:	7a 83       	std	Y+2, r23	; 0x02
 38e:	8b 83       	std	Y+3, r24	; 0x03
 390:	9c 83       	std	Y+4, r25	; 0x04
 392:	a3 01       	movw	r20, r6
 394:	92 01       	movw	r18, r4
 396:	c8 01       	movw	r24, r16
 398:	b7 01       	movw	r22, r14
 39a:	0e 94 56 02 	call	0x4ac	; 0x4ac <__subsf3>
 39e:	9b 01       	movw	r18, r22
 3a0:	ac 01       	movw	r20, r24
 3a2:	69 81       	ldd	r22, Y+1	; 0x01
 3a4:	7a 81       	ldd	r23, Y+2	; 0x02
 3a6:	8b 81       	ldd	r24, Y+3	; 0x03
 3a8:	9c 81       	ldd	r25, Y+4	; 0x04
 3aa:	0e 94 c3 02 	call	0x586	; 0x586 <__divsf3>
 3ae:	9b 01       	movw	r18, r22
 3b0:	ac 01       	movw	r20, r24
 3b2:	c6 01       	movw	r24, r12
 3b4:	b5 01       	movw	r22, r10
 3b6:	0e 94 57 02 	call	0x4ae	; 0x4ae <__addsf3>
}
 3ba:	28 96       	adiw	r28, 0x08	; 8
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	f8 94       	cli
 3c0:	de bf       	out	0x3e, r29	; 62
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	cd bf       	out	0x3d, r28	; 61
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	1f 91       	pop	r17
 3cc:	0f 91       	pop	r16
 3ce:	ff 90       	pop	r15
 3d0:	ef 90       	pop	r14
 3d2:	df 90       	pop	r13
 3d4:	cf 90       	pop	r12
 3d6:	bf 90       	pop	r11
 3d8:	af 90       	pop	r10
 3da:	7f 90       	pop	r7
 3dc:	6f 90       	pop	r6
 3de:	5f 90       	pop	r5
 3e0:	4f 90       	pop	r4
 3e2:	08 95       	ret

000003e4 <servo_writeA>:
	TCCR1A =  (1 << COM1A1) | (1 << COM1B1) | (0 << COM1A0) ; // low --> Compare Match
	TCCR1A |=  (1 << WGM11) | (0 << WGM10) ; // Fast PWM TOP ICR1
	TCCR1B = (1 << WGM13) | (1 << WGM12); // Fast PWM TOP ICR1
	TCCR1B |= (0 << CS12) | (1 << CS11) | ( 0 << CS10 ); // Prescaler 8
}
void servo_writeA(float adc_Value){
 3e4:	af 92       	push	r10
 3e6:	bf 92       	push	r11
 3e8:	cf 92       	push	r12
 3ea:	df 92       	push	r13
 3ec:	ef 92       	push	r14
 3ee:	ff 92       	push	r15
 3f0:	0f 93       	push	r16
 3f2:	1f 93       	push	r17
	OCR1A = map(adc_Value, 0, 1024, 1000, 4800);
 3f4:	25 e4       	ldi	r18, 0x45	; 69
 3f6:	2f 93       	push	r18
 3f8:	26 e9       	ldi	r18, 0x96	; 150
 3fa:	2f 93       	push	r18
 3fc:	1f 92       	push	r1
 3fe:	1f 92       	push	r1
 400:	0f 2e       	mov	r0, r31
 402:	a1 2c       	mov	r10, r1
 404:	b1 2c       	mov	r11, r1
 406:	fa e7       	ldi	r31, 0x7A	; 122
 408:	cf 2e       	mov	r12, r31
 40a:	f4 e4       	ldi	r31, 0x44	; 68
 40c:	df 2e       	mov	r13, r31
 40e:	f0 2d       	mov	r31, r0
 410:	e1 2c       	mov	r14, r1
 412:	f1 2c       	mov	r15, r1
 414:	00 e8       	ldi	r16, 0x80	; 128
 416:	14 e4       	ldi	r17, 0x44	; 68
 418:	20 e0       	ldi	r18, 0x00	; 0
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	a9 01       	movw	r20, r18
 41e:	0e 94 93 01 	call	0x326	; 0x326 <map>
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	0e 94 35 03 	call	0x66a	; 0x66a <__fixunssfsi>
 42e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 432:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 436:	1f 91       	pop	r17
 438:	0f 91       	pop	r16
 43a:	ff 90       	pop	r15
 43c:	ef 90       	pop	r14
 43e:	df 90       	pop	r13
 440:	cf 90       	pop	r12
 442:	bf 90       	pop	r11
 444:	af 90       	pop	r10
 446:	08 95       	ret

00000448 <servo_writeB>:
void servo_writeB(float adc_Value){
 448:	af 92       	push	r10
 44a:	bf 92       	push	r11
 44c:	cf 92       	push	r12
 44e:	df 92       	push	r13
 450:	ef 92       	push	r14
 452:	ff 92       	push	r15
 454:	0f 93       	push	r16
 456:	1f 93       	push	r17
	OCR1B = map(adc_Value, 0, 1024, 1000, 4800);
 458:	25 e4       	ldi	r18, 0x45	; 69
 45a:	2f 93       	push	r18
 45c:	26 e9       	ldi	r18, 0x96	; 150
 45e:	2f 93       	push	r18
 460:	1f 92       	push	r1
 462:	1f 92       	push	r1
 464:	0f 2e       	mov	r0, r31
 466:	a1 2c       	mov	r10, r1
 468:	b1 2c       	mov	r11, r1
 46a:	fa e7       	ldi	r31, 0x7A	; 122
 46c:	cf 2e       	mov	r12, r31
 46e:	f4 e4       	ldi	r31, 0x44	; 68
 470:	df 2e       	mov	r13, r31
 472:	f0 2d       	mov	r31, r0
 474:	e1 2c       	mov	r14, r1
 476:	f1 2c       	mov	r15, r1
 478:	00 e8       	ldi	r16, 0x80	; 128
 47a:	14 e4       	ldi	r17, 0x44	; 68
 47c:	20 e0       	ldi	r18, 0x00	; 0
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	a9 01       	movw	r20, r18
 482:	0e 94 93 01 	call	0x326	; 0x326 <map>
 486:	0f 90       	pop	r0
 488:	0f 90       	pop	r0
 48a:	0f 90       	pop	r0
 48c:	0f 90       	pop	r0
 48e:	0e 94 35 03 	call	0x66a	; 0x66a <__fixunssfsi>
 492:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 496:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
 49a:	1f 91       	pop	r17
 49c:	0f 91       	pop	r16
 49e:	ff 90       	pop	r15
 4a0:	ef 90       	pop	r14
 4a2:	df 90       	pop	r13
 4a4:	cf 90       	pop	r12
 4a6:	bf 90       	pop	r11
 4a8:	af 90       	pop	r10
 4aa:	08 95       	ret

000004ac <__subsf3>:
 4ac:	50 58       	subi	r21, 0x80	; 128

000004ae <__addsf3>:
 4ae:	bb 27       	eor	r27, r27
 4b0:	aa 27       	eor	r26, r26
 4b2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__addsf3x>
 4b6:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_round>
 4ba:	0e 94 6d 03 	call	0x6da	; 0x6da <__fp_pscA>
 4be:	38 f0       	brcs	.+14     	; 0x4ce <__addsf3+0x20>
 4c0:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__fp_pscB>
 4c4:	20 f0       	brcs	.+8      	; 0x4ce <__addsf3+0x20>
 4c6:	39 f4       	brne	.+14     	; 0x4d6 <__addsf3+0x28>
 4c8:	9f 3f       	cpi	r25, 0xFF	; 255
 4ca:	19 f4       	brne	.+6      	; 0x4d2 <__addsf3+0x24>
 4cc:	26 f4       	brtc	.+8      	; 0x4d6 <__addsf3+0x28>
 4ce:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_nan>
 4d2:	0e f4       	brtc	.+2      	; 0x4d6 <__addsf3+0x28>
 4d4:	e0 95       	com	r30
 4d6:	e7 fb       	bst	r30, 7
 4d8:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_inf>

000004dc <__addsf3x>:
 4dc:	e9 2f       	mov	r30, r25
 4de:	0e 94 8c 03 	call	0x718	; 0x718 <__fp_split3>
 4e2:	58 f3       	brcs	.-42     	; 0x4ba <__addsf3+0xc>
 4e4:	ba 17       	cp	r27, r26
 4e6:	62 07       	cpc	r22, r18
 4e8:	73 07       	cpc	r23, r19
 4ea:	84 07       	cpc	r24, r20
 4ec:	95 07       	cpc	r25, r21
 4ee:	20 f0       	brcs	.+8      	; 0x4f8 <__addsf3x+0x1c>
 4f0:	79 f4       	brne	.+30     	; 0x510 <__addsf3x+0x34>
 4f2:	a6 f5       	brtc	.+104    	; 0x55c <__addsf3x+0x80>
 4f4:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__fp_zero>
 4f8:	0e f4       	brtc	.+2      	; 0x4fc <__addsf3x+0x20>
 4fa:	e0 95       	com	r30
 4fc:	0b 2e       	mov	r0, r27
 4fe:	ba 2f       	mov	r27, r26
 500:	a0 2d       	mov	r26, r0
 502:	0b 01       	movw	r0, r22
 504:	b9 01       	movw	r22, r18
 506:	90 01       	movw	r18, r0
 508:	0c 01       	movw	r0, r24
 50a:	ca 01       	movw	r24, r20
 50c:	a0 01       	movw	r20, r0
 50e:	11 24       	eor	r1, r1
 510:	ff 27       	eor	r31, r31
 512:	59 1b       	sub	r21, r25
 514:	99 f0       	breq	.+38     	; 0x53c <__addsf3x+0x60>
 516:	59 3f       	cpi	r21, 0xF9	; 249
 518:	50 f4       	brcc	.+20     	; 0x52e <__addsf3x+0x52>
 51a:	50 3e       	cpi	r21, 0xE0	; 224
 51c:	68 f1       	brcs	.+90     	; 0x578 <__addsf3x+0x9c>
 51e:	1a 16       	cp	r1, r26
 520:	f0 40       	sbci	r31, 0x00	; 0
 522:	a2 2f       	mov	r26, r18
 524:	23 2f       	mov	r18, r19
 526:	34 2f       	mov	r19, r20
 528:	44 27       	eor	r20, r20
 52a:	58 5f       	subi	r21, 0xF8	; 248
 52c:	f3 cf       	rjmp	.-26     	; 0x514 <__addsf3x+0x38>
 52e:	46 95       	lsr	r20
 530:	37 95       	ror	r19
 532:	27 95       	ror	r18
 534:	a7 95       	ror	r26
 536:	f0 40       	sbci	r31, 0x00	; 0
 538:	53 95       	inc	r21
 53a:	c9 f7       	brne	.-14     	; 0x52e <__addsf3x+0x52>
 53c:	7e f4       	brtc	.+30     	; 0x55c <__addsf3x+0x80>
 53e:	1f 16       	cp	r1, r31
 540:	ba 0b       	sbc	r27, r26
 542:	62 0b       	sbc	r22, r18
 544:	73 0b       	sbc	r23, r19
 546:	84 0b       	sbc	r24, r20
 548:	ba f0       	brmi	.+46     	; 0x578 <__addsf3x+0x9c>
 54a:	91 50       	subi	r25, 0x01	; 1
 54c:	a1 f0       	breq	.+40     	; 0x576 <__addsf3x+0x9a>
 54e:	ff 0f       	add	r31, r31
 550:	bb 1f       	adc	r27, r27
 552:	66 1f       	adc	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	88 1f       	adc	r24, r24
 558:	c2 f7       	brpl	.-16     	; 0x54a <__addsf3x+0x6e>
 55a:	0e c0       	rjmp	.+28     	; 0x578 <__addsf3x+0x9c>
 55c:	ba 0f       	add	r27, r26
 55e:	62 1f       	adc	r22, r18
 560:	73 1f       	adc	r23, r19
 562:	84 1f       	adc	r24, r20
 564:	48 f4       	brcc	.+18     	; 0x578 <__addsf3x+0x9c>
 566:	87 95       	ror	r24
 568:	77 95       	ror	r23
 56a:	67 95       	ror	r22
 56c:	b7 95       	ror	r27
 56e:	f7 95       	ror	r31
 570:	9e 3f       	cpi	r25, 0xFE	; 254
 572:	08 f0       	brcs	.+2      	; 0x576 <__addsf3x+0x9a>
 574:	b0 cf       	rjmp	.-160    	; 0x4d6 <__addsf3+0x28>
 576:	93 95       	inc	r25
 578:	88 0f       	add	r24, r24
 57a:	08 f0       	brcs	.+2      	; 0x57e <__addsf3x+0xa2>
 57c:	99 27       	eor	r25, r25
 57e:	ee 0f       	add	r30, r30
 580:	97 95       	ror	r25
 582:	87 95       	ror	r24
 584:	08 95       	ret

00000586 <__divsf3>:
 586:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__divsf3x>
 58a:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_round>
 58e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__fp_pscB>
 592:	58 f0       	brcs	.+22     	; 0x5aa <__divsf3+0x24>
 594:	0e 94 6d 03 	call	0x6da	; 0x6da <__fp_pscA>
 598:	40 f0       	brcs	.+16     	; 0x5aa <__divsf3+0x24>
 59a:	29 f4       	brne	.+10     	; 0x5a6 <__divsf3+0x20>
 59c:	5f 3f       	cpi	r21, 0xFF	; 255
 59e:	29 f0       	breq	.+10     	; 0x5aa <__divsf3+0x24>
 5a0:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_inf>
 5a4:	51 11       	cpse	r21, r1
 5a6:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_szero>
 5aa:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_nan>

000005ae <__divsf3x>:
 5ae:	0e 94 8c 03 	call	0x718	; 0x718 <__fp_split3>
 5b2:	68 f3       	brcs	.-38     	; 0x58e <__divsf3+0x8>

000005b4 <__divsf3_pse>:
 5b4:	99 23       	and	r25, r25
 5b6:	b1 f3       	breq	.-20     	; 0x5a4 <__divsf3+0x1e>
 5b8:	55 23       	and	r21, r21
 5ba:	91 f3       	breq	.-28     	; 0x5a0 <__divsf3+0x1a>
 5bc:	95 1b       	sub	r25, r21
 5be:	55 0b       	sbc	r21, r21
 5c0:	bb 27       	eor	r27, r27
 5c2:	aa 27       	eor	r26, r26
 5c4:	62 17       	cp	r22, r18
 5c6:	73 07       	cpc	r23, r19
 5c8:	84 07       	cpc	r24, r20
 5ca:	38 f0       	brcs	.+14     	; 0x5da <__divsf3_pse+0x26>
 5cc:	9f 5f       	subi	r25, 0xFF	; 255
 5ce:	5f 4f       	sbci	r21, 0xFF	; 255
 5d0:	22 0f       	add	r18, r18
 5d2:	33 1f       	adc	r19, r19
 5d4:	44 1f       	adc	r20, r20
 5d6:	aa 1f       	adc	r26, r26
 5d8:	a9 f3       	breq	.-22     	; 0x5c4 <__divsf3_pse+0x10>
 5da:	35 d0       	rcall	.+106    	; 0x646 <__divsf3_pse+0x92>
 5dc:	0e 2e       	mov	r0, r30
 5de:	3a f0       	brmi	.+14     	; 0x5ee <__divsf3_pse+0x3a>
 5e0:	e0 e8       	ldi	r30, 0x80	; 128
 5e2:	32 d0       	rcall	.+100    	; 0x648 <__divsf3_pse+0x94>
 5e4:	91 50       	subi	r25, 0x01	; 1
 5e6:	50 40       	sbci	r21, 0x00	; 0
 5e8:	e6 95       	lsr	r30
 5ea:	00 1c       	adc	r0, r0
 5ec:	ca f7       	brpl	.-14     	; 0x5e0 <__divsf3_pse+0x2c>
 5ee:	2b d0       	rcall	.+86     	; 0x646 <__divsf3_pse+0x92>
 5f0:	fe 2f       	mov	r31, r30
 5f2:	29 d0       	rcall	.+82     	; 0x646 <__divsf3_pse+0x92>
 5f4:	66 0f       	add	r22, r22
 5f6:	77 1f       	adc	r23, r23
 5f8:	88 1f       	adc	r24, r24
 5fa:	bb 1f       	adc	r27, r27
 5fc:	26 17       	cp	r18, r22
 5fe:	37 07       	cpc	r19, r23
 600:	48 07       	cpc	r20, r24
 602:	ab 07       	cpc	r26, r27
 604:	b0 e8       	ldi	r27, 0x80	; 128
 606:	09 f0       	breq	.+2      	; 0x60a <__divsf3_pse+0x56>
 608:	bb 0b       	sbc	r27, r27
 60a:	80 2d       	mov	r24, r0
 60c:	bf 01       	movw	r22, r30
 60e:	ff 27       	eor	r31, r31
 610:	93 58       	subi	r25, 0x83	; 131
 612:	5f 4f       	sbci	r21, 0xFF	; 255
 614:	3a f0       	brmi	.+14     	; 0x624 <__divsf3_pse+0x70>
 616:	9e 3f       	cpi	r25, 0xFE	; 254
 618:	51 05       	cpc	r21, r1
 61a:	78 f0       	brcs	.+30     	; 0x63a <__divsf3_pse+0x86>
 61c:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_inf>
 620:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_szero>
 624:	5f 3f       	cpi	r21, 0xFF	; 255
 626:	e4 f3       	brlt	.-8      	; 0x620 <__divsf3_pse+0x6c>
 628:	98 3e       	cpi	r25, 0xE8	; 232
 62a:	d4 f3       	brlt	.-12     	; 0x620 <__divsf3_pse+0x6c>
 62c:	86 95       	lsr	r24
 62e:	77 95       	ror	r23
 630:	67 95       	ror	r22
 632:	b7 95       	ror	r27
 634:	f7 95       	ror	r31
 636:	9f 5f       	subi	r25, 0xFF	; 255
 638:	c9 f7       	brne	.-14     	; 0x62c <__divsf3_pse+0x78>
 63a:	88 0f       	add	r24, r24
 63c:	91 1d       	adc	r25, r1
 63e:	96 95       	lsr	r25
 640:	87 95       	ror	r24
 642:	97 f9       	bld	r25, 7
 644:	08 95       	ret
 646:	e1 e0       	ldi	r30, 0x01	; 1
 648:	66 0f       	add	r22, r22
 64a:	77 1f       	adc	r23, r23
 64c:	88 1f       	adc	r24, r24
 64e:	bb 1f       	adc	r27, r27
 650:	62 17       	cp	r22, r18
 652:	73 07       	cpc	r23, r19
 654:	84 07       	cpc	r24, r20
 656:	ba 07       	cpc	r27, r26
 658:	20 f0       	brcs	.+8      	; 0x662 <__divsf3_pse+0xae>
 65a:	62 1b       	sub	r22, r18
 65c:	73 0b       	sbc	r23, r19
 65e:	84 0b       	sbc	r24, r20
 660:	ba 0b       	sbc	r27, r26
 662:	ee 1f       	adc	r30, r30
 664:	88 f7       	brcc	.-30     	; 0x648 <__divsf3_pse+0x94>
 666:	e0 95       	com	r30
 668:	08 95       	ret

0000066a <__fixunssfsi>:
 66a:	0e 94 94 03 	call	0x728	; 0x728 <__fp_splitA>
 66e:	88 f0       	brcs	.+34     	; 0x692 <__fixunssfsi+0x28>
 670:	9f 57       	subi	r25, 0x7F	; 127
 672:	98 f0       	brcs	.+38     	; 0x69a <__fixunssfsi+0x30>
 674:	b9 2f       	mov	r27, r25
 676:	99 27       	eor	r25, r25
 678:	b7 51       	subi	r27, 0x17	; 23
 67a:	b0 f0       	brcs	.+44     	; 0x6a8 <__fixunssfsi+0x3e>
 67c:	e1 f0       	breq	.+56     	; 0x6b6 <__fixunssfsi+0x4c>
 67e:	66 0f       	add	r22, r22
 680:	77 1f       	adc	r23, r23
 682:	88 1f       	adc	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	1a f0       	brmi	.+6      	; 0x68e <__fixunssfsi+0x24>
 688:	ba 95       	dec	r27
 68a:	c9 f7       	brne	.-14     	; 0x67e <__fixunssfsi+0x14>
 68c:	14 c0       	rjmp	.+40     	; 0x6b6 <__fixunssfsi+0x4c>
 68e:	b1 30       	cpi	r27, 0x01	; 1
 690:	91 f0       	breq	.+36     	; 0x6b6 <__fixunssfsi+0x4c>
 692:	0e 94 ae 03 	call	0x75c	; 0x75c <__fp_zero>
 696:	b1 e0       	ldi	r27, 0x01	; 1
 698:	08 95       	ret
 69a:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__fp_zero>
 69e:	67 2f       	mov	r22, r23
 6a0:	78 2f       	mov	r23, r24
 6a2:	88 27       	eor	r24, r24
 6a4:	b8 5f       	subi	r27, 0xF8	; 248
 6a6:	39 f0       	breq	.+14     	; 0x6b6 <__fixunssfsi+0x4c>
 6a8:	b9 3f       	cpi	r27, 0xF9	; 249
 6aa:	cc f3       	brlt	.-14     	; 0x69e <__fixunssfsi+0x34>
 6ac:	86 95       	lsr	r24
 6ae:	77 95       	ror	r23
 6b0:	67 95       	ror	r22
 6b2:	b3 95       	inc	r27
 6b4:	d9 f7       	brne	.-10     	; 0x6ac <__fixunssfsi+0x42>
 6b6:	3e f4       	brtc	.+14     	; 0x6c6 <__fixunssfsi+0x5c>
 6b8:	90 95       	com	r25
 6ba:	80 95       	com	r24
 6bc:	70 95       	com	r23
 6be:	61 95       	neg	r22
 6c0:	7f 4f       	sbci	r23, 0xFF	; 255
 6c2:	8f 4f       	sbci	r24, 0xFF	; 255
 6c4:	9f 4f       	sbci	r25, 0xFF	; 255
 6c6:	08 95       	ret

000006c8 <__fp_inf>:
 6c8:	97 f9       	bld	r25, 7
 6ca:	9f 67       	ori	r25, 0x7F	; 127
 6cc:	80 e8       	ldi	r24, 0x80	; 128
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	60 e0       	ldi	r22, 0x00	; 0
 6d2:	08 95       	ret

000006d4 <__fp_nan>:
 6d4:	9f ef       	ldi	r25, 0xFF	; 255
 6d6:	80 ec       	ldi	r24, 0xC0	; 192
 6d8:	08 95       	ret

000006da <__fp_pscA>:
 6da:	00 24       	eor	r0, r0
 6dc:	0a 94       	dec	r0
 6de:	16 16       	cp	r1, r22
 6e0:	17 06       	cpc	r1, r23
 6e2:	18 06       	cpc	r1, r24
 6e4:	09 06       	cpc	r0, r25
 6e6:	08 95       	ret

000006e8 <__fp_pscB>:
 6e8:	00 24       	eor	r0, r0
 6ea:	0a 94       	dec	r0
 6ec:	12 16       	cp	r1, r18
 6ee:	13 06       	cpc	r1, r19
 6f0:	14 06       	cpc	r1, r20
 6f2:	05 06       	cpc	r0, r21
 6f4:	08 95       	ret

000006f6 <__fp_round>:
 6f6:	09 2e       	mov	r0, r25
 6f8:	03 94       	inc	r0
 6fa:	00 0c       	add	r0, r0
 6fc:	11 f4       	brne	.+4      	; 0x702 <__fp_round+0xc>
 6fe:	88 23       	and	r24, r24
 700:	52 f0       	brmi	.+20     	; 0x716 <__fp_round+0x20>
 702:	bb 0f       	add	r27, r27
 704:	40 f4       	brcc	.+16     	; 0x716 <__fp_round+0x20>
 706:	bf 2b       	or	r27, r31
 708:	11 f4       	brne	.+4      	; 0x70e <__fp_round+0x18>
 70a:	60 ff       	sbrs	r22, 0
 70c:	04 c0       	rjmp	.+8      	; 0x716 <__fp_round+0x20>
 70e:	6f 5f       	subi	r22, 0xFF	; 255
 710:	7f 4f       	sbci	r23, 0xFF	; 255
 712:	8f 4f       	sbci	r24, 0xFF	; 255
 714:	9f 4f       	sbci	r25, 0xFF	; 255
 716:	08 95       	ret

00000718 <__fp_split3>:
 718:	57 fd       	sbrc	r21, 7
 71a:	90 58       	subi	r25, 0x80	; 128
 71c:	44 0f       	add	r20, r20
 71e:	55 1f       	adc	r21, r21
 720:	59 f0       	breq	.+22     	; 0x738 <__fp_splitA+0x10>
 722:	5f 3f       	cpi	r21, 0xFF	; 255
 724:	71 f0       	breq	.+28     	; 0x742 <__fp_splitA+0x1a>
 726:	47 95       	ror	r20

00000728 <__fp_splitA>:
 728:	88 0f       	add	r24, r24
 72a:	97 fb       	bst	r25, 7
 72c:	99 1f       	adc	r25, r25
 72e:	61 f0       	breq	.+24     	; 0x748 <__fp_splitA+0x20>
 730:	9f 3f       	cpi	r25, 0xFF	; 255
 732:	79 f0       	breq	.+30     	; 0x752 <__fp_splitA+0x2a>
 734:	87 95       	ror	r24
 736:	08 95       	ret
 738:	12 16       	cp	r1, r18
 73a:	13 06       	cpc	r1, r19
 73c:	14 06       	cpc	r1, r20
 73e:	55 1f       	adc	r21, r21
 740:	f2 cf       	rjmp	.-28     	; 0x726 <__fp_split3+0xe>
 742:	46 95       	lsr	r20
 744:	f1 df       	rcall	.-30     	; 0x728 <__fp_splitA>
 746:	08 c0       	rjmp	.+16     	; 0x758 <__fp_splitA+0x30>
 748:	16 16       	cp	r1, r22
 74a:	17 06       	cpc	r1, r23
 74c:	18 06       	cpc	r1, r24
 74e:	99 1f       	adc	r25, r25
 750:	f1 cf       	rjmp	.-30     	; 0x734 <__fp_splitA+0xc>
 752:	86 95       	lsr	r24
 754:	71 05       	cpc	r23, r1
 756:	61 05       	cpc	r22, r1
 758:	08 94       	sec
 75a:	08 95       	ret

0000075c <__fp_zero>:
 75c:	e8 94       	clt

0000075e <__fp_szero>:
 75e:	bb 27       	eor	r27, r27
 760:	66 27       	eor	r22, r22
 762:	77 27       	eor	r23, r23
 764:	cb 01       	movw	r24, r22
 766:	97 f9       	bld	r25, 7
 768:	08 95       	ret

0000076a <__mulsf3>:
 76a:	0e 94 c8 03 	call	0x790	; 0x790 <__mulsf3x>
 76e:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_round>
 772:	0e 94 6d 03 	call	0x6da	; 0x6da <__fp_pscA>
 776:	38 f0       	brcs	.+14     	; 0x786 <__mulsf3+0x1c>
 778:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__fp_pscB>
 77c:	20 f0       	brcs	.+8      	; 0x786 <__mulsf3+0x1c>
 77e:	95 23       	and	r25, r21
 780:	11 f0       	breq	.+4      	; 0x786 <__mulsf3+0x1c>
 782:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_inf>
 786:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_nan>
 78a:	11 24       	eor	r1, r1
 78c:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_szero>

00000790 <__mulsf3x>:
 790:	0e 94 8c 03 	call	0x718	; 0x718 <__fp_split3>
 794:	70 f3       	brcs	.-36     	; 0x772 <__mulsf3+0x8>

00000796 <__mulsf3_pse>:
 796:	95 9f       	mul	r25, r21
 798:	c1 f3       	breq	.-16     	; 0x78a <__mulsf3+0x20>
 79a:	95 0f       	add	r25, r21
 79c:	50 e0       	ldi	r21, 0x00	; 0
 79e:	55 1f       	adc	r21, r21
 7a0:	62 9f       	mul	r22, r18
 7a2:	f0 01       	movw	r30, r0
 7a4:	72 9f       	mul	r23, r18
 7a6:	bb 27       	eor	r27, r27
 7a8:	f0 0d       	add	r31, r0
 7aa:	b1 1d       	adc	r27, r1
 7ac:	63 9f       	mul	r22, r19
 7ae:	aa 27       	eor	r26, r26
 7b0:	f0 0d       	add	r31, r0
 7b2:	b1 1d       	adc	r27, r1
 7b4:	aa 1f       	adc	r26, r26
 7b6:	64 9f       	mul	r22, r20
 7b8:	66 27       	eor	r22, r22
 7ba:	b0 0d       	add	r27, r0
 7bc:	a1 1d       	adc	r26, r1
 7be:	66 1f       	adc	r22, r22
 7c0:	82 9f       	mul	r24, r18
 7c2:	22 27       	eor	r18, r18
 7c4:	b0 0d       	add	r27, r0
 7c6:	a1 1d       	adc	r26, r1
 7c8:	62 1f       	adc	r22, r18
 7ca:	73 9f       	mul	r23, r19
 7cc:	b0 0d       	add	r27, r0
 7ce:	a1 1d       	adc	r26, r1
 7d0:	62 1f       	adc	r22, r18
 7d2:	83 9f       	mul	r24, r19
 7d4:	a0 0d       	add	r26, r0
 7d6:	61 1d       	adc	r22, r1
 7d8:	22 1f       	adc	r18, r18
 7da:	74 9f       	mul	r23, r20
 7dc:	33 27       	eor	r19, r19
 7de:	a0 0d       	add	r26, r0
 7e0:	61 1d       	adc	r22, r1
 7e2:	23 1f       	adc	r18, r19
 7e4:	84 9f       	mul	r24, r20
 7e6:	60 0d       	add	r22, r0
 7e8:	21 1d       	adc	r18, r1
 7ea:	82 2f       	mov	r24, r18
 7ec:	76 2f       	mov	r23, r22
 7ee:	6a 2f       	mov	r22, r26
 7f0:	11 24       	eor	r1, r1
 7f2:	9f 57       	subi	r25, 0x7F	; 127
 7f4:	50 40       	sbci	r21, 0x00	; 0
 7f6:	9a f0       	brmi	.+38     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7f8:	f1 f0       	breq	.+60     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 7fa:	88 23       	and	r24, r24
 7fc:	4a f0       	brmi	.+18     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7fe:	ee 0f       	add	r30, r30
 800:	ff 1f       	adc	r31, r31
 802:	bb 1f       	adc	r27, r27
 804:	66 1f       	adc	r22, r22
 806:	77 1f       	adc	r23, r23
 808:	88 1f       	adc	r24, r24
 80a:	91 50       	subi	r25, 0x01	; 1
 80c:	50 40       	sbci	r21, 0x00	; 0
 80e:	a9 f7       	brne	.-22     	; 0x7fa <__mulsf3_pse+0x64>
 810:	9e 3f       	cpi	r25, 0xFE	; 254
 812:	51 05       	cpc	r21, r1
 814:	80 f0       	brcs	.+32     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 816:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_inf>
 81a:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_szero>
 81e:	5f 3f       	cpi	r21, 0xFF	; 255
 820:	e4 f3       	brlt	.-8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 822:	98 3e       	cpi	r25, 0xE8	; 232
 824:	d4 f3       	brlt	.-12     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 826:	86 95       	lsr	r24
 828:	77 95       	ror	r23
 82a:	67 95       	ror	r22
 82c:	b7 95       	ror	r27
 82e:	f7 95       	ror	r31
 830:	e7 95       	ror	r30
 832:	9f 5f       	subi	r25, 0xFF	; 255
 834:	c1 f7       	brne	.-16     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 836:	fe 2b       	or	r31, r30
 838:	88 0f       	add	r24, r24
 83a:	91 1d       	adc	r25, r1
 83c:	96 95       	lsr	r25
 83e:	87 95       	ror	r24
 840:	97 f9       	bld	r25, 7
 842:	08 95       	ret

00000844 <__umulhisi3>:
 844:	a2 9f       	mul	r26, r18
 846:	b0 01       	movw	r22, r0
 848:	b3 9f       	mul	r27, r19
 84a:	c0 01       	movw	r24, r0
 84c:	a3 9f       	mul	r26, r19
 84e:	70 0d       	add	r23, r0
 850:	81 1d       	adc	r24, r1
 852:	11 24       	eor	r1, r1
 854:	91 1d       	adc	r25, r1
 856:	b2 9f       	mul	r27, r18
 858:	70 0d       	add	r23, r0
 85a:	81 1d       	adc	r24, r1
 85c:	11 24       	eor	r1, r1
 85e:	91 1d       	adc	r25, r1
 860:	08 95       	ret

00000862 <_exit>:
 862:	f8 94       	cli

00000864 <__stop_program>:
 864:	ff cf       	rjmp	.-2      	; 0x864 <__stop_program>
